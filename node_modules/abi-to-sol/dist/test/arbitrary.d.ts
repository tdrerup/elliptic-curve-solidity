import * as fc from "fast-check";
import * as Types from "../lib/types";
export declare namespace Numerics {
    const Bytes: () => fc.Arbitrary<number>;
    const Bits: () => fc.Arbitrary<number>;
    const DecimalPlaces: () => fc.Arbitrary<number>;
    const Precision: () => fc.Arbitrary<[number, number]>;
}
export declare namespace Primitives {
    const Uint: () => fc.Arbitrary<string>;
    const Int: () => fc.Arbitrary<string>;
    const Address: () => fc.Arbitrary<string>;
    const Bool: () => fc.Arbitrary<string>;
    const Fixed: () => fc.Arbitrary<string>;
    const Ufixed: () => fc.Arbitrary<string>;
    const BytesM: () => fc.Arbitrary<string>;
    const Function: () => fc.Arbitrary<string>;
    const Bytes: () => fc.Arbitrary<string>;
    const String: () => fc.Arbitrary<string>;
    const Tuple: () => fc.Arbitrary<string>;
}
export declare const Primitive: () => fc.Arbitrary<string>;
export declare const Type: fc.Memo<string>;
export declare const ParameterName: () => fc.Arbitrary<string>;
export declare const EventName: () => fc.Arbitrary<string>;
export declare const FunctionName: () => fc.Arbitrary<string>;
export declare const TypeRecord: () => fc.Arbitrary<any>;
export declare const Parameter: () => fc.Arbitrary<any>;
export declare const EventParameter: () => fc.Arbitrary<any>;
export declare const Event: () => fc.Arbitrary<{
    type: string;
    name: string;
    inputs: any[];
    anonymous: boolean;
}>;
export declare const NormalFunction: () => fc.Arbitrary<Partial<{
    type: string;
}> | {
    name: string;
    inputs: any[];
} | Partial<{
    outputs: any[];
}> | {
    stateMutability: string;
    payable?: undefined;
    constant?: undefined;
} | {
    stateMutability: string;
    payable: boolean;
    constant: boolean;
}>;
export declare const ReceiveFunction: () => fc.Arbitrary<{
    type: string;
    stateMutability: string;
}>;
export declare const FallbackFunction: () => fc.Arbitrary<{}>;
export declare const ConstructorFunction: () => fc.Arbitrary<{}>;
export declare const Abi: () => fc.Arbitrary<Types.Abi>;
//# sourceMappingURL=arbitrary.d.ts.map