"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.excludesFunctionParameters = void 0;
const visitor_1 = require("../lib/visitor");
exports.excludesFunctionParameters = (node) => visitor_1.dispatch({
    node,
    // @ts-ignore
    visitor: new FunctionParameterExcluder(),
});
class FunctionParameterExcluder {
    visitAbi({ node: entries }) {
        return entries
            .map((node) => visitor_1.dispatch({ node, visitor: this }))
            .reduce((a, b) => a && b, true);
    }
    visitFunctionEntry({ node: entry }) {
        const { inputs, outputs } = entry;
        const inputsExcludeFunctions = inputs
            .map((node) => visitor_1.dispatch({ node, visitor: this }))
            .reduce((a, b) => a && b, true);
        const outputsExcludeFunctions = outputs
            .map((node) => visitor_1.dispatch({ node, visitor: this }))
            .reduce((a, b) => a && b, true);
        return inputsExcludeFunctions && outputsExcludeFunctions;
    }
    visitConstructorEntry({ node: entry, }) {
        const { inputs } = entry;
        return inputs
            .map((node) => visitor_1.dispatch({ node, visitor: this }))
            .reduce((a, b) => a && b, true);
    }
    visitFallbackEntry({ node: entry }) {
        return true;
    }
    visitReceiveEntry({ node: entry }) {
        return true;
    }
    visitEventEntry({ node: entry }) {
        const { inputs } = entry;
        return inputs
            .map((node) => visitor_1.dispatch({ node, visitor: this }))
            .reduce((a, b) => a && b, true);
    }
    visitParameter({ node: parameter }) {
        if (parameter.type.startsWith("function")) {
            return false;
        }
        const { components } = parameter;
        if (components) {
            return components
                .map((node) => visitor_1.dispatch({ node, visitor: this }))
                .reduce((a, b) => a && b, true);
        }
        return true;
    }
}
//# sourceMappingURL=preflight.js.map