"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.collectDeclarations = exports.DeclarationsCollector = void 0;
const Codec = __importStar(require("@truffle/codec"));
const visitor_1 = require("./visitor");
class DeclarationsCollector {
    visitAbi({ node: nodes }) {
        return nodes
            .map((node) => visitor_1.dispatch({ node, visitor: this }))
            .reduce((a, b) => (Object.assign(Object.assign({}, a), b)), {});
    }
    visitEventEntry({ node: entry }) {
        return entry.inputs
            .map((node) => visitor_1.dispatch({ node, visitor: this }))
            .reduce((a, b) => (Object.assign(Object.assign({}, a), b)), {});
    }
    visitFunctionEntry({ node: entry, }) {
        return [...entry.inputs, ...(entry.outputs || [])]
            .map((node) => visitor_1.dispatch({ node, visitor: this }))
            .reduce((a, b) => (Object.assign(Object.assign({}, a), b)), {});
    }
    visitConstructorEntry({ node: entry, }) {
        return entry.inputs
            .map((node) => visitor_1.dispatch({ node, visitor: this }))
            .reduce((a, b) => (Object.assign(Object.assign({}, a), b)), {});
    }
    visitFallbackEntry({ node: entry, }) {
        return {};
    }
    visitReceiveEntry({ node: entry, }) {
        return {};
    }
    visitParameter({ node: parameter }) {
        if (!parameter.type.startsWith("tuple")) {
            return {};
        }
        const components = parameter.components || [];
        const signature = Codec.AbiData.Utils.abiTupleSignature(components);
        const declaration = {
            components: components.map(({ name, type, components }) => !components
                ? { name, type }
                : {
                    name,
                    type,
                    signature: Codec.AbiData.Utils.abiTupleSignature(components),
                }),
        };
        if ("internalType" in parameter && parameter.internalType) {
            const match = parameter.internalType.match(/struct ([^\[]+).*/);
            if (match) {
                declaration.identifier = match[1];
            }
        }
        const declarations = Object.assign(Object.assign({}, components
            .map((component) => this.visitParameter({ node: component }))
            .reduce((a, b) => (Object.assign(Object.assign({}, a), b)), {})), { [signature]: declaration });
        return declarations;
    }
}
exports.DeclarationsCollector = DeclarationsCollector;
exports.collectDeclarations = (node) => visitor_1.dispatch({
    node,
    visitor: new DeclarationsCollector(),
});
//# sourceMappingURL=declarations.js.map