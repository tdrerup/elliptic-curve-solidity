"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateSolidity = void 0;
const prettier_1 = __importDefault(require("prettier"));
const Codec = __importStar(require("@truffle/codec"));
const visitor_1 = require("./visitor");
const defaults = __importStar(require("./defaults"));
const declarations_1 = require("./declarations");
exports.generateSolidity = (_a) => {
    var { abi } = _a, options = __rest(_a, ["abi"]);
    const generated = visitor_1.dispatch({
        node: abi,
        visitor: new SolidityGenerator(Object.assign(Object.assign({}, options), { declarations: declarations_1.collectDeclarations(abi) })),
    });
    try {
        return prettier_1.default.format(generated, {
            plugins: ["prettier-plugin-solidity"],
            // @ts-ignore
            parser: "solidity-parse",
        });
    }
    catch (error) {
        return generated;
    }
};
class SolidityGenerator {
    constructor({ declarations, name = defaults.name, license = defaults.license, solidityVersion = defaults.solidityVersion, }) {
        this.name = name;
        this.license = license;
        this.declarations = declarations;
        this.solidityVersion = solidityVersion;
        this.identifiers = {};
        let index = 0;
        for (const [signature, { identifier }] of Object.entries(declarations)) {
            if (identifier) {
                this.identifiers[signature] = identifier;
            }
            else {
                this.identifiers[signature] = `S_${index++}`;
            }
        }
    }
    visitAbi({ node: abi }) {
        return [
            this.generateHeader(),
            this.generateDeclarations(),
            this.generateInterface(abi),
            this.generateAutogeneratedNotice(abi),
        ].join("\n\n");
    }
    visitFunctionEntry({ node: entry }) {
        const { name, inputs, stateMutability } = entry;
        return [
            `function ${name}(`,
            entry.inputs.map((node) => visitor_1.dispatch({
                node,
                visitor: this,
                context: {
                    parameterModifiers: (parameter) => parameter.type.startsWith("tuple") ||
                        parameter.type.includes("[") ||
                        parameter.type === "bytes" ||
                        parameter.type === "string"
                        ? ["memory"]
                        : [],
                },
            })),
            `) external`,
            this.generateStateMutability(entry),
            entry.outputs && entry.outputs.length > 0
                ? [
                    `returns (`,
                    entry.outputs
                        .map((node) => visitor_1.dispatch({
                        node,
                        visitor: this,
                        context: {
                            parameterModifiers: (parameter) => parameter.type.startsWith("tuple") ||
                                parameter.type.includes("[") ||
                                parameter.type === "bytes" ||
                                parameter.type === "string"
                                ? ["memory"]
                                : [],
                        },
                    }))
                        .join(", "),
                    `)`,
                ].join("")
                : ``,
            `;`,
        ].join(" ");
    }
    visitConstructorEntry({ node: entry }) {
        // interfaces don't have constructors
        return "";
    }
    visitFallbackEntry({ node: entry }) {
        const { stateMutability } = entry;
        return `fallback () external ${stateMutability === "payable" ? "payable" : ""};`;
    }
    visitReceiveEntry() {
        return `receive () external payable;`;
    }
    visitEventEntry({ node: entry }) {
        const { name, inputs, anonymous } = entry;
        return [
            `event ${name}(`,
            inputs.map((node) => visitor_1.dispatch({
                node,
                visitor: this,
                context: {
                    parameterModifiers: (parameter) => 
                    // TODO fix this
                    parameter.indexed ? ["indexed"] : [],
                },
            })),
            `)`,
            `${anonymous ? "anonymous" : ""};`,
        ].join(" ");
    }
    visitParameter({ node: parameter, context }) {
        const type = this.generateType(parameter);
        // @ts-ignore
        const { parameterModifiers } = context;
        return [type, ...parameterModifiers(parameter), parameter.name].join(" ");
    }
    generateHeader() {
        return [
            `// SPDX-License-Identifier: ${this.license}`,
            `// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol. SEE BELOW FOR SOURCE. !!`,
            `pragma solidity ${this.solidityVersion};`,
            `pragma experimental ABIEncoderV2;`,
        ].join("\n");
    }
    generateAutogeneratedNotice(abi) {
        return [
            ``,
            `// THIS FILE WAS AUTOGENERATED FROM THE FOLLOWING ABI JSON:`,
            `/*`,
            JSON.stringify(abi),
            `*/`,
        ].join("\n");
    }
    generateDeclarations() {
        return [...Object.entries(this.declarations).entries()]
            .map(([index, [signature, declaration]]) => {
            const identifier = this.identifiers[signature];
            const components = this.generateComponents(declaration);
            return `struct ${identifier} { ${components} }`;
        })
            .join("\n\n");
    }
    generateComponents(declaration) {
        return declaration.components
            .map((component) => {
            const { name, type, signature } = component;
            if (!signature) {
                return `${type} ${name};`;
            }
            const identifier = type.replace("tuple", this.identifiers[signature]);
            return `${identifier} ${name};`;
        })
            .join("\n");
    }
    generateType(parameter) {
        if (!parameter.components) {
            return parameter.type;
        }
        const { type, components } = parameter;
        const signature = Codec.AbiData.Utils.abiTupleSignature(components);
        return type.replace("tuple", this.identifiers[signature]);
    }
    generateStateMutability(entry) {
        if (entry.stateMutability && entry.stateMutability !== "nonpayable") {
            return entry.stateMutability;
        }
        return "";
    }
    generateInterface(abi) {
        return [
            `interface ${this.name} {`,
            ...abi.map((node) => visitor_1.dispatch({ node, visitor: this })),
            `}`,
        ].join("\n");
    }
}
//# sourceMappingURL=solidity.js.map