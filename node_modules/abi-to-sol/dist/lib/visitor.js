"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dispatch = void 0;
const Abi = __importStar(require("@truffle/abi-utils"));
exports.dispatch = (options) => {
    const { node, visitor, context } = options;
    if (isAbi(node)) {
        return visitor.visitAbi({
            node: Abi.normalize(node),
            context,
        });
    }
    else if (isEntry(node)) {
        switch (node.type) {
            case "function":
                return visitor.visitFunctionEntry({ node, context });
            case "constructor":
                return visitor.visitConstructorEntry({ node, context });
            case "fallback":
                return visitor.visitFallbackEntry({ node, context });
            case "receive":
                return visitor.visitReceiveEntry({ node, context });
            case "event":
                return visitor.visitEventEntry({ node, context });
        }
    }
    else {
        return visitor.visitParameter({ node, context });
    }
};
const isAbi = (node) => node instanceof Array;
const isEntry = (node) => typeof node === "object" &&
    "type" in node &&
    ["function", "constructor", "fallback", "receive", "event"].includes(node.type) &&
    (node.type !== "function" || "stateMutability" in node || "constant" in node);
//# sourceMappingURL=visitor.js.map