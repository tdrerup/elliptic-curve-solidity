import { Abi as SchemaAbi } from "@truffle/contract-schema/spec";
import * as Abi from "@truffle/abi-utils";
export interface VisitOptions<N extends Node, C = undefined> {
    node: N;
    context?: C;
}
export interface Visitor<T, C = undefined> {
    visitAbi(options: VisitOptions<Abi.Abi, C>): T;
    visitFunctionEntry(options: VisitOptions<Abi.FunctionEntry, C>): T;
    visitConstructorEntry(options: VisitOptions<Abi.ConstructorEntry, C>): T;
    visitFallbackEntry(options: VisitOptions<Abi.FallbackEntry, C>): T;
    visitReceiveEntry(options: VisitOptions<Abi.ReceiveEntry, C>): T;
    visitEventEntry(options: VisitOptions<Abi.EventEntry, C>): T;
    visitParameter(options: VisitOptions<Abi.Parameter, C>): T;
}
export interface DispatchOptions<T, C> {
    node: Node | SchemaAbi;
    visitor: Visitor<T, C>;
    context?: C;
}
export declare type Node = Abi.Abi | Abi.Entry | Abi.FunctionEntry | Abi.ConstructorEntry | Abi.FallbackEntry | Abi.ReceiveEntry | Abi.EventEntry | Abi.Parameter | Abi.EventParameter;
export declare const dispatch: <T, C>(options: DispatchOptions<T, C>) => T;
//# sourceMappingURL=visitor.d.ts.map