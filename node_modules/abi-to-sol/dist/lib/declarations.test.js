"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fc = __importStar(require("fast-check"));
const jest_fast_check_1 = require("jest-fast-check");
const abi_utils_1 = require("@truffle/abi-utils");
const Example = __importStar(require("../test/custom-example"));
const declarations_1 = require("./declarations");
describe("collectDeclarations", () => {
    describe("arbitrary examples", () => {
        describe("for non-tuple parameters / event parameters", () => {
            jest_fast_check_1.testProp("are empty", [fc.oneof(abi_utils_1.Arbitrary.Parameter(), abi_utils_1.Arbitrary.EventParameter())], (parameter) => {
                fc.pre(!parameter.type.startsWith("tuple"));
                expect(declarations_1.collectDeclarations(parameter)).toEqual({});
            });
        });
        describe("for tuple parameters with non-tuple components", () => {
            jest_fast_check_1.testProp("have length 1", [fc.oneof(abi_utils_1.Arbitrary.Parameter(), abi_utils_1.Arbitrary.EventParameter())], (parameter) => {
                fc.pre(parameter.type.startsWith("tuple"));
                fc.pre(parameter.components.every((component) => !component.type.startsWith("tuple")));
                const declarations = declarations_1.collectDeclarations(parameter);
                expect(Object.keys(declarations)).toHaveLength(1);
                const [declaration] = Object.values(declarations);
                expect(declaration).toHaveProperty("components");
                const { components } = declaration;
                expect(components).toHaveLength(parameter.components.length);
                for (const [index, component] of components.entries()) {
                    expect(component.name).toEqual(parameter.components[index].name);
                }
            });
        });
        describe("for tuple parameters with exactly one tuple component", () => {
            jest_fast_check_1.testProp("have length 2", [fc.oneof(abi_utils_1.Arbitrary.Parameter(), abi_utils_1.Arbitrary.EventParameter())], (parameter) => {
                fc.pre(parameter.type.startsWith("tuple"));
                // find exactly one tuple-based component
                const tupleComponents = parameter.components.filter((component) => component.type.startsWith("tuple"));
                fc.pre(tupleComponents.length === 1);
                const [tupleComponent] = tupleComponents;
                fc.pre(tupleComponent.components.every((component) => !component.type.startsWith("tuple")));
                const declarations = declarations_1.collectDeclarations(parameter);
                expect(Object.keys(declarations)).toHaveLength(2);
            });
        });
        jest_fast_check_1.testProp("produce only valid references to each other", [fc.oneof(abi_utils_1.Arbitrary.Parameter(), abi_utils_1.Arbitrary.EventParameter())], (parameter) => {
            fc.pre(parameter.type.startsWith("tuple"));
            const components = parameter.components || [];
            const declarations = declarations_1.collectDeclarations(parameter);
            for (const { components } of Object.values(declarations)) {
                for (const { signature } of components) {
                    if (signature) {
                        expect(declarations).toHaveProperty(signature);
                    }
                }
            }
        });
    });
    describe("custom example", () => {
        const declarations = declarations_1.collectDeclarations(Example.abi);
        for (const [structName, signature] of Object.entries(Example.expectedSignatures)) {
            describe(`struct ${structName}`, () => {
                it("exists in declarations", () => {
                    expect(declarations).toHaveProperty(signature);
                });
                const expectedComponents = Example.expectedDeclarations[structName];
                const declaration = declarations[signature];
                for (const [componentName, component] of Object.entries(expectedComponents)) {
                    describe(`component ${componentName}`, () => {
                        it("exists in declarations", () => {
                            const names = declaration.components.map(({ name }) => name);
                            expect(names).toContain(componentName);
                        });
                        const expectedComponent = expectedComponents[componentName];
                        const component = declaration.components.find(({ name }) => name === componentName);
                        it("has correct type", () => {
                            expect(component.type).toEqual(expectedComponent.type);
                        });
                        if (component.signature) {
                            it("has correct signature", () => {
                                expect(component.signature).toEqual(expectedComponent.signature);
                            });
                        }
                    });
                }
            });
        }
    });
});
//# sourceMappingURL=declarations.test.js.map