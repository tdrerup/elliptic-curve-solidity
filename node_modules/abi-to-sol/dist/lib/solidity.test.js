"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fc = __importStar(require("fast-check"));
const jest_fast_check_1 = require("jest-fast-check");
const Abi = __importStar(require("@truffle/abi-utils"));
const Example = __importStar(require("../test/custom-example"));
const compile_abi_1 = require("../test/compile-abi");
const preflight_1 = require("../test/preflight");
const solidity_1 = require("./solidity");
const removeProps = (obj, keys) => {
    if (obj instanceof Array) {
        for (const item of obj) {
            removeProps(item, keys);
        }
    }
    else if (typeof obj === "object") {
        for (const [key, value] of Object.entries(obj)) {
            if (keys.has(key)) {
                delete obj[key];
            }
            else {
                removeProps(obj[key], keys);
            }
        }
    }
    return obj;
};
describe("generateSolidity", () => {
    jest_fast_check_1.testProp("compiles to input ABI", [Abi.Arbitrary.Abi()], (abi) => {
        fc.pre(abi.every((entry) => "type" in entry && entry.type !== "constructor"));
        fc.pre(preflight_1.excludesFunctionParameters(abi));
        fc.pre(abi.length > 0);
        const output = solidity_1.generateSolidity({
            name: "MyInterface",
            abi,
            solidityVersion: "^0.7.0",
        });
        let resultAbi;
        try {
            resultAbi = compile_abi_1.compileAbi(output);
        }
        catch (error) {
            console.log("Failed to compile. Solidity:\n%s", output);
            throw error;
        }
        const compiledAbi = new Set(removeProps(resultAbi, new Set(["internalType"])));
        const expectedAbi = new Set(Abi.normalize(abi));
        expect(compiledAbi).toEqual(expectedAbi);
    });
    describe("custom example", () => {
        const abiWithoutConstructor = Abi.normalize(Example.abi.filter(({ type }) => type !== "constructor"));
        const output = solidity_1.generateSolidity({
            name: "Example",
            abi: abiWithoutConstructor,
            solidityVersion: "^0.7.0",
        });
        it("generates output", () => {
            const compiledAbi = compile_abi_1.compileAbi(output);
            const expectedAbi = abiWithoutConstructor.map((entry) => (Object.assign(Object.assign({}, entry), { type: entry.type || "function" })));
            expect(compiledAbi).toEqual(expectedAbi);
        });
    });
});
//# sourceMappingURL=solidity.test.js.map