#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const neodoc = require("neodoc");
const abiSchema = __importStar(require("@truffle/contract-schema/spec/abi.spec.json"));
const better_ajv_errors_1 = __importDefault(require("better-ajv-errors"));
const ajv_1 = __importDefault(require("ajv"));
const lib_1 = require("../lib");
const defaults = __importStar(require("../lib/defaults"));
const usage = `
abi-to-sol

Usage:
  abi-to-sol
    [--solidity-version=<solidityVersion>]
    [--license=<license>]
    [--validate]
    [<name>]
  abi-to-sol -h | --help
  abi-to-sol --version

Options:
  <name>
    Name of generated interface. Default: ${defaults.name}

  --validate
    Validate JSON before starting

  -V --solidity-version
    Version of Solidity (for pragma). Default: ${defaults.solidityVersion}

  -L --license
    SPDX license identifier. Default: ${defaults.license}

  -h --help     Show this screen.
  --version     Show version.
`;
const readStdin = () => __awaiter(void 0, void 0, void 0, function* () {
    return yield new Promise((accept, reject) => {
        const chunks = [];
        process.stdin.setEncoding("utf8");
        process.stdin.on("data", (chunk) => chunks.push(chunk));
        process.stdin.on("end", () => {
            try {
                const json = chunks.join();
                const abi = JSON.parse(json);
                accept(abi);
            }
            catch (error) {
                reject(error);
            }
        });
    });
});
const main = () => __awaiter(void 0, void 0, void 0, function* () {
    const args = neodoc.run(usage, {
        smartOptions: true,
        laxPlacement: true,
    });
    const ajv = new ajv_1.default({ jsonPointers: true });
    const validate = ajv.compile(abiSchema);
    const options = {
        solidityVersion: args["-V"] || args["--solidity-version"],
        name: args["<name>"],
        license: args["-L"] || args["--license"],
        validate: args["--validate"] || false,
    };
    const abi = (yield readStdin());
    if (options.validate) {
        const valid = validate(abi);
        if (!valid) {
            const output = better_ajv_errors_1.default(abiSchema, abi, validate.errors, {
                format: "cli",
            });
            console.log(output);
            process.exit(1);
        }
    }
    process.stdout.write(lib_1.generateSolidity(Object.assign(Object.assign({}, options), { abi })));
});
main();
//# sourceMappingURL=abi-to-sol.js.map