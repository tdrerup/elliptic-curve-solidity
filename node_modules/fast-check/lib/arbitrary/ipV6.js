"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ipV6 = void 0;
const array_1 = require("./array");
const Converters_1 = require("../check/arbitrary/definition/Converters");
const oneof_1 = require("./oneof");
const hexaString_1 = require("./hexaString");
const tuple_1 = require("./tuple");
const ipV4_1 = require("./ipV4");
const EntitiesToIPv6_1 = require("./_internals/mappers/EntitiesToIPv6");
function h16sTol32Mapper([a, b]) {
    return `${a}:${b}`;
}
function h16sTol32Unmapper(value) {
    if (typeof value !== 'string')
        throw new Error('Invalid type');
    if (!value.includes(':'))
        throw new Error('Invalid value');
    return value.split(':', 2);
}
function ipV6() {
    const h16Arb = hexaString_1.hexaString({ minLength: 1, maxLength: 4 });
    const ls32Arb = oneof_1.oneof(Converters_1.convertFromNext(Converters_1.convertToNext(tuple_1.tuple(h16Arb, h16Arb)).map(h16sTol32Mapper, h16sTol32Unmapper)), ipV4_1.ipV4());
    return oneof_1.oneof(Converters_1.convertFromNext(Converters_1.convertToNext(tuple_1.tuple(array_1.array(h16Arb, { minLength: 6, maxLength: 6 }), ls32Arb)).map(EntitiesToIPv6_1.fullySpecifiedMapper, EntitiesToIPv6_1.fullySpecifiedUnmapper)), Converters_1.convertFromNext(Converters_1.convertToNext(tuple_1.tuple(array_1.array(h16Arb, { minLength: 5, maxLength: 5 }), ls32Arb)).map(EntitiesToIPv6_1.onlyTrailingMapper, EntitiesToIPv6_1.onlyTrailingUnmapper)), Converters_1.convertFromNext(Converters_1.convertToNext(tuple_1.tuple(array_1.array(h16Arb, { minLength: 0, maxLength: 1 }), array_1.array(h16Arb, { minLength: 4, maxLength: 4 }), ls32Arb)).map(EntitiesToIPv6_1.multiTrailingMapper, EntitiesToIPv6_1.multiTrailingUnmapper)), Converters_1.convertFromNext(Converters_1.convertToNext(tuple_1.tuple(array_1.array(h16Arb, { minLength: 0, maxLength: 2 }), array_1.array(h16Arb, { minLength: 3, maxLength: 3 }), ls32Arb)).map(EntitiesToIPv6_1.multiTrailingMapper, EntitiesToIPv6_1.multiTrailingUnmapper)), Converters_1.convertFromNext(Converters_1.convertToNext(tuple_1.tuple(array_1.array(h16Arb, { minLength: 0, maxLength: 3 }), array_1.array(h16Arb, { minLength: 2, maxLength: 2 }), ls32Arb)).map(EntitiesToIPv6_1.multiTrailingMapper, EntitiesToIPv6_1.multiTrailingUnmapper)), Converters_1.convertFromNext(Converters_1.convertToNext(tuple_1.tuple(array_1.array(h16Arb, { minLength: 0, maxLength: 4 }), h16Arb, ls32Arb)).map(EntitiesToIPv6_1.multiTrailingMapperOne, EntitiesToIPv6_1.multiTrailingUnmapperOne)), Converters_1.convertFromNext(Converters_1.convertToNext(tuple_1.tuple(array_1.array(h16Arb, { minLength: 0, maxLength: 5 }), ls32Arb)).map(EntitiesToIPv6_1.singleTrailingMapper, EntitiesToIPv6_1.singleTrailingUnmapper)), Converters_1.convertFromNext(Converters_1.convertToNext(tuple_1.tuple(array_1.array(h16Arb, { minLength: 0, maxLength: 6 }), h16Arb)).map(EntitiesToIPv6_1.singleTrailingMapper, EntitiesToIPv6_1.singleTrailingUnmapper)), Converters_1.convertFromNext(Converters_1.convertToNext(tuple_1.tuple(array_1.array(h16Arb, { minLength: 0, maxLength: 7 }))).map(EntitiesToIPv6_1.noTrailingMapper, EntitiesToIPv6_1.noTrailingUnmapper)));
}
exports.ipV6 = ipV6;
