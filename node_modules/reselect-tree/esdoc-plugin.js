(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("reselect-tree", [], factory);
	else if(typeof exports === 'object')
		exports["reselect-tree"] = factory();
	else
		root["reselect-tree"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 9);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = require("debug");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = require("source-map-support/register");

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = require("assert");

/***/ }),
/* 3 */,
/* 4 */,
/* 5 */,
/* 6 */,
/* 7 */,
/* 8 */,
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const debug = __webpack_require__(0)("reselect-tree:esdoc-plugin");
const assert = __webpack_require__(2);
const path = __webpack_require__(10);
const fs = __webpack_require__(11);
const DocFactory = __webpack_require__(12);

__webpack_require__(1);

// hack
const ESParser = __webpack_require__(22).default;
const InvalidCodeLogger = __webpack_require__(23).default;
const PathResolver = __webpack_require__(24).default;
const ASTUtil = __webpack_require__(25).default;

class Plugin {
  onHandleDocs(ev) {
    this._docs = ev.data.docs;
    this._option = ev.data.option;

    this._exec();
  }

  _exec() {
    this._setDefault();

    const docs = this._generateDocs();
    this._docs.push(...docs);
  }

  _setDefault() {
    if (!this._option) return;

    const option = this._option;
    assert(option.source);
    if (!option.interfaces) option.interfaces = ['createSelectorTree', 'createLeaf', '<arrow>', '<function>', '<subtree>'];
    if (!option.includes) option.includes = ['selectors/.*\\.js$', 'selectors.js$'];
    if (!option.excludes) option.excludes = ['\\.config\\.js$'];
  }

  /**
   * Generate document from selector code.
   */
  _generateDocs() {
    const option = this._option;
    const results = [];

    if (!option) return results;

    const includes = option.includes.map(v => new RegExp(v));
    const excludes = option.excludes.map(v => new RegExp(v));
    const sourceDirPath = path.resolve(option.source);

    this._walk(option.source, filePath => {
      const relativeFilePath = path.relative(sourceDirPath, filePath);
      let match = false;
      for (const reg of includes) {
        if (relativeFilePath.match(reg)) {
          match = true;
          break;
        }
      }
      if (!match) return;

      for (const reg of excludes) {
        if (relativeFilePath.match(reg)) return;
      }

      console.log(`parse: ${filePath}`);
      const temp = this._traverse(option.interfaces, option.source, filePath);
      if (!temp) return;
      results.push(...temp.results);
    });

    return results;
  }

  /**
   * walk recursive in directory.
   * @param {string} dirPath - target directory path.
   * @param {function(entryPath: string)} callback - callback for find file.
   * @private
   */
  _walk(dirPath, callback) {
    const entries = fs.readdirSync(dirPath);

    for (const entry of entries) {
      const entryPath = path.resolve(dirPath, entry);
      const stat = fs.statSync(entryPath);

      if (stat.isFile()) {
        callback(entryPath);
      } else if (stat.isDirectory()) {
        this._walk(entryPath, callback);
      }
    }
  }

  /**
   * traverse doc comment in selector code file.
   * @param {string[]} interfaces - selector interface names.
   * @param {string} inDirPath - root directory path.
   * @param {string} filePath - target selector code file path.
   * @returns {Object} return document info that is traversed.
   * @property {DocObject[]} results - this is contained selector code.
   * @property {AST} ast - this is AST of selector code.
   * @private
   */
  _traverse(interfaces, inDirPath, filePath) {
    let ast;
    try {
      ast = ESParser.parse(filePath);
    } catch (e) {
      InvalidCodeLogger.showFile(filePath, e);
      return null;
    }
    const pathResolver = new PathResolver(inDirPath, filePath);
    const factory = new DocFactory(interfaces, ast, pathResolver);

    ASTUtil.traverse(ast, (node, parent) => {
      try {
        factory.push(node, parent);
      } catch (e) {
        InvalidCodeLogger.show(filePath, node);
        throw e;
      }
    });

    return { results: factory.results, ast: ast };
  }
}

module.exports = new Plugin();

/***/ }),
/* 10 */
/***/ (function(module, exports) {

module.exports = require("path");

/***/ }),
/* 11 */
/***/ (function(module, exports) {

module.exports = require("fs");

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _defineProperty = __webpack_require__(13);

var _defineProperty2 = _interopRequireDefault(_defineProperty);

var _symbol = __webpack_require__(14);

var _symbol2 = _interopRequireDefault(_symbol);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = __webpack_require__(0)("reselect-tree:esdoc-plugin:factory");
const assert = __webpack_require__(2);
const Doc = __webpack_require__(15);
const FileDoc = __webpack_require__(19);
// hack: depends on ESDoc internal class
const CommentParser = __webpack_require__(21).default;

const already = (0, _symbol2.default)('already');

/**
 * Selector doc factory class.
 * @example
 * let factory = new DocFactory('mocha', ast, pathResolver);
 * factory.push(node, parentNode);
 * let results = factory.results;
 */
class DocFactory {
  /**
   * get unique id.
   * @returns {number} unique id.
   * @private
   */
  static _getUniqueId() {
    if (!this._sequence) /** @type {number} */this._sequence = 0;

    return this._sequence++;
  }

  /**
   * @type {DocObject[]}
   */
  get results() {
    return [...this._results];
  }

  /**
   * create instance.
   * @param {string[]} interfaces - selector interface names.
   * @param {AST} ast - AST of selector code.
   * @param {PathResolver} pathResolver - path resolver of selector code.
   */
  constructor(interfaces, ast, pathResolver) {
    /** @type {string} */
    this._interfaces = interfaces;

    /** @type {AST} */
    this._ast = ast;

    /** @type {PathResolver} */
    this._pathResolver = pathResolver;

    /** @type {DocObject[]} */
    this._results = [];

    // file doc
    const doc = new FileDoc(ast, ast, pathResolver, []);
    this._results.push(doc.value);
  }

  /**
   * push node, and factory process the node.
   * @param {ASTNode} node - target node.
   * @param {ASTNode} parentNode - parent node of target node.
   */
  push(node, parentNode) {
    if (node[already]) return;

    node[already] = true;
    (0, _defineProperty2.default)(node, 'parent', { value: parentNode });

    this._push(node);
  }

  /**
   * match node for conforming as selector to document
   */
  _match(node) {
    var expression;
    var name;
    var iface;
    var children = [];

    /* match node for possible signified types */
    switch (node.type) {
      case "ExpressionStatement":
        expression = node.expression;
        break;

      case "ObjectProperty":
        expression = node;
        break;

      case "VariableDeclaration":
        if (node.declarations.length > 0) {
          expression = node.declarations[0];
        }
        break;

      default:
        return null;
      // debug("skipping node type %s", node.type);
    }

    debug("node %s %O", node.type, node);

    if (!expression) return null;

    debug("expression %s %O", expression.type, expression);

    /* match left-hand side if exists */
    switch (expression.type) {
      case "AssignmentExpression":
        name = expression.left.name;

        children.push(expression); // to assign parent (so we don't lose it)
        expression = expression.right;
        break;

      case "VariableDeclarator":
        name = expression.id.name;

        children.push(expression); // to assign parent (so we don't lose it)
        expression = expression.init;
        break;

      case "ObjectProperty":
        name = expression.key.name;

        children.push(expression); // to assign parent (so we don't lose it)
        expression = expression.value;
        break;
    }

    debug("name %s", name);

    if (!expression) return null;

    /* match right hand side */
    switch (expression.type) {
      case "ArrowFunctionExpression":
        iface = "<arrow>";
        break;

      case "FunctionExpression":
        iface = "<function>";
        break;

      case "CallExpression":
        iface = expression.callee.name;
        break;

      case "ObjectExpression":
        iface = "<subtree>";
        break;

      default:
        return null;
    }

    debug("interface %s", iface);

    if (!this._interfaces.includes(iface)) return;

    // HACK assign state param to make expression work as function
    if (!expression.params) {
      expression.params = [{
        "type": "Identifier",
        "name": "state",
        "types": ["Object"]
      }];
    }

    children.push(expression);

    return {
      "expression": expression,
      "children": children,
      "name": name
    };
  }

  /**
   * push node as selector code.
   * @param {ASTNode} node - target node.
   * @private
   */
  _push(node) {
    const match = this._match(node);
    if (!match) return;

    const expression = match.expression;
    const name = match.name;
    const children = match.children;

    expression[already] = true;

    for (const child of children) {
      (0, _defineProperty2.default)(child, 'parent', { value: node });
    }

    let tags = [];
    if (node.leadingComments && node.leadingComments.length) {
      const comment = node.leadingComments[node.leadingComments.length - 1];
      tags = CommentParser.parse(comment);
    } else {
      return;
    }

    const uniqueId = this.constructor._getUniqueId();
    expression._esdocSelectorId = uniqueId;
    expression._esdocSelectorName = name;

    const selectorDoc = new Doc(this._ast, expression, this._pathResolver, tags);

    this._results.push(selectorDoc.value);
  }
}

module.exports = DocFactory;

/***/ }),
/* 13 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/core-js/reflect/define-property");

/***/ }),
/* 14 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/core-js/symbol");

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _deleteProperty = __webpack_require__(16);

var _deleteProperty2 = _interopRequireDefault(_deleteProperty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = __webpack_require__(0)("reselect-tree:esdoc-plugin:doc");
// hack: depends on esdoc internal class
const AbstractDoc = __webpack_require__(17).default;
const ParamParser = __webpack_require__(18).default;

/**
 * Doc Class from selector code file.
 */
class SelectorDoc extends AbstractDoc {
  /**
   * apply own tag.
   * @private
   */
  _apply() {
    super._apply();

    this._$selectorTarget();

    (0, _deleteProperty2.default)(this._value, 'export');
    (0, _deleteProperty2.default)(this._value, 'importPath');
    (0, _deleteProperty2.default)(this._value, 'importStyle');
  }

  /** use name property of self node. */
  _$kind() {
    super._$kind();

    this._value.kind = 'function';
  }

  /** set name and selectorId from special esdoc property. */
  _$name() {
    super._$name();

    const chain = [this._node._esdocSelectorName];
    let parent = this._node.parent;
    while (parent) {
      if (parent._esdocSelectorName) chain.push(parent._esdocSelectorName);
      parent = parent.parent;
    }
    debug("chain %o", chain);
    this._value.name = chain.reverse().join('.');
    this._value.selectorId = this._node._esdocSelectorId;
  }

  _$params() {
    super._$params();

    this._value.params = [{
      "name": "state",
      "types": ["Object"],
      "description": "initial state"
    }];
  }

  _$return() {
    this._value.return = {
      "types": ["Object"],
      "description": "new state"
    };
  }

  /** set memberof to use parent selector nod and file path. */
  _$memberof() {
    super._$memberof();

    const chain = [];
    let parent = this._node.parent;
    while (parent) {
      if (parent._esdocSelectorName) chain.push(parent._esdocSelectorName);
      parent = parent.parent;
    }

    const filePath = this._pathResolver.filePath;

    if (chain.length) {
      this._value.memberof = `${filePath}~${chain.reverse().join('.')}`;
      this._value.selectorDepth = chain.length;
    } else {
      this._value.memberof = filePath;
      this._value.selectorDepth = 0;
    }
  }

  // /** set describe by using selector node arguments. */
  // _$desc() {
  //   super._$desc();
  //   if (this._value.description) return;

  //   this._value.description = this._node.arguments[0].value;
  // }

  /** for @selectorTarget. */
  _$selectorTarget() {
    const values = this._findAllTagValues(['@selector', '@selectorTarget']);
    if (!values) return;

    this._value.selectorTarget = [];
    for (const value of values) {
      const { typeText } = ParamParser.parseParamValue(value, true, false, false);
      this._value.selectorTarget.push(typeText);
    }
  }

  _$selectorTarget() {
    // alias of selectorTarget
  }
}

module.exports = SelectorDoc;

/***/ }),
/* 16 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/core-js/reflect/delete-property");

/***/ }),
/* 17 */
/***/ (function(module, exports) {

module.exports = require("esdoc/out/src/Doc/AbstractDoc");

/***/ }),
/* 18 */
/***/ (function(module, exports) {

module.exports = require("esdoc/out/src/Parser/ParamParser");

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// hack: depends on esdoc internal class
const FileDoc = __webpack_require__(20).default;

/**
 * Doc class for selector code file.
 */
class SelectorFileDoc extends FileDoc {
  /** set ``testFile`` to kind. */
  _$kind() {
    this._value.kind = 'file';
  }
}

module.exports = SelectorFileDoc;

/***/ }),
/* 20 */
/***/ (function(module, exports) {

module.exports = require("esdoc/out/src/Doc/FileDoc");

/***/ }),
/* 21 */
/***/ (function(module, exports) {

module.exports = require("esdoc/out/src/Parser/CommentParser");

/***/ }),
/* 22 */
/***/ (function(module, exports) {

module.exports = require("esdoc/out/src/Parser/ESParser");

/***/ }),
/* 23 */
/***/ (function(module, exports) {

module.exports = require("esdoc/out/src/Util/InvalidCodeLogger");

/***/ }),
/* 24 */
/***/ (function(module, exports) {

module.exports = require("esdoc/out/src/Util/PathResolver");

/***/ }),
/* 25 */
/***/ (function(module, exports) {

module.exports = require("esdoc/out/src/Util/ASTUtil");

/***/ })
/******/ ]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,