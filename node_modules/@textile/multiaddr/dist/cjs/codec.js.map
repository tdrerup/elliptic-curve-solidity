{"version":3,"file":"codec.js","sourceRoot":"","sources":["../../src/codec.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-use-before-define */\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\n// eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n// @ts-ignore\nimport varint from 'varint'\nimport * as convert from './convert'\nimport { protocols } from './protocols'\n\n// string -> [[str name, str addr]... ]\nfunction stringToStringTuples(str: string) {\n  const tuples = []\n  const parts = str.split('/').slice(1) // skip first empty elem\n  if (parts.length === 1 && parts[0] === '') {\n    return []\n  }\n\n  for (let p = 0; p < parts.length; p++) {\n    const part = parts[p]\n    const proto = (protocols as any)(part)\n\n    if (proto.size === 0) {\n      tuples.push([part])\n      continue\n    }\n\n    p++ // advance addr part\n    if (p >= parts.length) {\n      throw ParseError('invalid address: ' + str)\n    }\n\n    // if it's a path proto, take the rest\n    if (proto.path) {\n      tuples.push([\n        part,\n        // TODO: should we need to check each path part to see if it's a proto?\n        // This would allow for other protocols to be added after a unix path,\n        // however it would have issues if the path had a protocol name in the path\n        cleanPath(parts.slice(p).join('/')),\n      ])\n      break\n    }\n\n    tuples.push([part, parts[p]])\n  }\n\n  return tuples\n}\n\n// [[str name, str addr]... ] -> string\nfunction stringTuplesToString(tuples: any[]) {\n  const parts: string[] = []\n  tuples.map((tup) => {\n    const proto = protoFromTuple(tup)\n    parts.push(proto.name)\n    if (tup.length > 1) {\n      parts.push(tup[1])\n    }\n  })\n\n  return cleanPath(parts.join('/'))\n}\n\n// [[str name, str addr]... ] -> [[int code, Uint8Array]... ]\nfunction stringTuplesToTuples(tuples: any[]) {\n  return tuples.map((tup) => {\n    if (!Array.isArray(tup)) {\n      tup = [tup]\n    }\n    const proto = protoFromTuple(tup)\n    if (tup.length > 1) {\n      return [proto.code, convert.toBytes(proto.code, tup[1])]\n    }\n    return [proto.code]\n  })\n}\n\n// [[int code, Uint8Array]... ] -> [[str name, str addr]... ]\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function tuplesToStringTuples(tuples: any): [number, string | number][] {\n  return tuples.map((tup: any) => {\n    const proto = protoFromTuple(tup)\n    if (tup.length > 1) {\n      return [proto.code, convert.toString(proto.code, tup[1])]\n    }\n    return [proto.code]\n  })\n}\n\n// [[int code, Uint8Array ]... ] -> Uint8Array\nfunction tuplesToBytes(tuples: any[]) {\n  return fromBytes(\n    new Uint8Array(\n      tuples.flatMap((tup) => {\n        const proto = protoFromTuple(tup)\n        let buf = Uint8Array.from(varint.encode(proto.code))\n        if (tup.length > 1) {\n          buf = new Uint8Array([...buf, ...tup[1]]) // add address bytes\n        }\n        return [...buf]\n      }),\n    ),\n  )\n}\n\nfunction sizeForAddr(p: any, addr: any) {\n  if (p.size > 0) {\n    return p.size / 8\n  } else if (p.size === 0) {\n    return 0\n  } else {\n    const size = varint.decode(addr)\n    return size + varint.decode.bytes\n  }\n}\n\n// Uint8Array -> [[int code, Uint8Array ]... ]\nexport function bytesToTuples(buf: Uint8Array): [number, Uint8Array][] {\n  const tuples: [number, Uint8Array][] = []\n  let i = 0\n  while (i < buf.length) {\n    const code = varint.decode(buf, i)\n    const n = varint.decode.bytes\n\n    const p = (protocols as any)(code)\n\n    const size = sizeForAddr(p, buf.slice(i + n))\n\n    if (size === 0) {\n      tuples.push([code] as any)\n      i += n\n      continue\n    }\n\n    const addr = buf.slice(i + n, i + n + size)\n\n    i += size + n\n\n    if (i > buf.length) {\n      // did not end _exactly_ at buf.length\n      throw ParseError('Invalid address Uint8Array')\n    }\n\n    // ok, tuple seems good.\n    tuples.push([code, addr])\n  }\n\n  return tuples\n}\n\n// Uint8Array -> String\nexport function bytesToString(buf: Uint8Array): string {\n  const a = bytesToTuples(buf)\n  const b = tuplesToStringTuples(a)\n  return stringTuplesToString(b)\n}\n\n// String -> Uint8Array\nfunction stringToBytes(str: string) {\n  str = cleanPath(str)\n  const a = stringToStringTuples(str)\n  const b = stringTuplesToTuples(a)\n\n  return tuplesToBytes(b)\n}\n\n// String -> Uint8Array\nexport function fromString(str: string): Uint8Array {\n  return stringToBytes(str)\n}\n\n// Uint8Array -> Uint8Array\nexport function fromBytes(buf: Uint8Array): Uint8Array {\n  const err = validateBytes(buf)\n  if (err) throw err\n  return Uint8Array.from(buf) // copy\n}\n\nfunction validateBytes(buf: Uint8Array) {\n  try {\n    bytesToTuples(buf) // try to parse. will throw if breaks\n  } catch (err) {\n    return err\n  }\n}\n\nfunction cleanPath(str: string) {\n  return (\n    '/' +\n    str\n      .trim()\n      .split('/')\n      .filter((a) => a)\n      .join('/')\n  )\n}\n\nfunction ParseError(str: string) {\n  return new Error('Error parsing address: ' + str)\n}\n\nfunction protoFromTuple(tup: (string | number)[]) {\n  const proto = (protocols as any)(tup[0])\n  return proto\n}\n"]}