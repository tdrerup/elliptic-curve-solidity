{"version":3,"file":"convert.js","sourceRoot":"","sources":["../../src/convert.ts"],"names":[],"mappings":";;;;;;AAAA,qEAAqE;AACrE,oDAA8C;AAC9C,4DAA4D;AAC5D,aAAa;AACb,oEAA2C;AAC3C,4DAA4D;AAC5D,aAAa;AACb,oDAA2B;AAC3B,2CAAuC;AAEvC,SAAS,YAAY,CAAC,GAAW;IAC/B,MAAM,GAAG,GAAG,qBAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,CAAA;IAC9C,MAAM,IAAI,GAAG,gBAAM,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAA;IACtC,OAAO,UAAU,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,EAAE,GAAG,GAAG,CAAC,CAAC,CAAA;AAC3C,CAAC;AAED,SAAS,YAAY,CAAC,GAAe;IACnC,MAAM,IAAI,GAAG,gBAAM,CAAC,MAAM,CAAC,GAAU,CAAC,CAAA;IACtC,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,gBAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;IAEpC,IAAI,GAAG,CAAC,MAAM,KAAK,IAAI,EAAE;QACvB,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAA;KACxC;IAED,OAAO,qBAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAA;AAC3C,CAAC;AAED,SAAgB,QAAQ,CAAC,GAAoB,EAAE,GAAe;IAC5D,MAAM,KAAK,GAAI,qBAAiB,CAAC,GAAG,CAAC,CAAA;IACrC,QAAQ,KAAK,CAAC,IAAI,EAAE;QAClB,KAAK,GAAG;YACN,OAAO,YAAY,CAAC,GAAG,CAAC,CAAA;QAC1B;YACE,OAAO,iBAAO,CAAC,QAAQ,CAAC,GAAG,EAAE,GAAG,CAAC,CAAA;KACpC;AACH,CAAC;AARD,4BAQC;AAED,SAAgB,OAAO,CAAC,GAAoB,EAAE,GAAW;IACvD,MAAM,KAAK,GAAI,qBAAiB,CAAC,GAAG,CAAC,CAAA;IACrC,QAAQ,KAAK,CAAC,IAAI,EAAE;QAClB,KAAK,GAAG;YACN,OAAO,YAAY,CAAC,GAAG,CAAC,CAAA;QAC1B;YACE,OAAO,iBAAO,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAA;KACnC;AACH,CAAC;AARD,0BAQC","sourcesContent":["/* eslint-disable @typescript-eslint/explicit-function-return-type */\nimport { ThreadID } from '@textile/threads-id'\n// eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n// @ts-ignore\nimport Convert from 'multiaddr/src/convert'\n// eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n// @ts-ignore\nimport varint from 'varint'\nimport { protocols } from './protocols'\n\nfunction thread2bytes(str: string) {\n  const buf = ThreadID.fromString(str).toBytes()\n  const size = varint.encode(buf.length)\n  return Uint8Array.from([...size, ...buf])\n}\n\nfunction bytes2thread(buf: Uint8Array) {\n  const size = varint.decode(buf as any)\n  buf = buf.slice(varint.decode.bytes)\n\n  if (buf.length !== size) {\n    throw new Error('inconsistent lengths')\n  }\n\n  return ThreadID.fromBytes(buf).toString()\n}\n\nexport function toString(prt: string | number, buf: Uint8Array): string {\n  const proto = (protocols as any)(prt)\n  switch (proto.code) {\n    case 406:\n      return bytes2thread(buf)\n    default:\n      return Convert.toString(prt, buf)\n  }\n}\n\nexport function toBytes(prt: string | number, str: string): Uint8Array {\n  const proto = (protocols as any)(prt)\n  switch (proto.code) {\n    case 406:\n      return thread2bytes(str)\n    default:\n      return Convert.toBytes(prt, str)\n  }\n}\n"]}