{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { grpc } from '@improbable-eng/grpc-web'\nimport { createAPISig, KeyInfo, UserAuth } from '@textile/security'\n\nexport const errors = {\n  /**\n   * expirationError is an error your app will receive anytime your credentials have expired.\n   * @public\n   */\n  expirationError: new Error(\n    'Auth expired. Consider calling withKeyInfo or withAPISig to refresh.',\n  ),\n}\n\n/**\n * The set of host strings used by any gPRC clients.\n */\nexport type HostString =\n  | 'https://webapi.hub.textile.io'\n  | 'http://127.0.0.1:3007'\n  | string\nexport const defaultHost: HostString = 'https://webapi.hub.textile.io'\n\n/**\n * Interface describing the set of default context keys.\n */\nexport interface ContextKeys {\n  /**\n   * Thread name. Specifies a mapping between human-readable name and a ThreadID.\n   */\n  ['x-textile-thread-name']?: string\n  /**\n   * ThreadID as a string. Should be generated with `ThreadID.toString()` method.\n   */\n  ['x-textile-thread']?: string\n  /**\n   * Session key. Used for various session contexts.\n   */\n  ['x-textile-session']?: string\n\n  /**\n   * Org slug/name. Used for various org session operations.\n   */\n  ['x-textile-org']?: string\n\n  /**\n   * API key. Used for user group/account authentication.\n   */\n  ['x-textile-api-key']?: string\n\n  /**\n   * Authorization token for interacting with remote APIs.\n   */\n  authorization?: string\n\n  /**\n   * API signature used to authenticate with remote APIs.\n   */\n  ['x-textile-api-sig']?: string\n\n  /**\n   * Raw message (date as ISO string) used to generate API signature.\n   */\n  ['x-textile-api-sig-msg']?: string\n\n  /**\n   * The service host address/url. Defaults to https://webapi.hub.textile.io.\n   */\n  host?: HostString\n\n  /**\n   * ContextKeys may also contain any number of additional custom keys.\n   */\n  [key: string]: any\n}\n\n/**\n * Interface describing the required methods for a full ContextInterface.\n * Users of ContextInterface may only require a subset of these methods, in which case, they should\n * specify their own interface, ensuring that ContextInterface is able to satisfy it.\n */\nexport interface ContextInterface {\n  /**\n   * The service host address/url. Defaults to https://webapi.hub.textile.io.\n   */\n  host: HostString\n  /**\n   * Set the session key. Used for various session contexts.\n   */\n  withSession(value?: string): ContextInterface\n  /**\n   * Set the thread ID as a string. Should be generated with `ThreadID.toString()` method.\n   */\n  withThread(value?: string): ContextInterface\n  /**\n   * Set the thread name. Specifies a mapping between human-readable name and a ThreadID.\n   */\n  withThreadName(value?: string): ContextInterface\n  /**\n   * Set the org slug/name. Used for various org session operations.\n   */\n  withOrg(value?: string): ContextInterface\n  /**\n   * Set the authorization token for interacting with remote APIs.\n   */\n  withToken(value?: string): ContextInterface\n  /**\n   * Set the API key. Used for user group/account authentication.\n   */\n  withAPIKey(value?: string): ContextInterface\n  /**\n   * Set the API signature used to authenticate with remote APIs.\n   */\n  withAPISig(value?: { sig: string; msg: string }): ContextInterface\n  /**\n   * Compute the API signature and message.\n   * @param key User group/account key information.\n   * @param date Optional future Date for computing the authorization signature.\n   */\n  withKeyInfo(key?: KeyInfo, date?: Date): Promise<ContextInterface>\n  /**\n   * Merge another context with this one.\n   */\n  withContext(value?: ContextInterface): ContextInterface\n  /**\n   * Export this context to a JS Object useful for exporting to JSON.\n   */\n  toJSON(): any\n  /**\n   * Export this context as gRPC Metadata.\n   */\n  toMetadata(ctx?: ContextInterface): Promise<grpc.Metadata>\n  /**\n   * Set arbitrary key/value context pairs.\n   * @param key The key to set.\n   * @param value The value to specify under `key`.\n   */\n  set(key: keyof ContextKeys, value?: any): ContextInterface\n  /**\n   * Get arbitrary key/value context pairs.\n   * @param key The key to get.\n   */\n  get(key: keyof ContextKeys): any\n}\n\n/**\n * Context provides context management for gRPC credentials and config settings.\n * It is the default implementation for the ContextInterface interface.\n */\nexport class Context implements ContextInterface {\n  // Internal context variables\n  public _context: Partial<Record<keyof ContextKeys, any>> = {}\n  public authCallback?: () => Promise<UserAuth>\n\n  /**\n   * Construct a new Context object.\n   * @param host The remote gRPC host. This input exists to comply with the Config interface.\n   */\n  constructor(host: HostString = defaultHost) {\n    this._context['host'] = host\n  }\n\n  static fromUserAuth(auth: UserAuth, host: HostString = defaultHost): Context {\n    const ctx = new Context(host)\n    const { key, token, ...sig } = auth\n    return ctx.withAPIKey(key).withAPISig(sig).withToken(token)\n  }\n\n  static fromUserAuthCallback(\n    authCallback: () => Promise<UserAuth>,\n    host: HostString = defaultHost,\n  ): Context {\n    const ctx = new Context(host)\n    // @todo: Should we now callback right away?\n    ctx.authCallback = authCallback\n    return ctx\n  }\n\n  get host(): string {\n    return this._context['host']\n  }\n\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  set(key: keyof ContextKeys, value?: any): this {\n    this._context[key] = value\n    return this\n  }\n\n  get(key: keyof ContextKeys): any {\n    return this._context[key]\n  }\n\n  withSession(value?: string): this {\n    if (value === undefined) return this\n    this._context['x-textile-session'] = value\n    return this\n  }\n\n  withThread(value?: string): this {\n    if (value === undefined) return this\n    this._context['x-textile-thread'] = value.toString()\n    return this\n  }\n\n  withThreadName(value?: string): this {\n    if (value === undefined) return this\n    this._context['x-textile-thread-name'] = value\n    return this\n  }\n\n  withOrg(value?: string): this {\n    if (value === undefined) return this\n    this._context['x-textile-org'] = value\n    return this\n  }\n\n  withToken(value?: string): this {\n    if (value === undefined) return this\n    this._context['authorization'] = `bearer ${value}`\n    return this\n  }\n\n  withAPIKey(value?: string): this {\n    if (value === undefined) return this\n    this._context['x-textile-api-key'] = value\n    return this\n  }\n\n  withAPISig(value?: { sig: string; msg: string }): this {\n    if (value === undefined) return this\n    const { sig, msg } = value\n    this._context['x-textile-api-sig-msg'] = msg\n    this._context['x-textile-api-sig'] = sig\n    return this\n  }\n\n  async withKeyInfo(key?: KeyInfo, date?: Date): Promise<this> {\n    if (key === undefined) return this\n    // Enables the use of insecure / non-signing keys\n    if (!key.secret) return this.withAPIKey(key.key)\n    const sig = await createAPISig(key.secret, date)\n    return this.withAPIKey(key.key).withAPISig(sig)\n  }\n\n  withContext(value?: ContextInterface): this {\n    if (value === undefined) return this\n    this._context = { ...this._context, ...value.toJSON() }\n    return this\n  }\n\n  /**\n   * Returns true if this Context contains an api sig msg, and that msg has expired, or if\n   * it does _not_ have an api sig msg, but it _does_ have an auth callback.\n   */\n  get isExpired(): boolean {\n    const msg = this.get('x-textile-api-sig-msg')\n    const notAuthed = msg === undefined && this.authCallback !== undefined\n    const isExpired = msg !== undefined && new Date(msg) <= new Date()\n    return isExpired || notAuthed\n  }\n\n  /**\n   * Refresh user auth with provided callback.\n   * If callback is not specified, attempts to use existing callback specified at initialization.\n   */\n  async refreshUserAuth(authCallback?: () => Promise<UserAuth>): Promise<this> {\n    // If we have a new one, use it...\n    if (authCallback !== undefined) {\n      this.authCallback = authCallback\n    }\n    // If we still don't have a callback, throw...\n    if (this.authCallback === undefined) {\n      throw new Error(\n        'Missing authCallback. See Context.fromUserAuthCallback for details.',\n      )\n    }\n    // Now do the renewal and return self...\n    const { key, token, ...sig } = await this.authCallback()\n    return this.withAPIKey(key).withAPISig(sig).withToken(token)\n  }\n\n  /**\n   * Convert Context to plain JSON object.\n   * @throws If this Context has expired.\n   * @see toMetadata for an alternative for gRPC clients that supports auto-renewal.\n   */\n  toJSON(): Record<string | number, any> {\n    const json = { ...this._context }\n    // If we're expired, throw...\n    if (this.isExpired) {\n      throw errors.expirationError\n    }\n    return json\n  }\n\n  /**\n   * Convert Context to grpc Metadata object.\n   * Will automatically call the auth callback if available.\n   * @param ctx Additional context object that will be merged with this prior to conversion.\n   * @see toJSON for an alternative that returns a plain object, and throws when expired.\n   */\n  async toMetadata(ctx?: Context): Promise<grpc.Metadata> {\n    const context = new Context()\n    if (this.isExpired && this.authCallback !== undefined) {\n      const { key, token, ...sig } = await this.authCallback()\n      // We do want to mutate this here because we want to update our auth sig\n      this.withAPIKey(key).withAPISig(sig).withToken(token)\n    }\n    // We merge this context and ctx with the empty context so as to avoid mutating this with ctx\n    return new grpc.Metadata(\n      context.withContext(this).withContext(ctx).toJSON(),\n    )\n  }\n\n  /**\n   * Import various ContextInterface API properties from JSON.\n   * @param json The JSON object.\n   * @param host Optional host string.\n   */\n  static fromJSON(json: ContextKeys, host: HostString = defaultHost): Context {\n    const newContext = { ...json }\n    newContext['host'] = host\n    const ctx = new Context()\n    ctx._context = newContext\n    return ctx\n  }\n}\n"]}