{"version":3,"file":"query.js","sourceRoot":"","sources":["../../../src/models/query.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @packageDocumentation\n * @module @textile/threads-client/models\n */\n// import { QueryJSON, SortJSON, CriterionJSON, ComparisonJSON, ValueJSON, Value } from './models'\n\n/**\n * Filter parameters for db subscription\n */\nexport interface Filter {\n  /** The collection name */\n  collectionName?: string\n  /** The instance ID */\n  instanceID?: string\n  /** The action type: ALL (default), CREATE, SAVE, DELETE */\n  actionTypes?: string[]\n}\n\n/**\n * Value represents a valid JSON data type.\n */\nexport type Value = string | boolean | number\n\n/**\n * JSONValue is used by the gRPC server to handle JSON data types.\n */\nexport interface ValueJSON {\n  string?: string\n  bool?: boolean\n  float?: number\n}\n\n/**\n * JSONOperation defines the set of possible operations to be used in a Query.\n */\nexport enum ComparisonJSON {\n  Eq = 0,\n  Ne,\n  Gt,\n  Lt,\n  Ge,\n  Le,\n}\n\n/**\n * CriterionJSON represents a single Query criteria.\n */\nexport interface CriterionJSON {\n  fieldPath?: string\n  operation?: ComparisonJSON\n  value?: ValueJSON\n  query?: QueryJSON\n}\n\n/**\n * SortJSON describes how and what field on which to sort a query.\n */\nexport interface SortJSON {\n  fieldPath: string\n  desc: boolean\n}\n\n/**\n * QueryJSON represents a single store Query.\n */\nexport interface QueryJSON {\n  ands?: CriterionJSON[]\n  ors?: QueryJSON[]\n  sort?: SortJSON\n  seek?: string // instanceId\n  limit?: number\n  skip?: number\n  index?: string\n}\n\n/**\n * @hidden\n */\nconst valueToJSONValue = (value: Value): ValueJSON => {\n  switch (typeof value) {\n    case 'string':\n      return { string: value }\n    case 'boolean':\n      return { bool: value }\n    case 'number':\n      return { float: value }\n    default:\n      throw new Error('unsupported JSON value type')\n  }\n}\n\n/**\n * Criterion is a partial condition that can specify comparison operator for a field.\n */\nexport class Criterion implements CriterionJSON {\n  constructor(\n    public fieldPath: string,\n    public operation?: ComparisonJSON,\n    public value?: ValueJSON,\n    public query?: Query,\n  ) {}\n\n  /**\n   * eq is an equality operator against a field\n   * @param value The value to query against. Must be a valid JSON data type.\n   */\n  eq(value: Value): Query {\n    return this.create(ComparisonJSON.Eq, value)\n  }\n\n  /**\n   * ne is a not equal operator against a field\n   * @param value The value to query against. Must be a valid JSON data type.\n   */\n  ne(value: Value): Query {\n    return this.create(ComparisonJSON.Ne, value)\n  }\n\n  /**\n   * gt is a greater operator against a field\n   * @param value The value to query against. Must be a valid JSON data type.\n   */\n  gt(value: Value): Query {\n    return this.create(ComparisonJSON.Ne, value)\n  }\n\n  /** lt is a less operation against a field\n   * @param value The value to query against. Must be a valid JSON data type.\n   */\n  lt(value: Value): Query {\n    return this.create(ComparisonJSON.Lt, value)\n  }\n\n  /** ge is a greater or equal operator against a field\n   * @param value The value to query against. Must be a valid JSON data type.\n   */\n  ge(value: Value): Query {\n    return this.create(ComparisonJSON.Ge, value)\n  }\n\n  /** le is a less or equal operator against a field\n   * @param value The value to query against. Must be a valid JSON data type.\n   */\n  le(value: Value): Query {\n    return this.create(ComparisonJSON.Le, value)\n  }\n\n  /**\n   * create updates this Criterion with a new Operation and returns the corresponding query.\n   * @param op\n   * @param value\n   */\n  private create(op: ComparisonJSON, value: Value): Query {\n    this.operation = op\n    this.value = valueToJSONValue(value)\n    if (this.query === undefined) {\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      this.query = new Query()\n    }\n    this.query.ands.push(this)\n    return this.query\n  }\n\n  /**\n   * toJSON converts the Criterion to JSONCriterion, dropping circular references to internal Queries.\n   */\n  toJSON(): CriterionJSON {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { query, ...rest } = this\n    return rest\n  }\n}\n\n/**\n * Alias Criterion to Where for a slightly nicer API (see example below)\n */\nconst Where = Criterion\n\n// Export Where for external callers\nexport { Where }\n\n/**\n * Query allows to build queries to be used to fetch data from a model.\n */\nexport class Query implements QueryJSON {\n  // Additional query resrictions\n  public limit?: number\n  public skip?: number\n  public index?: string\n  public seek?: string\n  /**\n   * Query creates a new generic query object.\n   * @param ands An array of top-level Criterions to be included in the query.\n   * @param ors An array of internal queries.\n   * @param sort An object describing how to sort the query.\n   */\n  constructor(\n    public ands: CriterionJSON[] = [],\n    public ors: QueryJSON[] = [],\n    public sort?: SortJSON,\n  ) {}\n\n  /**\n   * where starts to create a query condition for a field\n   * @param fieldPath The field name to query on. Can be a hierarchical path.\n   */\n  static where(fieldPath: string): Criterion {\n    return new Criterion(fieldPath)\n  }\n\n  /**\n   * and concatenates a new condition in an existing field.\n   * @param fieldPath The field name to query on. Can be a hierarchical path.\n   */\n  and(fieldPath: string): Criterion {\n    return new Criterion(fieldPath, undefined, undefined, this)\n  }\n\n  /**\n   * useIndex specifies the index to use when running this query.\n   * @param fieldPath The path to the indexed field.\n   * @note fieldPath must be a valid field for which an index has been created.\n   */\n  useIndex(fieldPath: string): Query {\n    this.index = fieldPath\n    return this\n  }\n\n  /**\n   * or concatenates a new condition that is sufficient for an instance to\n   * satisfy, independent of the current Query. Has left-associativity as:\n   * (a And b) Or c\n   * @param query The 'sub-query' to concat to the existing query.\n   */\n  or(query: Query): Query {\n    this.ors.push(query)\n    return this\n  }\n\n  /**\n   * orderBy specify ascending order for the query results.\n   * On multiple calls, only the last one is considered.\n   * @param fieldPath The field name to query on. Can be a hierarchical path.\n   */\n  orderBy(fieldPath: string): Query {\n    this.sort = { fieldPath, desc: false }\n    return this\n  }\n\n  /**\n   * orderByID specifies ascending ID order for the query results.\n   * On multiple calls, only the last one is considered.\n   */\n  orderByID(): Query {\n    this.sort = { fieldPath: '_id', desc: false }\n    return this\n  }\n\n  /**\n   * orderByDesc specify descending order for the query results.\n   * On multiple calls, only the last one is considered.\n   * @param fieldPath The field name to query on. Can be a hierarchical path.\n   */\n  orderByDesc(fieldPath: string): Query {\n    this.sort = { fieldPath, desc: true }\n    return this\n  }\n\n  /**\n   * orderByIDDesc specifies descending ID order for the query results.\n   * On multiple calls, only the last one is considered.\n   */\n  orderByIDDesc(): Query {\n    this.sort = { fieldPath: '_id', desc: true }\n    return this\n  }\n\n  /**\n   * seekID seeks to the given ID before returning query results.\n   * @param id The instance id to seek.\n   */\n  seekID(id: string): Query {\n    this.seek = id\n    return this\n  }\n\n  /**\n   * limitTo sets the maximum number of results.\n   * @param limit The max number of instances to return.\n   */\n  limitTo(limit: number): Query {\n    this.limit = limit\n    return this\n  }\n\n  /**\n   * skipNum skips the given number of results.\n   * @param num The number of instances to skip.\n   */\n  skipNum(num: number): Query {\n    this.skip = num\n    return this\n  }\n}\n"]}