{"version":3,"file":"WriteTransaction.js","sourceRoot":"","sources":["../../../src/models/WriteTransaction.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @packageDocumentation\n * @module @textile/threads-client/models\n */\nimport { grpc } from '@improbable-eng/grpc-web'\nimport { ContextInterface } from '@textile/context'\nimport {\n  CreateRequest,\n  DeleteRequest,\n  DiscardRequest,\n  FindByIDRequest,\n  FindRequest,\n  HasRequest,\n  SaveRequest,\n  StartTransactionRequest,\n  VerifyRequest,\n  WriteTransactionReply,\n  WriteTransactionRequest,\n} from '@textile/threads-client-grpc/threads_pb'\nimport { ThreadID } from '@textile/threads-id'\nimport { QueryJSON } from './query'\nimport { Transaction } from './Transaction'\n\nconst decoder = new TextDecoder()\nconst encoder = new TextEncoder()\n\n/**\n * WriteTransaction performs a mutating bulk transaction on the underlying store.\n * {@inheritDoc @textile/threads-client#Transaction}\n * @example\n * Create a new entry in our collection\n * ```typescript\n * import {Client, ThreadID} from '@textile/threads'\n *\n * interface Astronaut {\n *   name: string\n *   missions: number\n *   _id: string\n * }\n *\n * async function createBuzz (client: Client, threadID: ThreadID) {\n *   const buzz: Astronaut = {\n *     name: 'Buzz',\n *     missions: 2,\n *     _id: '',\n *   }\n *\n *   const t = client.writeTransaction(threadID, 'astronauts')\n *   await t.start()\n *   await t.create([buzz])\n *   await t.end() // Commit\n * }\n * ```\n *\n * @example\n * Abort an in-flight transaction\n * ```typescript\n * import {Client, ThreadID} from '@textile/threads'\n *\n * interface Astronaut {\n *   name: string\n *   missions: number\n *   _id: string\n * }\n *\n * async function createBuzz (client: Client, threadID: ThreadID) {\n *   const buzz: Astronaut = {\n *     name: 'Buzz',\n *     missions: 2,\n *     _id: '',\n *   }\n *\n *   const t = client.writeTransaction(threadID, 'astronauts')\n *   await t.start()\n *   await t.create([buzz])\n *   await t.discard() // Abort\n *   await t.end()\n * }\n * ```\n */\nexport class WriteTransaction extends Transaction<\n  WriteTransactionRequest,\n  WriteTransactionReply\n> {\n  constructor(\n    protected readonly context: ContextInterface,\n    protected readonly client: grpc.Client<\n      WriteTransactionRequest,\n      WriteTransactionReply\n    >,\n    protected readonly threadID: ThreadID,\n    protected readonly modelName: string,\n  ) {\n    super(client, threadID, modelName)\n  }\n  /**\n   * start begins the transaction. All operations between start and end will be applied as a single transaction upon a call to end.\n   */\n  public async start(): Promise<void> {\n    const startReq = new StartTransactionRequest()\n    startReq.setDbid(this.threadID.toBytes())\n    startReq.setCollectionname(this.modelName)\n    const req = new WriteTransactionRequest()\n    req.setStarttransactionrequest(startReq)\n    const metadata = JSON.parse(JSON.stringify(this.context))\n    this.client.start(metadata)\n    this.client.send(req)\n  }\n  /**\n   * create creates a new model instance in the given store.\n   * @param values An array of model instances as JSON/JS objects.\n   */\n  public async create<T = unknown>(values: T[]): Promise<string[]> {\n    return new Promise<Array<string>>((resolve, reject) => {\n      const createReq = new CreateRequest()\n      const list: Uint8Array[] = []\n      values.forEach((v) => {\n        list.push(encoder.encode(JSON.stringify(v)))\n      })\n      createReq.setInstancesList(list)\n      const req = new WriteTransactionRequest()\n      req.setCreaterequest(createReq)\n      this.client.onMessage((message: WriteTransactionReply) => {\n        const reply = message.getCreatereply()\n        const err = reply?.getTransactionerror()\n        if (err) {\n          reject(new Error(err))\n        }\n        if (reply === undefined) {\n          resolve([])\n        } else {\n          resolve(reply.toObject().instanceidsList)\n        }\n      })\n      super.setReject(reject)\n      this.client.send(req)\n    })\n  }\n\n  /**\n   * verify verifies existing instance changes.\n   * @param values An array of instances as JSON/JS objects.\n   */\n  public async verify<T = unknown>(values: T[]): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      const innerRequest = new VerifyRequest()\n      const list = values.map((v) => encoder.encode(JSON.stringify(v)))\n      innerRequest.setInstancesList(list)\n      const req = new WriteTransactionRequest()\n      req.setVerifyrequest(innerRequest)\n      this.client.onMessage((message: WriteTransactionReply) => {\n        const reply = message.getVerifyreply()\n        const err = reply?.getTransactionerror()\n        if (err) {\n          reject(new Error(err))\n        }\n        resolve()\n      })\n      super.setReject(reject)\n      this.client.send(req)\n    })\n  }\n\n  /**\n   * save saves changes to an existing model instance in the given store.\n   * @param values An array of model instances as JSON/JS objects. Each model instance must have a valid existing `ID` property.\n   */\n  public async save<T = unknown>(values: T[]): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      const saveReq = new SaveRequest()\n      const list: Uint8Array[] = []\n      values.forEach((v) => {\n        if (!('_id' in v)) {\n          ;(v as any)._id = '' // The server will add an _id if empty.\n        }\n        list.push(encoder.encode(JSON.stringify(v)))\n      })\n      saveReq.setInstancesList(list)\n      const req = new WriteTransactionRequest()\n      req.setSaverequest(saveReq)\n      this.client.onMessage((message: WriteTransactionReply) => {\n        const reply = message.getSavereply()\n        const err = reply?.getTransactionerror()\n        if (err) {\n          reject(new Error(err))\n        }\n        resolve()\n      })\n      super.setReject(reject)\n      this.client.send(req)\n    })\n  }\n\n  /**\n   * delete deletes an existing model instance from the given store.\n   * @param IDs An array of instance ids to delete.\n   */\n  public async delete(IDs: string[]): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      const deleteReq = new DeleteRequest()\n      deleteReq.setInstanceidsList(IDs)\n      const req = new WriteTransactionRequest()\n      req.setDeleterequest(deleteReq)\n      this.client.onMessage((message: WriteTransactionReply) => {\n        const reply = message.getDeletereply()\n        const err = reply?.getTransactionerror()\n        if (err) {\n          reject(new Error(err))\n        }\n        resolve()\n      })\n      super.setReject(reject)\n      this.client.send(req)\n    })\n  }\n  /**\n   * has checks whether a given instance exists in the given store.\n   * @param IDs An array of instance ids to check for.\n   */\n  public async has(IDs: string[]): Promise<boolean> {\n    return new Promise<boolean>((resolve, reject) => {\n      const hasReq = new HasRequest()\n      hasReq.setInstanceidsList(IDs)\n      const req = new WriteTransactionRequest()\n      req.setHasrequest(hasReq)\n      this.client.onMessage((message: WriteTransactionReply) => {\n        const reply = message.getHasreply()\n        const err = reply?.getTransactionerror()\n        if (err) {\n          reject(new Error(err))\n        }\n        resolve(reply ? reply.getExists() : false)\n      })\n      super.setReject(reject)\n      this.client.send(req)\n    })\n  }\n  /**\n   * find queries the store for entities matching the given query parameters. See Query for options.\n   * @param query The object that describes the query. See Query for options. Alternatively, see QueryJSON for the basic interface.\n   */\n  public async find<T = unknown>(query: QueryJSON): Promise<Array<T>> {\n    return new Promise<Array<T>>((resolve, reject) => {\n      const findReq = new FindRequest()\n      findReq.setQueryjson(encoder.encode(JSON.stringify(query)))\n      const req = new WriteTransactionRequest()\n      req.setFindrequest(findReq)\n      this.client.onMessage((message: WriteTransactionReply) => {\n        const reply = message.getFindreply()\n        const err = reply?.getTransactionerror()\n        if (err) {\n          reject(new Error(err))\n        }\n        if (reply === undefined) {\n          resolve([])\n        } else {\n          const ret: Array<T> = reply\n            .getInstancesList_asU8()\n            .map((instance) => JSON.parse(decoder.decode(instance)))\n          resolve(ret)\n        }\n      })\n      this.setReject(reject)\n      this.client.send(req)\n    })\n  }\n\n  /**\n   * findByID queries the store for the id of an instance.\n   * @param ID The id of the instance to search for.\n   */\n  public async findByID<T = unknown>(ID: string): Promise<T | undefined> {\n    return new Promise<T | undefined>((resolve, reject) => {\n      const findReq = new FindByIDRequest()\n      findReq.setInstanceid(ID)\n      const req = new WriteTransactionRequest()\n      req.setFindbyidrequest(findReq)\n      this.client.onMessage((message: WriteTransactionReply) => {\n        const reply = message.getFindbyidreply()\n        const err = reply?.getTransactionerror()\n        if (err) {\n          reject(new Error(err))\n        }\n        if (reply === undefined) {\n          resolve(undefined)\n        } else {\n          resolve(JSON.parse(decoder.decode(reply.getInstance_asU8())))\n        }\n      })\n      this.setReject(reject)\n      this.client.send(req)\n    })\n  }\n\n  /**\n   * Discard drops all active transaction changes.\n   * It also invalidates the transaction, so it will fail upon calling end.\n   * @example\n   * Abort an in-flight transaction\n   * ```typescript\n   * import {Client, ThreadID} from '@textile/threads'\n   *\n   * interface Astronaut {\n   *   name: string\n   *   missions: number\n   *   _id: string\n   * }\n   *\n   * async function example (client: Client, threadID: ThreadID) {\n   *   const buzz: Astronaut = {\n   *     name: 'Buzz',\n   *     missions: 2,\n   *     _id: '',\n   *   }\n   *\n   *   const t = client.writeTransaction(threadID, 'astronauts')\n   *   await t.start()\n   *   await t.create([buzz])\n   *   await t.discard() // Abort\n   *   await t.end()\n   * }\n   * ```\n   */\n  public async discard(): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      const req = new WriteTransactionRequest()\n      req.setDiscardrequest(new DiscardRequest())\n      this.client.onMessage((message: WriteTransactionReply) => {\n        const reply = message.getDiscardreply()\n        if (reply) {\n          resolve()\n        } else {\n          reject(new Error('unexpected response type'))\n        }\n      })\n      super.setReject(reject)\n      this.client.send(req)\n    })\n  }\n}\n"]}