{"version":3,"file":"ReadTransaction.js","sourceRoot":"","sources":["../../../src/models/ReadTransaction.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @packageDocumentation\n * @module @textile/threads-client/models\n */\nimport { grpc } from '@improbable-eng/grpc-web'\nimport { ContextInterface } from '@textile/context'\nimport {\n  FindByIDRequest,\n  FindRequest,\n  HasRequest,\n  ReadTransactionReply,\n  ReadTransactionRequest,\n  StartTransactionRequest,\n} from '@textile/threads-client-grpc/threads_pb'\nimport { ThreadID } from '@textile/threads-id'\nimport { QueryJSON } from './query'\nimport { Transaction } from './Transaction'\n\nconst decoder = new TextDecoder()\nconst encoder = new TextEncoder()\n\n/**\n * ReadTransaction performs a read-only bulk transaction on the underlying store.\n * {@inheritDoc @textile/threads-client#Transaction}\n * @example\n * Create a new entry and check for it within a transaction\n * ```typescript\n * import {Client, ThreadID} from '@textile/threads'\n *\n * interface Astronaut {\n *   name: string\n *   missions: number\n *   _id: string\n * }\n *\n * async function createAndCheck (client: Client, threadID: ThreadID) {\n *   const buzz: Astronaut = {\n *     name: 'Buzz',\n *     missions: 2,\n *     _id: '',\n *   }\n *\n *   const ids = await client.create(threadID, 'astronauts', [buzz])\n *   // Create and start transaction\n *   const t = client.readTransaction(threadID, 'astronauts')\n *   await t.start()\n *   const has = await t.has(ids)\n *   console.log(has) // true\n *   await t.end() // Finish\n * }\n * ```\n */\nexport class ReadTransaction extends Transaction<\n  ReadTransactionRequest,\n  ReadTransactionReply\n> {\n  constructor(\n    protected readonly context: ContextInterface,\n    protected readonly client: grpc.Client<\n      ReadTransactionRequest,\n      ReadTransactionReply\n    >,\n    protected readonly threadID: ThreadID,\n    protected readonly modelName: string,\n  ) {\n    super(client, threadID, modelName)\n  }\n  /**\n   * start begins the transaction. All operations between start and end will be applied as a single transaction upon a call to end.\n   */\n  public async start(): Promise<void> {\n    const startReq = new StartTransactionRequest()\n    startReq.setDbid(this.threadID.toBytes())\n    startReq.setCollectionname(this.modelName)\n    const req = new ReadTransactionRequest()\n    req.setStarttransactionrequest(startReq)\n    const metadata = JSON.parse(JSON.stringify(this.context))\n    this.client.start(metadata)\n    this.client.send(req)\n  }\n\n  /**\n   * has checks whether a given instance exists in the given store.\n   * @param IDs An array of instance ids to check for.\n   */\n  public async has(IDs: string[]): Promise<boolean> {\n    return new Promise<boolean>((resolve, reject) => {\n      const hasReq = new HasRequest()\n      hasReq.setInstanceidsList(IDs)\n      const req = new ReadTransactionRequest()\n      req.setHasrequest(hasReq)\n      this.client.onMessage((message: ReadTransactionReply) => {\n        const reply = message.getHasreply()\n        const err = reply?.getTransactionerror()\n        if (err) {\n          reject(new Error(err))\n        }\n        resolve(reply ? reply.getExists() : false)\n      })\n      this.setReject(reject)\n      this.client.send(req)\n    })\n  }\n\n  /**\n   * find queries the store for entities matching the given query parameters. See Query for options.\n   * @param query The object that describes the query. See Query for options. Alternatively, see QueryJSON for the basic interface.\n   */\n  public async find<T = unknown>(query: QueryJSON): Promise<Array<T>> {\n    return new Promise<Array<T>>((resolve, reject) => {\n      const findReq = new FindRequest()\n      findReq.setQueryjson(encoder.encode(JSON.stringify(query)))\n      const req = new ReadTransactionRequest()\n      req.setFindrequest(findReq)\n      this.client.onMessage((message: ReadTransactionReply) => {\n        const reply = message.getFindreply()\n        const err = reply?.getTransactionerror()\n        if (err) {\n          reject(new Error(err))\n        }\n        if (reply === undefined) {\n          resolve([])\n        } else {\n          const ret: Array<T> = reply\n            .getInstancesList_asU8()\n            .map((instance) => JSON.parse(decoder.decode(instance)))\n          resolve(ret)\n        }\n      })\n      this.setReject(reject)\n      this.client.send(req)\n    })\n  }\n\n  /**\n   * findByID queries the store for the id of an instance.\n   * @param ID The id of the instance to search for.\n   */\n  public async findByID<T = unknown>(ID: string): Promise<T | undefined> {\n    return new Promise<T | undefined>((resolve, reject) => {\n      const findReq = new FindByIDRequest()\n      findReq.setInstanceid(ID)\n      const req = new ReadTransactionRequest()\n      req.setFindbyidrequest(findReq)\n      this.client.onMessage((message: ReadTransactionReply) => {\n        const reply = message.getFindbyidreply()\n        const err = reply?.getTransactionerror()\n        if (err) {\n          reject(new Error(err))\n        }\n        if (reply === undefined) {\n          resolve(undefined)\n        } else {\n          resolve(JSON.parse(decoder.decode(reply.getInstance_asU8())))\n        }\n      })\n      this.setReject(reject)\n      this.client.send(req)\n    })\n  }\n}\n"]}