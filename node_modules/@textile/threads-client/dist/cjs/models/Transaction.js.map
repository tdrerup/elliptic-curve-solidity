{"version":3,"file":"Transaction.js","sourceRoot":"","sources":["../../../src/models/Transaction.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA;;;GAGG;AACH,uDAA+C;AAG/C;;;GAGG;AACH,MAAa,WAAW;IAItB;;;;;OAKG;IACH,YACqB,MAAwC,EACxC,QAAkB,EAClB,SAAiB;QAFjB,WAAM,GAAN,MAAM,CAAkC;QACxC,aAAQ,GAAR,QAAQ,CAAU;QAClB,cAAS,GAAT,SAAS,CAAQ;IACnC,CAAC;IAEJ;;OAEG;IACU,GAAG;;YACd,OAAO,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBAC3C,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,MAAiB,EAAE,OAAe,EAAE,EAAE;oBACvD,IAAI,MAAM,KAAK,eAAI,CAAC,IAAI,CAAC,EAAE,EAAE;wBAC3B,MAAM,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAA;qBAC3B;yBAAM;wBACL,OAAO,EAAE,CAAA;qBACV;gBACH,CAAC,CAAC,CAAA;gBACF,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAA;YAC1B,CAAC,CAAC,CAAA;QACJ,CAAC;KAAA;IAED;;;OAGG;IACO,SAAS,CAAC,MAA8B;QAChD,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,MAAiB,EAAE,OAAe,EAAE,EAAE;YACvD,IAAI,MAAM,KAAK,eAAI,CAAC,IAAI,CAAC,EAAE,EAAE;gBAC3B,MAAM,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAA;aAC3B;QACH,CAAC,CAAC,CAAA;IACJ,CAAC;CACF;AA3CD,kCA2CC","sourcesContent":["/**\n * @packageDocumentation\n * @module @textile/threads-client\n */\nimport { grpc } from '@improbable-eng/grpc-web'\nimport { ThreadID } from '@textile/threads-id'\n\n/**\n * Transaction represents a bulk transaction on a store.\n * @hidden\n */\nexport class Transaction<\n  TRequest extends grpc.ProtobufMessage,\n  TResponse extends grpc.ProtobufMessage\n> {\n  /**\n   * Transaction creates a new transaction for the given store using the given model.\n   * @param client The gRPC client to use for the transaction.\n   * @param threadID the ID of the database\n   * @param modelName The human-readable name for the model.\n   */\n  constructor(\n    protected readonly client: grpc.Client<TRequest, TResponse>,\n    protected readonly threadID: ThreadID,\n    protected readonly modelName: string,\n  ) {}\n\n  /**\n   * end completes (flushes) the transaction. All operations between start and end will be applied as a single transaction upon a call to end.\n   */\n  public async end(): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      this.client.onEnd((status: grpc.Code, message: string) => {\n        if (status !== grpc.Code.OK) {\n          reject(new Error(message))\n        } else {\n          resolve()\n        }\n      })\n      this.client.finishSend()\n    })\n  }\n\n  /**\n   * setReject rejects the current transaction, rather than flushing the results to the remote store via end.\n   * @param reject A function which accepts a reason for rejecting the transaction.\n   */\n  protected setReject(reject: (reason?: any) => void): void {\n    this.client.onEnd((status: grpc.Code, message: string) => {\n      if (status !== grpc.Code.OK) {\n        reject(new Error(message))\n      }\n    })\n  }\n}\n"]}