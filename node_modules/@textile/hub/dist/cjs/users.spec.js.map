{"version":3,"file":"users.spec.js","sourceRoot":"","sources":["../../src/users.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { Buckets } from '@textile/buckets'\nimport { Context } from '@textile/context'\nimport { PrivateKey } from '@textile/crypto'\nimport { SignupResponse } from '@textile/hub-grpc/api/hubd/pb/hubd_pb'\nimport { Client } from '@textile/hub-threads-client'\nimport { ThreadID } from '@textile/threads-id'\nimport { Users } from '@textile/users'\nimport { isBrowser } from 'browser-or-node'\nimport { expect } from 'chai'\nimport fs from 'fs'\nimport path from 'path'\nimport { addrApiurl, addrGatewayUrl, createKey, sessionSecret, signUp } from '@textile/testing'\n\ndescribe('All apis...', () => {\n  describe('Buckets and accounts', () => {\n    context('a developer', () => {\n      const ctx = new Context(addrApiurl)\n      let dev: SignupResponse.AsObject\n      it('should sign-up, create an API key, and sign it for the requests', async () => {\n        // @note This should be done using the cli\n        const { user } = await signUp(ctx, addrGatewayUrl, sessionSecret)\n        if (user) dev = user\n        // @note This should be done using the cli\n        ctx.withSession(dev.session)\n        const { keyInfo } = await createKey(ctx, 'KEY_TYPE_ACCOUNT')\n        await ctx.withAPIKey(keyInfo?.key).withKeyInfo(keyInfo)\n        expect(ctx.toJSON()).to.have.ownProperty('x-textile-api-sig')\n      }).timeout(3000)\n      it('should then create a db for the bucket', async () => {\n        const db = new Client(ctx)\n        const id = ThreadID.fromRandom()\n        await db.newDB(id, 'my-buckets')\n        expect(ctx.toJSON()).to.have.ownProperty('x-textile-thread-name')\n      })\n      it('should create a new bucket in the db and push to it', async function () {\n        if (isBrowser) return this.skip()\n        // Create a new bucket in the db\n        const buckets = new Buckets(ctx)\n        const buck = await buckets.create('mybuck')\n        expect(buck.root?.name).to.equal('mybuck')\n\n        // Finally, push a file to the bucket.\n        const pth = path.join(__dirname, '../../..', 'testdata')\n        const stream = fs.createReadStream(path.join(pth, 'file1.jpg'))\n        const rootKey = buck.root?.key || ''\n        const { root } = await buckets.pushPath(\n          rootKey,\n          'dir1/file1.jpg',\n          stream,\n        )\n        expect(root).to.not.be.undefined\n\n        // We should have a thread named \"my-buckets\"\n        const db = new Client(ctx)\n        const res = await db.getThread('my-buckets')\n        expect(res.id).to.deep.equal(ctx.toJSON()['x-textile-thread'])\n      })\n    })\n    context('a developer with a user', function () {\n      this.timeout(5000)\n      const ctx = new Context(addrApiurl)\n      const identity = PrivateKey.fromRandom()\n      let dev: SignupResponse.AsObject\n      let db: Client\n      let users: Users\n      it('should sign-up, create an API key, and a new user', async function () {\n        // @note This should be done using the cli\n        const { user } = await signUp(ctx, addrGatewayUrl, sessionSecret)\n        if (user) dev = user\n        // @note This should be done using the cli\n        // This time they create a user key\n        const { keyInfo } = await createKey(\n          ctx.withSession(dev.session),\n          'KEY_TYPE_USER',\n        )\n\n        // We also explicitly specify a custom context here, which could be omitted as it uses reasonable defaults\n        const userContext = await new Context(addrApiurl).withKeyInfo(keyInfo)\n        // In the app, we simply create a new user from the provided user key, signing is done automatically\n        db = new Client(userContext)\n        const token = await db.getToken(identity)\n        users = new Users(userContext)\n        users.setToken(token)\n        expect(db.context.toJSON()).to.have.ownProperty('x-textile-api-sig')\n      }).timeout(3000)\n\n      it('should then create a db for the bucket', async function () {\n        await db.newDB(ThreadID.fromRandom(), 'my-buckets')\n        expect(db.context.toJSON()).to.have.ownProperty('x-textile-thread-name')\n      })\n\n      it('should create a new bucket in the db and push to it', async function () {\n        if (isBrowser) return this.skip()\n        // Create a new bucket in the db from the user context\n        const buckets = new Buckets(db.context)\n        const buck = await buckets.create('mybuck')\n        expect(buck.root?.name).to.equal('mybuck')\n\n        // Finally, push a file to the bucket.\n        const pth = path.join(__dirname, '../../..', 'testdata')\n        const stream = fs.createReadStream(path.join(pth, 'file1.jpg'))\n        const rootKey = buck.root?.key || ''\n        const { root } = await buckets.pushPath(\n          rootKey,\n          'dir1/file1.jpg',\n          stream,\n        )\n        expect(root).to.not.be.undefined\n\n        // Ensure context is set properly\n        expect(db.context.toJSON()).to.have.ownProperty('x-textile-thread-name')\n        expect(db.context.get('x-textile-thread-name')).to.equal('my-buckets')\n\n        // We should have a thread named \"my-buckets\"\n        const res = await db.getThread('my-buckets')\n        expect(res.id).to.deep.equal(db.context.toJSON()['x-textile-thread'])\n\n        // The dev should see that the key was used to create one thread\n        // @todo: Use the cli to list keys\n      })\n\n      it('should check the users own usage', async function () {\n        if (isBrowser) return this.skip()\n\n        const usage = await users.getUsage()\n        const daily = usage.customer?.dailyUsageMap || []\n        for (const use of daily) {\n          switch (use[0]) {\n            case 'instance_reads': {\n              expect(use[1].total).to.equal(4)\n              break\n            }\n            case 'instance_writes': {\n              expect(use[1].total).to.equal(2)\n              break\n            }\n            case 'network_egress': {\n              expect(use[1].total).to.be.closeTo(3887, 1000)\n              break\n            }\n            case 'stored_data': {\n              expect(use[1].total).to.equal(601902)\n              break\n            }\n          }\n        }\n      })\n      it('should check the users usage as the developer', async function () {\n        if (isBrowser) return this.skip()\n        const { keyInfo } = await createKey(ctx, 'KEY_TYPE_ACCOUNT')\n        await ctx.withAPIKey(keyInfo?.key).withKeyInfo(keyInfo)\n        const devUser = new Users(ctx)\n\n        const usage = await devUser.getUsage({\n          dependentUserKey: identity.public.toString(),\n        })\n        const daily = usage.customer?.dailyUsageMap || []\n        for (const use of daily) {\n          switch (use[0]) {\n            case 'instance_reads': {\n              expect(use[1].total).to.equal(4)\n              break\n            }\n            case 'instance_writes': {\n              expect(use[1].total).to.equal(2)\n              break\n            }\n            case 'network_egress': {\n              expect(use[1].total).to.be.closeTo(3887, 1000)\n              break\n            }\n            case 'stored_data': {\n              expect(use[1].total).to.equal(601902)\n              break\n            }\n          }\n        }\n      })\n      it('should check the developers usage', async function () {\n        if (isBrowser) return this.skip()\n        const { keyInfo } = await createKey(ctx, 'KEY_TYPE_ACCOUNT')\n        await ctx.withAPIKey(keyInfo?.key).withKeyInfo(keyInfo)\n        const devUser = new Users(ctx)\n\n        const usage = await devUser.getUsage()\n        const daily = usage.customer?.dailyUsageMap || []\n        for (const use of daily) {\n          switch (use[0]) {\n            case 'instance_reads': {\n              expect(use[1].total).to.equal(4)\n              break\n            }\n            case 'instance_writes': {\n              expect(use[1].total).to.equal(2)\n              break\n            }\n            case 'network_egress': {\n              expect(use[1].total).to.be.closeTo(5237, 1000)\n              break\n            }\n            case 'stored_data': {\n              expect(use[1].total).to.equal(601902)\n              break\n            }\n          }\n        }\n      })\n    })\n  })\n})\n"]}