{"version":3,"file":"proto.keys.js","sourceRoot":"","sources":["../../src/proto.keys.ts"],"names":[],"mappings":"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","sourcesContent":["export const enum KeyType {\n  RSA = \"RSA\",\n  Ed25519 = \"Ed25519\",\n  Secp256k1 = \"Secp256k1\",\n}\n\nexport const encodeKeyType: { [key: string]: number } = {\n  RSA: 0,\n  Ed25519: 1,\n  Secp256k1: 2,\n};\n\nexport const decodeKeyType: { [key: number]: KeyType } = {\n  0: KeyType.RSA,\n  1: KeyType.Ed25519,\n  2: KeyType.Secp256k1,\n};\n\nexport interface PublicKey {\n  Type: KeyType;\n  Data: Uint8Array;\n}\n\nexport function encodePublicKey(message: PublicKey): Uint8Array {\n  let bb = popByteBuffer();\n  _encodePublicKey(message, bb);\n  return toUint8Array(bb);\n}\n\nfunction _encodePublicKey(message: PublicKey, bb: ByteBuffer): void {\n  // required KeyType Type = 1;\n  let $Type = message.Type;\n  if ($Type !== undefined) {\n    writeVarint32(bb, 8);\n    writeVarint32(bb, encodeKeyType[$Type]);\n  }\n\n  // required bytes Data = 2;\n  let $Data = message.Data;\n  if ($Data !== undefined) {\n    writeVarint32(bb, 18);\n    writeVarint32(bb, $Data.length), writeBytes(bb, $Data);\n  }\n}\n\nexport function decodePublicKey(binary: Uint8Array): PublicKey {\n  return _decodePublicKey(wrapByteBuffer(binary));\n}\n\nfunction _decodePublicKey(bb: ByteBuffer): PublicKey {\n  let message: PublicKey = {} as any;\n\n  end_of_message: while (!isAtEnd(bb)) {\n    let tag = readVarint32(bb);\n\n    switch (tag >>> 3) {\n      case 0:\n        break end_of_message;\n\n      // required KeyType Type = 1;\n      case 1: {\n        message.Type = decodeKeyType[readVarint32(bb)];\n        break;\n      }\n\n      // required bytes Data = 2;\n      case 2: {\n        message.Data = readBytes(bb, readVarint32(bb));\n        break;\n      }\n\n      default:\n        skipUnknownField(bb, tag & 7);\n    }\n  }\n\n  if (message.Type === undefined)\n    throw new Error(\"Missing required field: Type\");\n\n  if (message.Data === undefined)\n    throw new Error(\"Missing required field: Data\");\n\n  return message;\n}\n\nexport interface PrivateKey {\n  Type: KeyType;\n  Data: Uint8Array;\n}\n\nexport function encodePrivateKey(message: PrivateKey): Uint8Array {\n  let bb = popByteBuffer();\n  _encodePrivateKey(message, bb);\n  return toUint8Array(bb);\n}\n\nfunction _encodePrivateKey(message: PrivateKey, bb: ByteBuffer): void {\n  // required KeyType Type = 1;\n  let $Type = message.Type;\n  if ($Type !== undefined) {\n    writeVarint32(bb, 8);\n    writeVarint32(bb, encodeKeyType[$Type]);\n  }\n\n  // required bytes Data = 2;\n  let $Data = message.Data;\n  if ($Data !== undefined) {\n    writeVarint32(bb, 18);\n    writeVarint32(bb, $Data.length), writeBytes(bb, $Data);\n  }\n}\n\nexport function decodePrivateKey(binary: Uint8Array): PrivateKey {\n  return _decodePrivateKey(wrapByteBuffer(binary));\n}\n\nfunction _decodePrivateKey(bb: ByteBuffer): PrivateKey {\n  let message: PrivateKey = {} as any;\n\n  end_of_message: while (!isAtEnd(bb)) {\n    let tag = readVarint32(bb);\n\n    switch (tag >>> 3) {\n      case 0:\n        break end_of_message;\n\n      // required KeyType Type = 1;\n      case 1: {\n        message.Type = decodeKeyType[readVarint32(bb)];\n        break;\n      }\n\n      // required bytes Data = 2;\n      case 2: {\n        message.Data = readBytes(bb, readVarint32(bb));\n        break;\n      }\n\n      default:\n        skipUnknownField(bb, tag & 7);\n    }\n  }\n\n  if (message.Type === undefined)\n    throw new Error(\"Missing required field: Type\");\n\n  if (message.Data === undefined)\n    throw new Error(\"Missing required field: Data\");\n\n  return message;\n}\n\nexport interface Long {\n  low: number;\n  high: number;\n  unsigned: boolean;\n}\n\ninterface ByteBuffer {\n  bytes: Uint8Array;\n  offset: number;\n  limit: number;\n}\n\nfunction pushTemporaryLength(bb: ByteBuffer): number {\n  let length = readVarint32(bb);\n  let limit = bb.limit;\n  bb.limit = bb.offset + length;\n  return limit;\n}\n\nfunction skipUnknownField(bb: ByteBuffer, type: number): void {\n  switch (type) {\n    case 0: while (readByte(bb) & 0x80) { } break;\n    case 2: skip(bb, readVarint32(bb)); break;\n    case 5: skip(bb, 4); break;\n    case 1: skip(bb, 8); break;\n    default: throw new Error(\"Unimplemented type: \" + type);\n  }\n}\n\nfunction stringToLong(value: string): Long {\n  return {\n    low: value.charCodeAt(0) | (value.charCodeAt(1) << 16),\n    high: value.charCodeAt(2) | (value.charCodeAt(3) << 16),\n    unsigned: false,\n  };\n}\n\nfunction longToString(value: Long): string {\n  let low = value.low;\n  let high = value.high;\n  return String.fromCharCode(\n    low & 0xFFFF,\n    low >>> 16,\n    high & 0xFFFF,\n    high >>> 16);\n}\n\n// The code below was modified from https://github.com/protobufjs/bytebuffer.js\n// which is under the Apache License 2.0.\n\nlet f32 = new Float32Array(1);\nlet f32_u8 = new Uint8Array(f32.buffer);\n\nlet f64 = new Float64Array(1);\nlet f64_u8 = new Uint8Array(f64.buffer);\n\nfunction intToLong(value: number): Long {\n  value |= 0;\n  return {\n    low: value,\n    high: value >> 31,\n    unsigned: value >= 0,\n  };\n}\n\nlet bbStack: ByteBuffer[] = [];\n\nfunction popByteBuffer(): ByteBuffer {\n  const bb = bbStack.pop();\n  if (!bb) return { bytes: new Uint8Array(64), offset: 0, limit: 0 };\n  bb.offset = bb.limit = 0;\n  return bb;\n}\n\nfunction pushByteBuffer(bb: ByteBuffer): void {\n  bbStack.push(bb);\n}\n\nfunction wrapByteBuffer(bytes: Uint8Array): ByteBuffer {\n  return { bytes, offset: 0, limit: bytes.length };\n}\n\nfunction toUint8Array(bb: ByteBuffer): Uint8Array {\n  let bytes = bb.bytes;\n  let limit = bb.limit;\n  return bytes.length === limit ? bytes : bytes.subarray(0, limit);\n}\n\nfunction skip(bb: ByteBuffer, offset: number): void {\n  if (bb.offset + offset > bb.limit) {\n    throw new Error('Skip past limit');\n  }\n  bb.offset += offset;\n}\n\nfunction isAtEnd(bb: ByteBuffer): boolean {\n  return bb.offset >= bb.limit;\n}\n\nfunction grow(bb: ByteBuffer, count: number): number {\n  let bytes = bb.bytes;\n  let offset = bb.offset;\n  let limit = bb.limit;\n  let finalOffset = offset + count;\n  if (finalOffset > bytes.length) {\n    let newBytes = new Uint8Array(finalOffset * 2);\n    newBytes.set(bytes);\n    bb.bytes = newBytes;\n  }\n  bb.offset = finalOffset;\n  if (finalOffset > limit) {\n    bb.limit = finalOffset;\n  }\n  return offset;\n}\n\nfunction advance(bb: ByteBuffer, count: number): number {\n  let offset = bb.offset;\n  if (offset + count > bb.limit) {\n    throw new Error('Read past limit');\n  }\n  bb.offset += count;\n  return offset;\n}\n\nfunction readBytes(bb: ByteBuffer, count: number): Uint8Array {\n  let offset = advance(bb, count);\n  return bb.bytes.subarray(offset, offset + count);\n}\n\nfunction writeBytes(bb: ByteBuffer, buffer: Uint8Array): void {\n  let offset = grow(bb, buffer.length);\n  bb.bytes.set(buffer, offset);\n}\n\nfunction readString(bb: ByteBuffer, count: number): string {\n  // Sadly a hand-coded UTF8 decoder is much faster than subarray+TextDecoder in V8\n  let offset = advance(bb, count);\n  let fromCharCode = String.fromCharCode;\n  let bytes = bb.bytes;\n  let invalid = '\\uFFFD';\n  let text = '';\n\n  for (let i = 0; i < count; i++) {\n    let c1 = bytes[i + offset], c2: number, c3: number, c4: number, c: number;\n\n    // 1 byte\n    if ((c1 & 0x80) === 0) {\n      text += fromCharCode(c1);\n    }\n\n    // 2 bytes\n    else if ((c1 & 0xE0) === 0xC0) {\n      if (i + 1 >= count) text += invalid;\n      else {\n        c2 = bytes[i + offset + 1];\n        if ((c2 & 0xC0) !== 0x80) text += invalid;\n        else {\n          c = ((c1 & 0x1F) << 6) | (c2 & 0x3F);\n          if (c < 0x80) text += invalid;\n          else {\n            text += fromCharCode(c);\n            i++;\n          }\n        }\n      }\n    }\n\n    // 3 bytes\n    else if ((c1 & 0xF0) == 0xE0) {\n      if (i + 2 >= count) text += invalid;\n      else {\n        c2 = bytes[i + offset + 1];\n        c3 = bytes[i + offset + 2];\n        if (((c2 | (c3 << 8)) & 0xC0C0) !== 0x8080) text += invalid;\n        else {\n          c = ((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6) | (c3 & 0x3F);\n          if (c < 0x0800 || (c >= 0xD800 && c <= 0xDFFF)) text += invalid;\n          else {\n            text += fromCharCode(c);\n            i += 2;\n          }\n        }\n      }\n    }\n\n    // 4 bytes\n    else if ((c1 & 0xF8) == 0xF0) {\n      if (i + 3 >= count) text += invalid;\n      else {\n        c2 = bytes[i + offset + 1];\n        c3 = bytes[i + offset + 2];\n        c4 = bytes[i + offset + 3];\n        if (((c2 | (c3 << 8) | (c4 << 16)) & 0xC0C0C0) !== 0x808080) text += invalid;\n        else {\n          c = ((c1 & 0x07) << 0x12) | ((c2 & 0x3F) << 0x0C) | ((c3 & 0x3F) << 0x06) | (c4 & 0x3F);\n          if (c < 0x10000 || c > 0x10FFFF) text += invalid;\n          else {\n            c -= 0x10000;\n            text += fromCharCode((c >> 10) + 0xD800, (c & 0x3FF) + 0xDC00);\n            i += 3;\n          }\n        }\n      }\n    }\n\n    else text += invalid;\n  }\n\n  return text;\n}\n\nfunction writeString(bb: ByteBuffer, text: string): void {\n  // Sadly a hand-coded UTF8 encoder is much faster than TextEncoder+set in V8\n  let n = text.length;\n  let byteCount = 0;\n\n  // Write the byte count first\n  for (let i = 0; i < n; i++) {\n    let c = text.charCodeAt(i);\n    if (c >= 0xD800 && c <= 0xDBFF && i + 1 < n) {\n      c = (c << 10) + text.charCodeAt(++i) - 0x35FDC00;\n    }\n    byteCount += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n  writeVarint32(bb, byteCount);\n\n  let offset = grow(bb, byteCount);\n  let bytes = bb.bytes;\n\n  // Then write the bytes\n  for (let i = 0; i < n; i++) {\n    let c = text.charCodeAt(i);\n    if (c >= 0xD800 && c <= 0xDBFF && i + 1 < n) {\n      c = (c << 10) + text.charCodeAt(++i) - 0x35FDC00;\n    }\n    if (c < 0x80) {\n      bytes[offset++] = c;\n    } else {\n      if (c < 0x800) {\n        bytes[offset++] = ((c >> 6) & 0x1F) | 0xC0;\n      } else {\n        if (c < 0x10000) {\n          bytes[offset++] = ((c >> 12) & 0x0F) | 0xE0;\n        } else {\n          bytes[offset++] = ((c >> 18) & 0x07) | 0xF0;\n          bytes[offset++] = ((c >> 12) & 0x3F) | 0x80;\n        }\n        bytes[offset++] = ((c >> 6) & 0x3F) | 0x80;\n      }\n      bytes[offset++] = (c & 0x3F) | 0x80;\n    }\n  }\n}\n\nfunction writeByteBuffer(bb: ByteBuffer, buffer: ByteBuffer): void {\n  let offset = grow(bb, buffer.limit);\n  let from = bb.bytes;\n  let to = buffer.bytes;\n\n  // This for loop is much faster than subarray+set on V8\n  for (let i = 0, n = buffer.limit; i < n; i++) {\n    from[i + offset] = to[i];\n  }\n}\n\nfunction readByte(bb: ByteBuffer): number {\n  return bb.bytes[advance(bb, 1)];\n}\n\nfunction writeByte(bb: ByteBuffer, value: number): void {\n  let offset = grow(bb, 1);\n  bb.bytes[offset] = value;\n}\n\nfunction readFloat(bb: ByteBuffer): number {\n  let offset = advance(bb, 4);\n  let bytes = bb.bytes;\n\n  // Manual copying is much faster than subarray+set in V8\n  f32_u8[0] = bytes[offset++];\n  f32_u8[1] = bytes[offset++];\n  f32_u8[2] = bytes[offset++];\n  f32_u8[3] = bytes[offset++];\n  return f32[0];\n}\n\nfunction writeFloat(bb: ByteBuffer, value: number): void {\n  let offset = grow(bb, 4);\n  let bytes = bb.bytes;\n  f32[0] = value;\n\n  // Manual copying is much faster than subarray+set in V8\n  bytes[offset++] = f32_u8[0];\n  bytes[offset++] = f32_u8[1];\n  bytes[offset++] = f32_u8[2];\n  bytes[offset++] = f32_u8[3];\n}\n\nfunction readDouble(bb: ByteBuffer): number {\n  let offset = advance(bb, 8);\n  let bytes = bb.bytes;\n\n  // Manual copying is much faster than subarray+set in V8\n  f64_u8[0] = bytes[offset++];\n  f64_u8[1] = bytes[offset++];\n  f64_u8[2] = bytes[offset++];\n  f64_u8[3] = bytes[offset++];\n  f64_u8[4] = bytes[offset++];\n  f64_u8[5] = bytes[offset++];\n  f64_u8[6] = bytes[offset++];\n  f64_u8[7] = bytes[offset++];\n  return f64[0];\n}\n\nfunction writeDouble(bb: ByteBuffer, value: number): void {\n  let offset = grow(bb, 8);\n  let bytes = bb.bytes;\n  f64[0] = value;\n\n  // Manual copying is much faster than subarray+set in V8\n  bytes[offset++] = f64_u8[0];\n  bytes[offset++] = f64_u8[1];\n  bytes[offset++] = f64_u8[2];\n  bytes[offset++] = f64_u8[3];\n  bytes[offset++] = f64_u8[4];\n  bytes[offset++] = f64_u8[5];\n  bytes[offset++] = f64_u8[6];\n  bytes[offset++] = f64_u8[7];\n}\n\nfunction readInt32(bb: ByteBuffer): number {\n  let offset = advance(bb, 4);\n  let bytes = bb.bytes;\n  return (\n    bytes[offset] |\n    (bytes[offset + 1] << 8) |\n    (bytes[offset + 2] << 16) |\n    (bytes[offset + 3] << 24)\n  );\n}\n\nfunction writeInt32(bb: ByteBuffer, value: number): void {\n  let offset = grow(bb, 4);\n  let bytes = bb.bytes;\n  bytes[offset] = value;\n  bytes[offset + 1] = value >> 8;\n  bytes[offset + 2] = value >> 16;\n  bytes[offset + 3] = value >> 24;\n}\n\nfunction readInt64(bb: ByteBuffer, unsigned: boolean): Long {\n  return {\n    low: readInt32(bb),\n    high: readInt32(bb),\n    unsigned,\n  };\n}\n\nfunction writeInt64(bb: ByteBuffer, value: Long): void {\n  writeInt32(bb, value.low);\n  writeInt32(bb, value.high);\n}\n\nfunction readVarint32(bb: ByteBuffer): number {\n  let c = 0;\n  let value = 0;\n  let b: number;\n  do {\n    b = readByte(bb);\n    if (c < 32) value |= (b & 0x7F) << c;\n    c += 7;\n  } while (b & 0x80);\n  return value;\n}\n\nfunction writeVarint32(bb: ByteBuffer, value: number): void {\n  value >>>= 0;\n  while (value >= 0x80) {\n    writeByte(bb, (value & 0x7f) | 0x80);\n    value >>>= 7;\n  }\n  writeByte(bb, value);\n}\n\nfunction readVarint64(bb: ByteBuffer, unsigned: boolean): Long {\n  let part0 = 0;\n  let part1 = 0;\n  let part2 = 0;\n  let b: number;\n\n  b = readByte(bb); part0 = (b & 0x7F); if (b & 0x80) {\n    b = readByte(bb); part0 |= (b & 0x7F) << 7; if (b & 0x80) {\n      b = readByte(bb); part0 |= (b & 0x7F) << 14; if (b & 0x80) {\n        b = readByte(bb); part0 |= (b & 0x7F) << 21; if (b & 0x80) {\n\n          b = readByte(bb); part1 = (b & 0x7F); if (b & 0x80) {\n            b = readByte(bb); part1 |= (b & 0x7F) << 7; if (b & 0x80) {\n              b = readByte(bb); part1 |= (b & 0x7F) << 14; if (b & 0x80) {\n                b = readByte(bb); part1 |= (b & 0x7F) << 21; if (b & 0x80) {\n\n                  b = readByte(bb); part2 = (b & 0x7F); if (b & 0x80) {\n                    b = readByte(bb); part2 |= (b & 0x7F) << 7;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return {\n    low: part0 | (part1 << 28),\n    high: (part1 >>> 4) | (part2 << 24),\n    unsigned,\n  };\n}\n\nfunction writeVarint64(bb: ByteBuffer, value: Long): void {\n  let part0 = value.low >>> 0;\n  let part1 = ((value.low >>> 28) | (value.high << 4)) >>> 0;\n  let part2 = value.high >>> 24;\n\n  // ref: src/google/protobuf/io/coded_stream.cc\n  let size =\n    part2 === 0 ?\n      part1 === 0 ?\n        part0 < 1 << 14 ?\n          part0 < 1 << 7 ? 1 : 2 :\n          part0 < 1 << 21 ? 3 : 4 :\n        part1 < 1 << 14 ?\n          part1 < 1 << 7 ? 5 : 6 :\n          part1 < 1 << 21 ? 7 : 8 :\n      part2 < 1 << 7 ? 9 : 10;\n\n  let offset = grow(bb, size);\n  let bytes = bb.bytes;\n\n  switch (size) {\n    case 10: bytes[offset + 9] = (part2 >>> 7) & 0x01;\n    case 9: bytes[offset + 8] = size !== 9 ? part2 | 0x80 : part2 & 0x7F;\n    case 8: bytes[offset + 7] = size !== 8 ? (part1 >>> 21) | 0x80 : (part1 >>> 21) & 0x7F;\n    case 7: bytes[offset + 6] = size !== 7 ? (part1 >>> 14) | 0x80 : (part1 >>> 14) & 0x7F;\n    case 6: bytes[offset + 5] = size !== 6 ? (part1 >>> 7) | 0x80 : (part1 >>> 7) & 0x7F;\n    case 5: bytes[offset + 4] = size !== 5 ? part1 | 0x80 : part1 & 0x7F;\n    case 4: bytes[offset + 3] = size !== 4 ? (part0 >>> 21) | 0x80 : (part0 >>> 21) & 0x7F;\n    case 3: bytes[offset + 2] = size !== 3 ? (part0 >>> 14) | 0x80 : (part0 >>> 14) & 0x7F;\n    case 2: bytes[offset + 1] = size !== 2 ? (part0 >>> 7) | 0x80 : (part0 >>> 7) & 0x7F;\n    case 1: bytes[offset] = size !== 1 ? part0 | 0x80 : part0 & 0x7F;\n  }\n}\n\nfunction readVarint32ZigZag(bb: ByteBuffer): number {\n  let value = readVarint32(bb);\n\n  // ref: src/google/protobuf/wire_format_lite.h\n  return (value >>> 1) ^ -(value & 1);\n}\n\nfunction writeVarint32ZigZag(bb: ByteBuffer, value: number): void {\n  // ref: src/google/protobuf/wire_format_lite.h\n  writeVarint32(bb, (value << 1) ^ (value >> 31));\n}\n\nfunction readVarint64ZigZag(bb: ByteBuffer): Long {\n  let value = readVarint64(bb, /* unsigned */ false);\n  let low = value.low;\n  let high = value.high;\n  let flip = -(low & 1);\n\n  // ref: src/google/protobuf/wire_format_lite.h\n  return {\n    low: ((low >>> 1) | (high << 31)) ^ flip,\n    high: (high >>> 1) ^ flip,\n    unsigned: false,\n  };\n}\n\nfunction writeVarint64ZigZag(bb: ByteBuffer, value: Long): void {\n  let low = value.low;\n  let high = value.high;\n  let flip = high >> 31;\n\n  // ref: src/google/protobuf/wire_format_lite.h\n  writeVarint64(bb, {\n    low: (low << 1) ^ flip,\n    high: ((high << 1) | (low >>> 31)) ^ flip,\n    unsigned: false,\n  });\n}\n"]}