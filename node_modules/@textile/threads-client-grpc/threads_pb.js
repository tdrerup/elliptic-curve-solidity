// source: threads.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.threads.pb.CollectionConfig', null, global);
goog.exportSymbol('proto.threads.pb.CreateReply', null, global);
goog.exportSymbol('proto.threads.pb.CreateRequest', null, global);
goog.exportSymbol('proto.threads.pb.DeleteCollectionReply', null, global);
goog.exportSymbol('proto.threads.pb.DeleteCollectionRequest', null, global);
goog.exportSymbol('proto.threads.pb.DeleteDBReply', null, global);
goog.exportSymbol('proto.threads.pb.DeleteDBRequest', null, global);
goog.exportSymbol('proto.threads.pb.DeleteReply', null, global);
goog.exportSymbol('proto.threads.pb.DeleteRequest', null, global);
goog.exportSymbol('proto.threads.pb.DiscardReply', null, global);
goog.exportSymbol('proto.threads.pb.DiscardRequest', null, global);
goog.exportSymbol('proto.threads.pb.FindByIDReply', null, global);
goog.exportSymbol('proto.threads.pb.FindByIDRequest', null, global);
goog.exportSymbol('proto.threads.pb.FindReply', null, global);
goog.exportSymbol('proto.threads.pb.FindRequest', null, global);
goog.exportSymbol('proto.threads.pb.GetCollectionIndexesReply', null, global);
goog.exportSymbol('proto.threads.pb.GetCollectionIndexesRequest', null, global);
goog.exportSymbol('proto.threads.pb.GetCollectionInfoReply', null, global);
goog.exportSymbol('proto.threads.pb.GetCollectionInfoRequest', null, global);
goog.exportSymbol('proto.threads.pb.GetDBInfoReply', null, global);
goog.exportSymbol('proto.threads.pb.GetDBInfoRequest', null, global);
goog.exportSymbol('proto.threads.pb.GetTokenReply', null, global);
goog.exportSymbol('proto.threads.pb.GetTokenReply.PayloadCase', null, global);
goog.exportSymbol('proto.threads.pb.GetTokenRequest', null, global);
goog.exportSymbol('proto.threads.pb.GetTokenRequest.PayloadCase', null, global);
goog.exportSymbol('proto.threads.pb.HasReply', null, global);
goog.exportSymbol('proto.threads.pb.HasRequest', null, global);
goog.exportSymbol('proto.threads.pb.Index', null, global);
goog.exportSymbol('proto.threads.pb.ListCollectionsReply', null, global);
goog.exportSymbol('proto.threads.pb.ListCollectionsRequest', null, global);
goog.exportSymbol('proto.threads.pb.ListDBsReply', null, global);
goog.exportSymbol('proto.threads.pb.ListDBsReply.DB', null, global);
goog.exportSymbol('proto.threads.pb.ListDBsRequest', null, global);
goog.exportSymbol('proto.threads.pb.ListenReply', null, global);
goog.exportSymbol('proto.threads.pb.ListenReply.Action', null, global);
goog.exportSymbol('proto.threads.pb.ListenRequest', null, global);
goog.exportSymbol('proto.threads.pb.ListenRequest.Filter', null, global);
goog.exportSymbol('proto.threads.pb.ListenRequest.Filter.Action', null, global);
goog.exportSymbol('proto.threads.pb.NewCollectionReply', null, global);
goog.exportSymbol('proto.threads.pb.NewCollectionRequest', null, global);
goog.exportSymbol('proto.threads.pb.NewDBFromAddrRequest', null, global);
goog.exportSymbol('proto.threads.pb.NewDBReply', null, global);
goog.exportSymbol('proto.threads.pb.NewDBRequest', null, global);
goog.exportSymbol('proto.threads.pb.ReadTransactionReply', null, global);
goog.exportSymbol('proto.threads.pb.ReadTransactionReply.OptionCase', null, global);
goog.exportSymbol('proto.threads.pb.ReadTransactionRequest', null, global);
goog.exportSymbol('proto.threads.pb.ReadTransactionRequest.OptionCase', null, global);
goog.exportSymbol('proto.threads.pb.SaveReply', null, global);
goog.exportSymbol('proto.threads.pb.SaveRequest', null, global);
goog.exportSymbol('proto.threads.pb.StartTransactionRequest', null, global);
goog.exportSymbol('proto.threads.pb.UpdateCollectionReply', null, global);
goog.exportSymbol('proto.threads.pb.UpdateCollectionRequest', null, global);
goog.exportSymbol('proto.threads.pb.VerifyReply', null, global);
goog.exportSymbol('proto.threads.pb.VerifyRequest', null, global);
goog.exportSymbol('proto.threads.pb.WriteTransactionReply', null, global);
goog.exportSymbol('proto.threads.pb.WriteTransactionReply.OptionCase', null, global);
goog.exportSymbol('proto.threads.pb.WriteTransactionRequest', null, global);
goog.exportSymbol('proto.threads.pb.WriteTransactionRequest.OptionCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.GetTokenRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.threads.pb.GetTokenRequest.oneofGroups_);
};
goog.inherits(proto.threads.pb.GetTokenRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.GetTokenRequest.displayName = 'proto.threads.pb.GetTokenRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.GetTokenReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.threads.pb.GetTokenReply.oneofGroups_);
};
goog.inherits(proto.threads.pb.GetTokenReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.GetTokenReply.displayName = 'proto.threads.pb.GetTokenReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.NewDBRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.threads.pb.NewDBRequest.repeatedFields_, null);
};
goog.inherits(proto.threads.pb.NewDBRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.NewDBRequest.displayName = 'proto.threads.pb.NewDBRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.NewDBFromAddrRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.threads.pb.NewDBFromAddrRequest.repeatedFields_, null);
};
goog.inherits(proto.threads.pb.NewDBFromAddrRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.NewDBFromAddrRequest.displayName = 'proto.threads.pb.NewDBFromAddrRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.CollectionConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.threads.pb.CollectionConfig.repeatedFields_, null);
};
goog.inherits(proto.threads.pb.CollectionConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.CollectionConfig.displayName = 'proto.threads.pb.CollectionConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.Index = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.pb.Index, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.Index.displayName = 'proto.threads.pb.Index';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.NewDBReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.pb.NewDBReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.NewDBReply.displayName = 'proto.threads.pb.NewDBReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.ListDBsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.pb.ListDBsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.ListDBsRequest.displayName = 'proto.threads.pb.ListDBsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.ListDBsReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.threads.pb.ListDBsReply.repeatedFields_, null);
};
goog.inherits(proto.threads.pb.ListDBsReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.ListDBsReply.displayName = 'proto.threads.pb.ListDBsReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.ListDBsReply.DB = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.pb.ListDBsReply.DB, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.ListDBsReply.DB.displayName = 'proto.threads.pb.ListDBsReply.DB';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.GetDBInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.pb.GetDBInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.GetDBInfoRequest.displayName = 'proto.threads.pb.GetDBInfoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.GetDBInfoReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.threads.pb.GetDBInfoReply.repeatedFields_, null);
};
goog.inherits(proto.threads.pb.GetDBInfoReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.GetDBInfoReply.displayName = 'proto.threads.pb.GetDBInfoReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.DeleteDBRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.pb.DeleteDBRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.DeleteDBRequest.displayName = 'proto.threads.pb.DeleteDBRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.DeleteDBReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.pb.DeleteDBReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.DeleteDBReply.displayName = 'proto.threads.pb.DeleteDBReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.NewCollectionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.pb.NewCollectionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.NewCollectionRequest.displayName = 'proto.threads.pb.NewCollectionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.NewCollectionReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.pb.NewCollectionReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.NewCollectionReply.displayName = 'proto.threads.pb.NewCollectionReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.UpdateCollectionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.pb.UpdateCollectionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.UpdateCollectionRequest.displayName = 'proto.threads.pb.UpdateCollectionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.UpdateCollectionReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.pb.UpdateCollectionReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.UpdateCollectionReply.displayName = 'proto.threads.pb.UpdateCollectionReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.DeleteCollectionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.pb.DeleteCollectionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.DeleteCollectionRequest.displayName = 'proto.threads.pb.DeleteCollectionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.DeleteCollectionReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.pb.DeleteCollectionReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.DeleteCollectionReply.displayName = 'proto.threads.pb.DeleteCollectionReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.GetCollectionInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.pb.GetCollectionInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.GetCollectionInfoRequest.displayName = 'proto.threads.pb.GetCollectionInfoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.GetCollectionInfoReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.threads.pb.GetCollectionInfoReply.repeatedFields_, null);
};
goog.inherits(proto.threads.pb.GetCollectionInfoReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.GetCollectionInfoReply.displayName = 'proto.threads.pb.GetCollectionInfoReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.GetCollectionIndexesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.pb.GetCollectionIndexesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.GetCollectionIndexesRequest.displayName = 'proto.threads.pb.GetCollectionIndexesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.GetCollectionIndexesReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.threads.pb.GetCollectionIndexesReply.repeatedFields_, null);
};
goog.inherits(proto.threads.pb.GetCollectionIndexesReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.GetCollectionIndexesReply.displayName = 'proto.threads.pb.GetCollectionIndexesReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.ListCollectionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.pb.ListCollectionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.ListCollectionsRequest.displayName = 'proto.threads.pb.ListCollectionsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.ListCollectionsReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.threads.pb.ListCollectionsReply.repeatedFields_, null);
};
goog.inherits(proto.threads.pb.ListCollectionsReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.ListCollectionsReply.displayName = 'proto.threads.pb.ListCollectionsReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.CreateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.threads.pb.CreateRequest.repeatedFields_, null);
};
goog.inherits(proto.threads.pb.CreateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.CreateRequest.displayName = 'proto.threads.pb.CreateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.CreateReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.threads.pb.CreateReply.repeatedFields_, null);
};
goog.inherits(proto.threads.pb.CreateReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.CreateReply.displayName = 'proto.threads.pb.CreateReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.VerifyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.threads.pb.VerifyRequest.repeatedFields_, null);
};
goog.inherits(proto.threads.pb.VerifyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.VerifyRequest.displayName = 'proto.threads.pb.VerifyRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.VerifyReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.pb.VerifyReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.VerifyReply.displayName = 'proto.threads.pb.VerifyReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.SaveRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.threads.pb.SaveRequest.repeatedFields_, null);
};
goog.inherits(proto.threads.pb.SaveRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.SaveRequest.displayName = 'proto.threads.pb.SaveRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.SaveReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.pb.SaveReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.SaveReply.displayName = 'proto.threads.pb.SaveReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.DeleteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.threads.pb.DeleteRequest.repeatedFields_, null);
};
goog.inherits(proto.threads.pb.DeleteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.DeleteRequest.displayName = 'proto.threads.pb.DeleteRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.DeleteReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.pb.DeleteReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.DeleteReply.displayName = 'proto.threads.pb.DeleteReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.HasRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.threads.pb.HasRequest.repeatedFields_, null);
};
goog.inherits(proto.threads.pb.HasRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.HasRequest.displayName = 'proto.threads.pb.HasRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.HasReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.pb.HasReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.HasReply.displayName = 'proto.threads.pb.HasReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.FindRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.pb.FindRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.FindRequest.displayName = 'proto.threads.pb.FindRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.FindReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.threads.pb.FindReply.repeatedFields_, null);
};
goog.inherits(proto.threads.pb.FindReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.FindReply.displayName = 'proto.threads.pb.FindReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.FindByIDRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.pb.FindByIDRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.FindByIDRequest.displayName = 'proto.threads.pb.FindByIDRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.FindByIDReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.pb.FindByIDReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.FindByIDReply.displayName = 'proto.threads.pb.FindByIDReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.DiscardRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.pb.DiscardRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.DiscardRequest.displayName = 'proto.threads.pb.DiscardRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.DiscardReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.pb.DiscardReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.DiscardReply.displayName = 'proto.threads.pb.DiscardReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.StartTransactionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.pb.StartTransactionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.StartTransactionRequest.displayName = 'proto.threads.pb.StartTransactionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.ReadTransactionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.threads.pb.ReadTransactionRequest.oneofGroups_);
};
goog.inherits(proto.threads.pb.ReadTransactionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.ReadTransactionRequest.displayName = 'proto.threads.pb.ReadTransactionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.ReadTransactionReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.threads.pb.ReadTransactionReply.oneofGroups_);
};
goog.inherits(proto.threads.pb.ReadTransactionReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.ReadTransactionReply.displayName = 'proto.threads.pb.ReadTransactionReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.WriteTransactionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.threads.pb.WriteTransactionRequest.oneofGroups_);
};
goog.inherits(proto.threads.pb.WriteTransactionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.WriteTransactionRequest.displayName = 'proto.threads.pb.WriteTransactionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.WriteTransactionReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.threads.pb.WriteTransactionReply.oneofGroups_);
};
goog.inherits(proto.threads.pb.WriteTransactionReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.WriteTransactionReply.displayName = 'proto.threads.pb.WriteTransactionReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.ListenRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.threads.pb.ListenRequest.repeatedFields_, null);
};
goog.inherits(proto.threads.pb.ListenRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.ListenRequest.displayName = 'proto.threads.pb.ListenRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.ListenRequest.Filter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.pb.ListenRequest.Filter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.ListenRequest.Filter.displayName = 'proto.threads.pb.ListenRequest.Filter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.pb.ListenReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.pb.ListenReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.pb.ListenReply.displayName = 'proto.threads.pb.ListenReply';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.threads.pb.GetTokenRequest.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.threads.pb.GetTokenRequest.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  KEY: 1,
  SIGNATURE: 2
};

/**
 * @return {proto.threads.pb.GetTokenRequest.PayloadCase}
 */
proto.threads.pb.GetTokenRequest.prototype.getPayloadCase = function() {
  return /** @type {proto.threads.pb.GetTokenRequest.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.threads.pb.GetTokenRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.GetTokenRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.GetTokenRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.GetTokenRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.GetTokenRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.GetTokenRequest}
 */
proto.threads.pb.GetTokenRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.GetTokenRequest;
  return proto.threads.pb.GetTokenRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.GetTokenRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.GetTokenRequest}
 */
proto.threads.pb.GetTokenRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.GetTokenRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.GetTokenRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.GetTokenRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.GetTokenRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.threads.pb.GetTokenRequest.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.threads.pb.GetTokenRequest} returns this
 */
proto.threads.pb.GetTokenRequest.prototype.setKey = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.threads.pb.GetTokenRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.threads.pb.GetTokenRequest} returns this
 */
proto.threads.pb.GetTokenRequest.prototype.clearKey = function() {
  return jspb.Message.setOneofField(this, 1, proto.threads.pb.GetTokenRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.threads.pb.GetTokenRequest.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes signature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.GetTokenRequest.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes signature = 2;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.threads.pb.GetTokenRequest.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.threads.pb.GetTokenRequest.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.pb.GetTokenRequest} returns this
 */
proto.threads.pb.GetTokenRequest.prototype.setSignature = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.threads.pb.GetTokenRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.threads.pb.GetTokenRequest} returns this
 */
proto.threads.pb.GetTokenRequest.prototype.clearSignature = function() {
  return jspb.Message.setOneofField(this, 2, proto.threads.pb.GetTokenRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.threads.pb.GetTokenRequest.prototype.hasSignature = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.threads.pb.GetTokenReply.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.threads.pb.GetTokenReply.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  CHALLENGE: 1,
  TOKEN: 2
};

/**
 * @return {proto.threads.pb.GetTokenReply.PayloadCase}
 */
proto.threads.pb.GetTokenReply.prototype.getPayloadCase = function() {
  return /** @type {proto.threads.pb.GetTokenReply.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.threads.pb.GetTokenReply.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.GetTokenReply.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.GetTokenReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.GetTokenReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.GetTokenReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    challenge: msg.getChallenge_asB64(),
    token: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.GetTokenReply}
 */
proto.threads.pb.GetTokenReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.GetTokenReply;
  return proto.threads.pb.GetTokenReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.GetTokenReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.GetTokenReply}
 */
proto.threads.pb.GetTokenReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChallenge(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.GetTokenReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.GetTokenReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.GetTokenReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.GetTokenReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bytes challenge = 1;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.GetTokenReply.prototype.getChallenge = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes challenge = 1;
 * This is a type-conversion wrapper around `getChallenge()`
 * @return {string}
 */
proto.threads.pb.GetTokenReply.prototype.getChallenge_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChallenge()));
};


/**
 * optional bytes challenge = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChallenge()`
 * @return {!Uint8Array}
 */
proto.threads.pb.GetTokenReply.prototype.getChallenge_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChallenge()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.pb.GetTokenReply} returns this
 */
proto.threads.pb.GetTokenReply.prototype.setChallenge = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.threads.pb.GetTokenReply.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.threads.pb.GetTokenReply} returns this
 */
proto.threads.pb.GetTokenReply.prototype.clearChallenge = function() {
  return jspb.Message.setOneofField(this, 1, proto.threads.pb.GetTokenReply.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.threads.pb.GetTokenReply.prototype.hasChallenge = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string token = 2;
 * @return {string}
 */
proto.threads.pb.GetTokenReply.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.threads.pb.GetTokenReply} returns this
 */
proto.threads.pb.GetTokenReply.prototype.setToken = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.threads.pb.GetTokenReply.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.threads.pb.GetTokenReply} returns this
 */
proto.threads.pb.GetTokenReply.prototype.clearToken = function() {
  return jspb.Message.setOneofField(this, 2, proto.threads.pb.GetTokenReply.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.threads.pb.GetTokenReply.prototype.hasToken = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.threads.pb.NewDBRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.NewDBRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.NewDBRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.NewDBRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.NewDBRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    dbid: msg.getDbid_asB64(),
    key: msg.getKey_asB64(),
    logkey: msg.getLogkey_asB64(),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    collectionsList: jspb.Message.toObjectList(msg.getCollectionsList(),
    proto.threads.pb.CollectionConfig.toObject, includeInstance),
    block: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.NewDBRequest}
 */
proto.threads.pb.NewDBRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.NewDBRequest;
  return proto.threads.pb.NewDBRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.NewDBRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.NewDBRequest}
 */
proto.threads.pb.NewDBRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDbid(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLogkey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.threads.pb.CollectionConfig;
      reader.readMessage(value,proto.threads.pb.CollectionConfig.deserializeBinaryFromReader);
      msg.addCollections(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBlock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.NewDBRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.NewDBRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.NewDBRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.NewDBRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDbid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getLogkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCollectionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.threads.pb.CollectionConfig.serializeBinaryToWriter
    );
  }
  f = message.getBlock();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional bytes dbID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.NewDBRequest.prototype.getDbid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes dbID = 1;
 * This is a type-conversion wrapper around `getDbid()`
 * @return {string}
 */
proto.threads.pb.NewDBRequest.prototype.getDbid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDbid()));
};


/**
 * optional bytes dbID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDbid()`
 * @return {!Uint8Array}
 */
proto.threads.pb.NewDBRequest.prototype.getDbid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDbid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.pb.NewDBRequest} returns this
 */
proto.threads.pb.NewDBRequest.prototype.setDbid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes key = 6;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.NewDBRequest.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes key = 6;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.threads.pb.NewDBRequest.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.threads.pb.NewDBRequest.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.pb.NewDBRequest} returns this
 */
proto.threads.pb.NewDBRequest.prototype.setKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes logKey = 7;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.NewDBRequest.prototype.getLogkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes logKey = 7;
 * This is a type-conversion wrapper around `getLogkey()`
 * @return {string}
 */
proto.threads.pb.NewDBRequest.prototype.getLogkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLogkey()));
};


/**
 * optional bytes logKey = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLogkey()`
 * @return {!Uint8Array}
 */
proto.threads.pb.NewDBRequest.prototype.getLogkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLogkey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.pb.NewDBRequest} returns this
 */
proto.threads.pb.NewDBRequest.prototype.setLogkey = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.threads.pb.NewDBRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.threads.pb.NewDBRequest} returns this
 */
proto.threads.pb.NewDBRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated CollectionConfig collections = 2;
 * @return {!Array<!proto.threads.pb.CollectionConfig>}
 */
proto.threads.pb.NewDBRequest.prototype.getCollectionsList = function() {
  return /** @type{!Array<!proto.threads.pb.CollectionConfig>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.threads.pb.CollectionConfig, 2));
};


/**
 * @param {!Array<!proto.threads.pb.CollectionConfig>} value
 * @return {!proto.threads.pb.NewDBRequest} returns this
*/
proto.threads.pb.NewDBRequest.prototype.setCollectionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.threads.pb.CollectionConfig=} opt_value
 * @param {number=} opt_index
 * @return {!proto.threads.pb.CollectionConfig}
 */
proto.threads.pb.NewDBRequest.prototype.addCollections = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.threads.pb.CollectionConfig, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.threads.pb.NewDBRequest} returns this
 */
proto.threads.pb.NewDBRequest.prototype.clearCollectionsList = function() {
  return this.setCollectionsList([]);
};


/**
 * optional bool block = 5;
 * @return {boolean}
 */
proto.threads.pb.NewDBRequest.prototype.getBlock = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.threads.pb.NewDBRequest} returns this
 */
proto.threads.pb.NewDBRequest.prototype.setBlock = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.threads.pb.NewDBFromAddrRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.NewDBFromAddrRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.NewDBFromAddrRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.NewDBFromAddrRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.NewDBFromAddrRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    addr: msg.getAddr_asB64(),
    key: msg.getKey_asB64(),
    logkey: msg.getLogkey_asB64(),
    name: jspb.Message.getFieldWithDefault(msg, 4, ""),
    collectionsList: jspb.Message.toObjectList(msg.getCollectionsList(),
    proto.threads.pb.CollectionConfig.toObject, includeInstance),
    block: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    threadkey: msg.getThreadkey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.NewDBFromAddrRequest}
 */
proto.threads.pb.NewDBFromAddrRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.NewDBFromAddrRequest;
  return proto.threads.pb.NewDBFromAddrRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.NewDBFromAddrRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.NewDBFromAddrRequest}
 */
proto.threads.pb.NewDBFromAddrRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddr(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLogkey(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.threads.pb.CollectionConfig;
      reader.readMessage(value,proto.threads.pb.CollectionConfig.deserializeBinaryFromReader);
      msg.addCollections(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBlock(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setThreadkey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.NewDBFromAddrRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.NewDBFromAddrRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.NewDBFromAddrRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.NewDBFromAddrRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddr_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getLogkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCollectionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.threads.pb.CollectionConfig.serializeBinaryToWriter
    );
  }
  f = message.getBlock();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getThreadkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
};


/**
 * optional bytes addr = 1;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.NewDBFromAddrRequest.prototype.getAddr = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes addr = 1;
 * This is a type-conversion wrapper around `getAddr()`
 * @return {string}
 */
proto.threads.pb.NewDBFromAddrRequest.prototype.getAddr_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddr()));
};


/**
 * optional bytes addr = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddr()`
 * @return {!Uint8Array}
 */
proto.threads.pb.NewDBFromAddrRequest.prototype.getAddr_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddr()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.pb.NewDBFromAddrRequest} returns this
 */
proto.threads.pb.NewDBFromAddrRequest.prototype.setAddr = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes key = 2;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.NewDBFromAddrRequest.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes key = 2;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.threads.pb.NewDBFromAddrRequest.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.threads.pb.NewDBFromAddrRequest.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.pb.NewDBFromAddrRequest} returns this
 */
proto.threads.pb.NewDBFromAddrRequest.prototype.setKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes logKey = 7;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.NewDBFromAddrRequest.prototype.getLogkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes logKey = 7;
 * This is a type-conversion wrapper around `getLogkey()`
 * @return {string}
 */
proto.threads.pb.NewDBFromAddrRequest.prototype.getLogkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLogkey()));
};


/**
 * optional bytes logKey = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLogkey()`
 * @return {!Uint8Array}
 */
proto.threads.pb.NewDBFromAddrRequest.prototype.getLogkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLogkey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.pb.NewDBFromAddrRequest} returns this
 */
proto.threads.pb.NewDBFromAddrRequest.prototype.setLogkey = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.threads.pb.NewDBFromAddrRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.threads.pb.NewDBFromAddrRequest} returns this
 */
proto.threads.pb.NewDBFromAddrRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated CollectionConfig collections = 3;
 * @return {!Array<!proto.threads.pb.CollectionConfig>}
 */
proto.threads.pb.NewDBFromAddrRequest.prototype.getCollectionsList = function() {
  return /** @type{!Array<!proto.threads.pb.CollectionConfig>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.threads.pb.CollectionConfig, 3));
};


/**
 * @param {!Array<!proto.threads.pb.CollectionConfig>} value
 * @return {!proto.threads.pb.NewDBFromAddrRequest} returns this
*/
proto.threads.pb.NewDBFromAddrRequest.prototype.setCollectionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.threads.pb.CollectionConfig=} opt_value
 * @param {number=} opt_index
 * @return {!proto.threads.pb.CollectionConfig}
 */
proto.threads.pb.NewDBFromAddrRequest.prototype.addCollections = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.threads.pb.CollectionConfig, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.threads.pb.NewDBFromAddrRequest} returns this
 */
proto.threads.pb.NewDBFromAddrRequest.prototype.clearCollectionsList = function() {
  return this.setCollectionsList([]);
};


/**
 * optional bool block = 5;
 * @return {boolean}
 */
proto.threads.pb.NewDBFromAddrRequest.prototype.getBlock = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.threads.pb.NewDBFromAddrRequest} returns this
 */
proto.threads.pb.NewDBFromAddrRequest.prototype.setBlock = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bytes threadKey = 6;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.NewDBFromAddrRequest.prototype.getThreadkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes threadKey = 6;
 * This is a type-conversion wrapper around `getThreadkey()`
 * @return {string}
 */
proto.threads.pb.NewDBFromAddrRequest.prototype.getThreadkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getThreadkey()));
};


/**
 * optional bytes threadKey = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getThreadkey()`
 * @return {!Uint8Array}
 */
proto.threads.pb.NewDBFromAddrRequest.prototype.getThreadkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getThreadkey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.pb.NewDBFromAddrRequest} returns this
 */
proto.threads.pb.NewDBFromAddrRequest.prototype.setThreadkey = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.threads.pb.CollectionConfig.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.CollectionConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.CollectionConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.CollectionConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.CollectionConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    schema: msg.getSchema_asB64(),
    indexesList: jspb.Message.toObjectList(msg.getIndexesList(),
    proto.threads.pb.Index.toObject, includeInstance),
    writevalidator: jspb.Message.getFieldWithDefault(msg, 4, ""),
    readfilter: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.CollectionConfig}
 */
proto.threads.pb.CollectionConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.CollectionConfig;
  return proto.threads.pb.CollectionConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.CollectionConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.CollectionConfig}
 */
proto.threads.pb.CollectionConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSchema(value);
      break;
    case 3:
      var value = new proto.threads.pb.Index;
      reader.readMessage(value,proto.threads.pb.Index.deserializeBinaryFromReader);
      msg.addIndexes(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setWritevalidator(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setReadfilter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.CollectionConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.CollectionConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.CollectionConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.CollectionConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSchema_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getIndexesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.threads.pb.Index.serializeBinaryToWriter
    );
  }
  f = message.getWritevalidator();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getReadfilter();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.threads.pb.CollectionConfig.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.threads.pb.CollectionConfig} returns this
 */
proto.threads.pb.CollectionConfig.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes schema = 2;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.CollectionConfig.prototype.getSchema = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes schema = 2;
 * This is a type-conversion wrapper around `getSchema()`
 * @return {string}
 */
proto.threads.pb.CollectionConfig.prototype.getSchema_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSchema()));
};


/**
 * optional bytes schema = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSchema()`
 * @return {!Uint8Array}
 */
proto.threads.pb.CollectionConfig.prototype.getSchema_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSchema()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.pb.CollectionConfig} returns this
 */
proto.threads.pb.CollectionConfig.prototype.setSchema = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated Index indexes = 3;
 * @return {!Array<!proto.threads.pb.Index>}
 */
proto.threads.pb.CollectionConfig.prototype.getIndexesList = function() {
  return /** @type{!Array<!proto.threads.pb.Index>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.threads.pb.Index, 3));
};


/**
 * @param {!Array<!proto.threads.pb.Index>} value
 * @return {!proto.threads.pb.CollectionConfig} returns this
*/
proto.threads.pb.CollectionConfig.prototype.setIndexesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.threads.pb.Index=} opt_value
 * @param {number=} opt_index
 * @return {!proto.threads.pb.Index}
 */
proto.threads.pb.CollectionConfig.prototype.addIndexes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.threads.pb.Index, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.threads.pb.CollectionConfig} returns this
 */
proto.threads.pb.CollectionConfig.prototype.clearIndexesList = function() {
  return this.setIndexesList([]);
};


/**
 * optional string writeValidator = 4;
 * @return {string}
 */
proto.threads.pb.CollectionConfig.prototype.getWritevalidator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.threads.pb.CollectionConfig} returns this
 */
proto.threads.pb.CollectionConfig.prototype.setWritevalidator = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string readFilter = 5;
 * @return {string}
 */
proto.threads.pb.CollectionConfig.prototype.getReadfilter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.threads.pb.CollectionConfig} returns this
 */
proto.threads.pb.CollectionConfig.prototype.setReadfilter = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.Index.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.Index.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.Index} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.Index.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: jspb.Message.getFieldWithDefault(msg, 1, ""),
    unique: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.Index}
 */
proto.threads.pb.Index.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.Index;
  return proto.threads.pb.Index.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.Index} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.Index}
 */
proto.threads.pb.Index.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUnique(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.Index.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.Index.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.Index} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.Index.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUnique();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string path = 1;
 * @return {string}
 */
proto.threads.pb.Index.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.threads.pb.Index} returns this
 */
proto.threads.pb.Index.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool unique = 2;
 * @return {boolean}
 */
proto.threads.pb.Index.prototype.getUnique = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.threads.pb.Index} returns this
 */
proto.threads.pb.Index.prototype.setUnique = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.NewDBReply.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.NewDBReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.NewDBReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.NewDBReply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.NewDBReply}
 */
proto.threads.pb.NewDBReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.NewDBReply;
  return proto.threads.pb.NewDBReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.NewDBReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.NewDBReply}
 */
proto.threads.pb.NewDBReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.NewDBReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.NewDBReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.NewDBReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.NewDBReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.ListDBsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.ListDBsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.ListDBsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.ListDBsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.ListDBsRequest}
 */
proto.threads.pb.ListDBsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.ListDBsRequest;
  return proto.threads.pb.ListDBsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.ListDBsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.ListDBsRequest}
 */
proto.threads.pb.ListDBsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.ListDBsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.ListDBsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.ListDBsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.ListDBsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.threads.pb.ListDBsReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.ListDBsReply.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.ListDBsReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.ListDBsReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.ListDBsReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    dbsList: jspb.Message.toObjectList(msg.getDbsList(),
    proto.threads.pb.ListDBsReply.DB.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.ListDBsReply}
 */
proto.threads.pb.ListDBsReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.ListDBsReply;
  return proto.threads.pb.ListDBsReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.ListDBsReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.ListDBsReply}
 */
proto.threads.pb.ListDBsReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.threads.pb.ListDBsReply.DB;
      reader.readMessage(value,proto.threads.pb.ListDBsReply.DB.deserializeBinaryFromReader);
      msg.addDbs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.ListDBsReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.ListDBsReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.ListDBsReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.ListDBsReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDbsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.threads.pb.ListDBsReply.DB.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.ListDBsReply.DB.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.ListDBsReply.DB.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.ListDBsReply.DB} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.ListDBsReply.DB.toObject = function(includeInstance, msg) {
  var f, obj = {
    dbid: msg.getDbid_asB64(),
    info: (f = msg.getInfo()) && proto.threads.pb.GetDBInfoReply.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.ListDBsReply.DB}
 */
proto.threads.pb.ListDBsReply.DB.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.ListDBsReply.DB;
  return proto.threads.pb.ListDBsReply.DB.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.ListDBsReply.DB} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.ListDBsReply.DB}
 */
proto.threads.pb.ListDBsReply.DB.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDbid(value);
      break;
    case 2:
      var value = new proto.threads.pb.GetDBInfoReply;
      reader.readMessage(value,proto.threads.pb.GetDBInfoReply.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.ListDBsReply.DB.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.ListDBsReply.DB.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.ListDBsReply.DB} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.ListDBsReply.DB.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDbid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.threads.pb.GetDBInfoReply.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes dbID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.ListDBsReply.DB.prototype.getDbid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes dbID = 1;
 * This is a type-conversion wrapper around `getDbid()`
 * @return {string}
 */
proto.threads.pb.ListDBsReply.DB.prototype.getDbid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDbid()));
};


/**
 * optional bytes dbID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDbid()`
 * @return {!Uint8Array}
 */
proto.threads.pb.ListDBsReply.DB.prototype.getDbid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDbid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.pb.ListDBsReply.DB} returns this
 */
proto.threads.pb.ListDBsReply.DB.prototype.setDbid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional GetDBInfoReply info = 2;
 * @return {?proto.threads.pb.GetDBInfoReply}
 */
proto.threads.pb.ListDBsReply.DB.prototype.getInfo = function() {
  return /** @type{?proto.threads.pb.GetDBInfoReply} */ (
    jspb.Message.getWrapperField(this, proto.threads.pb.GetDBInfoReply, 2));
};


/**
 * @param {?proto.threads.pb.GetDBInfoReply|undefined} value
 * @return {!proto.threads.pb.ListDBsReply.DB} returns this
*/
proto.threads.pb.ListDBsReply.DB.prototype.setInfo = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.threads.pb.ListDBsReply.DB} returns this
 */
proto.threads.pb.ListDBsReply.DB.prototype.clearInfo = function() {
  return this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.threads.pb.ListDBsReply.DB.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated DB dbs = 1;
 * @return {!Array<!proto.threads.pb.ListDBsReply.DB>}
 */
proto.threads.pb.ListDBsReply.prototype.getDbsList = function() {
  return /** @type{!Array<!proto.threads.pb.ListDBsReply.DB>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.threads.pb.ListDBsReply.DB, 1));
};


/**
 * @param {!Array<!proto.threads.pb.ListDBsReply.DB>} value
 * @return {!proto.threads.pb.ListDBsReply} returns this
*/
proto.threads.pb.ListDBsReply.prototype.setDbsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.threads.pb.ListDBsReply.DB=} opt_value
 * @param {number=} opt_index
 * @return {!proto.threads.pb.ListDBsReply.DB}
 */
proto.threads.pb.ListDBsReply.prototype.addDbs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.threads.pb.ListDBsReply.DB, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.threads.pb.ListDBsReply} returns this
 */
proto.threads.pb.ListDBsReply.prototype.clearDbsList = function() {
  return this.setDbsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.GetDBInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.GetDBInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.GetDBInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.GetDBInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    dbid: msg.getDbid_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.GetDBInfoRequest}
 */
proto.threads.pb.GetDBInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.GetDBInfoRequest;
  return proto.threads.pb.GetDBInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.GetDBInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.GetDBInfoRequest}
 */
proto.threads.pb.GetDBInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDbid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.GetDBInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.GetDBInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.GetDBInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.GetDBInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDbid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes dbID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.GetDBInfoRequest.prototype.getDbid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes dbID = 1;
 * This is a type-conversion wrapper around `getDbid()`
 * @return {string}
 */
proto.threads.pb.GetDBInfoRequest.prototype.getDbid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDbid()));
};


/**
 * optional bytes dbID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDbid()`
 * @return {!Uint8Array}
 */
proto.threads.pb.GetDBInfoRequest.prototype.getDbid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDbid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.pb.GetDBInfoRequest} returns this
 */
proto.threads.pb.GetDBInfoRequest.prototype.setDbid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.threads.pb.GetDBInfoReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.GetDBInfoReply.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.GetDBInfoReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.GetDBInfoReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.GetDBInfoReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    addrsList: msg.getAddrsList_asB64(),
    key: msg.getKey_asB64(),
    name: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.GetDBInfoReply}
 */
proto.threads.pb.GetDBInfoReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.GetDBInfoReply;
  return proto.threads.pb.GetDBInfoReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.GetDBInfoReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.GetDBInfoReply}
 */
proto.threads.pb.GetDBInfoReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addAddrs(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.GetDBInfoReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.GetDBInfoReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.GetDBInfoReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.GetDBInfoReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddrsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
  f = message.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * repeated bytes addrs = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.threads.pb.GetDBInfoReply.prototype.getAddrsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes addrs = 1;
 * This is a type-conversion wrapper around `getAddrsList()`
 * @return {!Array<string>}
 */
proto.threads.pb.GetDBInfoReply.prototype.getAddrsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getAddrsList()));
};


/**
 * repeated bytes addrs = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddrsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.threads.pb.GetDBInfoReply.prototype.getAddrsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getAddrsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.threads.pb.GetDBInfoReply} returns this
 */
proto.threads.pb.GetDBInfoReply.prototype.setAddrsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.threads.pb.GetDBInfoReply} returns this
 */
proto.threads.pb.GetDBInfoReply.prototype.addAddrs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.threads.pb.GetDBInfoReply} returns this
 */
proto.threads.pb.GetDBInfoReply.prototype.clearAddrsList = function() {
  return this.setAddrsList([]);
};


/**
 * optional bytes key = 2;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.GetDBInfoReply.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes key = 2;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.threads.pb.GetDBInfoReply.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.threads.pb.GetDBInfoReply.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.pb.GetDBInfoReply} returns this
 */
proto.threads.pb.GetDBInfoReply.prototype.setKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.threads.pb.GetDBInfoReply.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.threads.pb.GetDBInfoReply} returns this
 */
proto.threads.pb.GetDBInfoReply.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.DeleteDBRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.DeleteDBRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.DeleteDBRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.DeleteDBRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    dbid: msg.getDbid_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.DeleteDBRequest}
 */
proto.threads.pb.DeleteDBRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.DeleteDBRequest;
  return proto.threads.pb.DeleteDBRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.DeleteDBRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.DeleteDBRequest}
 */
proto.threads.pb.DeleteDBRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDbid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.DeleteDBRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.DeleteDBRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.DeleteDBRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.DeleteDBRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDbid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes dbID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.DeleteDBRequest.prototype.getDbid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes dbID = 1;
 * This is a type-conversion wrapper around `getDbid()`
 * @return {string}
 */
proto.threads.pb.DeleteDBRequest.prototype.getDbid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDbid()));
};


/**
 * optional bytes dbID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDbid()`
 * @return {!Uint8Array}
 */
proto.threads.pb.DeleteDBRequest.prototype.getDbid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDbid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.pb.DeleteDBRequest} returns this
 */
proto.threads.pb.DeleteDBRequest.prototype.setDbid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.DeleteDBReply.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.DeleteDBReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.DeleteDBReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.DeleteDBReply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.DeleteDBReply}
 */
proto.threads.pb.DeleteDBReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.DeleteDBReply;
  return proto.threads.pb.DeleteDBReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.DeleteDBReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.DeleteDBReply}
 */
proto.threads.pb.DeleteDBReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.DeleteDBReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.DeleteDBReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.DeleteDBReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.DeleteDBReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.NewCollectionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.NewCollectionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.NewCollectionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.NewCollectionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    dbid: msg.getDbid_asB64(),
    config: (f = msg.getConfig()) && proto.threads.pb.CollectionConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.NewCollectionRequest}
 */
proto.threads.pb.NewCollectionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.NewCollectionRequest;
  return proto.threads.pb.NewCollectionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.NewCollectionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.NewCollectionRequest}
 */
proto.threads.pb.NewCollectionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDbid(value);
      break;
    case 2:
      var value = new proto.threads.pb.CollectionConfig;
      reader.readMessage(value,proto.threads.pb.CollectionConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.NewCollectionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.NewCollectionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.NewCollectionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.NewCollectionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDbid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.threads.pb.CollectionConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes dbID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.NewCollectionRequest.prototype.getDbid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes dbID = 1;
 * This is a type-conversion wrapper around `getDbid()`
 * @return {string}
 */
proto.threads.pb.NewCollectionRequest.prototype.getDbid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDbid()));
};


/**
 * optional bytes dbID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDbid()`
 * @return {!Uint8Array}
 */
proto.threads.pb.NewCollectionRequest.prototype.getDbid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDbid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.pb.NewCollectionRequest} returns this
 */
proto.threads.pb.NewCollectionRequest.prototype.setDbid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional CollectionConfig config = 2;
 * @return {?proto.threads.pb.CollectionConfig}
 */
proto.threads.pb.NewCollectionRequest.prototype.getConfig = function() {
  return /** @type{?proto.threads.pb.CollectionConfig} */ (
    jspb.Message.getWrapperField(this, proto.threads.pb.CollectionConfig, 2));
};


/**
 * @param {?proto.threads.pb.CollectionConfig|undefined} value
 * @return {!proto.threads.pb.NewCollectionRequest} returns this
*/
proto.threads.pb.NewCollectionRequest.prototype.setConfig = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.threads.pb.NewCollectionRequest} returns this
 */
proto.threads.pb.NewCollectionRequest.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.threads.pb.NewCollectionRequest.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.NewCollectionReply.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.NewCollectionReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.NewCollectionReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.NewCollectionReply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.NewCollectionReply}
 */
proto.threads.pb.NewCollectionReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.NewCollectionReply;
  return proto.threads.pb.NewCollectionReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.NewCollectionReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.NewCollectionReply}
 */
proto.threads.pb.NewCollectionReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.NewCollectionReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.NewCollectionReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.NewCollectionReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.NewCollectionReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.UpdateCollectionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.UpdateCollectionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.UpdateCollectionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.UpdateCollectionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    dbid: msg.getDbid_asB64(),
    config: (f = msg.getConfig()) && proto.threads.pb.CollectionConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.UpdateCollectionRequest}
 */
proto.threads.pb.UpdateCollectionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.UpdateCollectionRequest;
  return proto.threads.pb.UpdateCollectionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.UpdateCollectionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.UpdateCollectionRequest}
 */
proto.threads.pb.UpdateCollectionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDbid(value);
      break;
    case 2:
      var value = new proto.threads.pb.CollectionConfig;
      reader.readMessage(value,proto.threads.pb.CollectionConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.UpdateCollectionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.UpdateCollectionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.UpdateCollectionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.UpdateCollectionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDbid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.threads.pb.CollectionConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes dbID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.UpdateCollectionRequest.prototype.getDbid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes dbID = 1;
 * This is a type-conversion wrapper around `getDbid()`
 * @return {string}
 */
proto.threads.pb.UpdateCollectionRequest.prototype.getDbid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDbid()));
};


/**
 * optional bytes dbID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDbid()`
 * @return {!Uint8Array}
 */
proto.threads.pb.UpdateCollectionRequest.prototype.getDbid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDbid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.pb.UpdateCollectionRequest} returns this
 */
proto.threads.pb.UpdateCollectionRequest.prototype.setDbid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional CollectionConfig config = 2;
 * @return {?proto.threads.pb.CollectionConfig}
 */
proto.threads.pb.UpdateCollectionRequest.prototype.getConfig = function() {
  return /** @type{?proto.threads.pb.CollectionConfig} */ (
    jspb.Message.getWrapperField(this, proto.threads.pb.CollectionConfig, 2));
};


/**
 * @param {?proto.threads.pb.CollectionConfig|undefined} value
 * @return {!proto.threads.pb.UpdateCollectionRequest} returns this
*/
proto.threads.pb.UpdateCollectionRequest.prototype.setConfig = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.threads.pb.UpdateCollectionRequest} returns this
 */
proto.threads.pb.UpdateCollectionRequest.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.threads.pb.UpdateCollectionRequest.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.UpdateCollectionReply.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.UpdateCollectionReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.UpdateCollectionReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.UpdateCollectionReply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.UpdateCollectionReply}
 */
proto.threads.pb.UpdateCollectionReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.UpdateCollectionReply;
  return proto.threads.pb.UpdateCollectionReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.UpdateCollectionReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.UpdateCollectionReply}
 */
proto.threads.pb.UpdateCollectionReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.UpdateCollectionReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.UpdateCollectionReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.UpdateCollectionReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.UpdateCollectionReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.DeleteCollectionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.DeleteCollectionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.DeleteCollectionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.DeleteCollectionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    dbid: msg.getDbid_asB64(),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.DeleteCollectionRequest}
 */
proto.threads.pb.DeleteCollectionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.DeleteCollectionRequest;
  return proto.threads.pb.DeleteCollectionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.DeleteCollectionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.DeleteCollectionRequest}
 */
proto.threads.pb.DeleteCollectionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDbid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.DeleteCollectionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.DeleteCollectionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.DeleteCollectionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.DeleteCollectionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDbid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bytes dbID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.DeleteCollectionRequest.prototype.getDbid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes dbID = 1;
 * This is a type-conversion wrapper around `getDbid()`
 * @return {string}
 */
proto.threads.pb.DeleteCollectionRequest.prototype.getDbid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDbid()));
};


/**
 * optional bytes dbID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDbid()`
 * @return {!Uint8Array}
 */
proto.threads.pb.DeleteCollectionRequest.prototype.getDbid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDbid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.pb.DeleteCollectionRequest} returns this
 */
proto.threads.pb.DeleteCollectionRequest.prototype.setDbid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.threads.pb.DeleteCollectionRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.threads.pb.DeleteCollectionRequest} returns this
 */
proto.threads.pb.DeleteCollectionRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.DeleteCollectionReply.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.DeleteCollectionReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.DeleteCollectionReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.DeleteCollectionReply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.DeleteCollectionReply}
 */
proto.threads.pb.DeleteCollectionReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.DeleteCollectionReply;
  return proto.threads.pb.DeleteCollectionReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.DeleteCollectionReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.DeleteCollectionReply}
 */
proto.threads.pb.DeleteCollectionReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.DeleteCollectionReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.DeleteCollectionReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.DeleteCollectionReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.DeleteCollectionReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.GetCollectionInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.GetCollectionInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.GetCollectionInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.GetCollectionInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    dbid: msg.getDbid_asB64(),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.GetCollectionInfoRequest}
 */
proto.threads.pb.GetCollectionInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.GetCollectionInfoRequest;
  return proto.threads.pb.GetCollectionInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.GetCollectionInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.GetCollectionInfoRequest}
 */
proto.threads.pb.GetCollectionInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDbid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.GetCollectionInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.GetCollectionInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.GetCollectionInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.GetCollectionInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDbid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bytes dbID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.GetCollectionInfoRequest.prototype.getDbid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes dbID = 1;
 * This is a type-conversion wrapper around `getDbid()`
 * @return {string}
 */
proto.threads.pb.GetCollectionInfoRequest.prototype.getDbid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDbid()));
};


/**
 * optional bytes dbID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDbid()`
 * @return {!Uint8Array}
 */
proto.threads.pb.GetCollectionInfoRequest.prototype.getDbid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDbid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.pb.GetCollectionInfoRequest} returns this
 */
proto.threads.pb.GetCollectionInfoRequest.prototype.setDbid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.threads.pb.GetCollectionInfoRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.threads.pb.GetCollectionInfoRequest} returns this
 */
proto.threads.pb.GetCollectionInfoRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.threads.pb.GetCollectionInfoReply.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.GetCollectionInfoReply.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.GetCollectionInfoReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.GetCollectionInfoReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.GetCollectionInfoReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    schema: msg.getSchema_asB64(),
    indexesList: jspb.Message.toObjectList(msg.getIndexesList(),
    proto.threads.pb.Index.toObject, includeInstance),
    writevalidator: jspb.Message.getFieldWithDefault(msg, 4, ""),
    readfilter: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.GetCollectionInfoReply}
 */
proto.threads.pb.GetCollectionInfoReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.GetCollectionInfoReply;
  return proto.threads.pb.GetCollectionInfoReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.GetCollectionInfoReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.GetCollectionInfoReply}
 */
proto.threads.pb.GetCollectionInfoReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSchema(value);
      break;
    case 3:
      var value = new proto.threads.pb.Index;
      reader.readMessage(value,proto.threads.pb.Index.deserializeBinaryFromReader);
      msg.addIndexes(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setWritevalidator(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setReadfilter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.GetCollectionInfoReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.GetCollectionInfoReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.GetCollectionInfoReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.GetCollectionInfoReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSchema_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getIndexesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.threads.pb.Index.serializeBinaryToWriter
    );
  }
  f = message.getWritevalidator();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getReadfilter();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.threads.pb.GetCollectionInfoReply.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.threads.pb.GetCollectionInfoReply} returns this
 */
proto.threads.pb.GetCollectionInfoReply.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes schema = 2;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.GetCollectionInfoReply.prototype.getSchema = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes schema = 2;
 * This is a type-conversion wrapper around `getSchema()`
 * @return {string}
 */
proto.threads.pb.GetCollectionInfoReply.prototype.getSchema_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSchema()));
};


/**
 * optional bytes schema = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSchema()`
 * @return {!Uint8Array}
 */
proto.threads.pb.GetCollectionInfoReply.prototype.getSchema_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSchema()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.pb.GetCollectionInfoReply} returns this
 */
proto.threads.pb.GetCollectionInfoReply.prototype.setSchema = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated Index indexes = 3;
 * @return {!Array<!proto.threads.pb.Index>}
 */
proto.threads.pb.GetCollectionInfoReply.prototype.getIndexesList = function() {
  return /** @type{!Array<!proto.threads.pb.Index>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.threads.pb.Index, 3));
};


/**
 * @param {!Array<!proto.threads.pb.Index>} value
 * @return {!proto.threads.pb.GetCollectionInfoReply} returns this
*/
proto.threads.pb.GetCollectionInfoReply.prototype.setIndexesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.threads.pb.Index=} opt_value
 * @param {number=} opt_index
 * @return {!proto.threads.pb.Index}
 */
proto.threads.pb.GetCollectionInfoReply.prototype.addIndexes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.threads.pb.Index, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.threads.pb.GetCollectionInfoReply} returns this
 */
proto.threads.pb.GetCollectionInfoReply.prototype.clearIndexesList = function() {
  return this.setIndexesList([]);
};


/**
 * optional string writeValidator = 4;
 * @return {string}
 */
proto.threads.pb.GetCollectionInfoReply.prototype.getWritevalidator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.threads.pb.GetCollectionInfoReply} returns this
 */
proto.threads.pb.GetCollectionInfoReply.prototype.setWritevalidator = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string readFilter = 5;
 * @return {string}
 */
proto.threads.pb.GetCollectionInfoReply.prototype.getReadfilter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.threads.pb.GetCollectionInfoReply} returns this
 */
proto.threads.pb.GetCollectionInfoReply.prototype.setReadfilter = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.GetCollectionIndexesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.GetCollectionIndexesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.GetCollectionIndexesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.GetCollectionIndexesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    dbid: msg.getDbid_asB64(),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.GetCollectionIndexesRequest}
 */
proto.threads.pb.GetCollectionIndexesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.GetCollectionIndexesRequest;
  return proto.threads.pb.GetCollectionIndexesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.GetCollectionIndexesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.GetCollectionIndexesRequest}
 */
proto.threads.pb.GetCollectionIndexesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDbid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.GetCollectionIndexesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.GetCollectionIndexesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.GetCollectionIndexesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.GetCollectionIndexesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDbid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bytes dbID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.GetCollectionIndexesRequest.prototype.getDbid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes dbID = 1;
 * This is a type-conversion wrapper around `getDbid()`
 * @return {string}
 */
proto.threads.pb.GetCollectionIndexesRequest.prototype.getDbid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDbid()));
};


/**
 * optional bytes dbID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDbid()`
 * @return {!Uint8Array}
 */
proto.threads.pb.GetCollectionIndexesRequest.prototype.getDbid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDbid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.pb.GetCollectionIndexesRequest} returns this
 */
proto.threads.pb.GetCollectionIndexesRequest.prototype.setDbid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.threads.pb.GetCollectionIndexesRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.threads.pb.GetCollectionIndexesRequest} returns this
 */
proto.threads.pb.GetCollectionIndexesRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.threads.pb.GetCollectionIndexesReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.GetCollectionIndexesReply.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.GetCollectionIndexesReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.GetCollectionIndexesReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.GetCollectionIndexesReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    indexesList: jspb.Message.toObjectList(msg.getIndexesList(),
    proto.threads.pb.Index.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.GetCollectionIndexesReply}
 */
proto.threads.pb.GetCollectionIndexesReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.GetCollectionIndexesReply;
  return proto.threads.pb.GetCollectionIndexesReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.GetCollectionIndexesReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.GetCollectionIndexesReply}
 */
proto.threads.pb.GetCollectionIndexesReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.threads.pb.Index;
      reader.readMessage(value,proto.threads.pb.Index.deserializeBinaryFromReader);
      msg.addIndexes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.GetCollectionIndexesReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.GetCollectionIndexesReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.GetCollectionIndexesReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.GetCollectionIndexesReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndexesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.threads.pb.Index.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Index indexes = 1;
 * @return {!Array<!proto.threads.pb.Index>}
 */
proto.threads.pb.GetCollectionIndexesReply.prototype.getIndexesList = function() {
  return /** @type{!Array<!proto.threads.pb.Index>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.threads.pb.Index, 1));
};


/**
 * @param {!Array<!proto.threads.pb.Index>} value
 * @return {!proto.threads.pb.GetCollectionIndexesReply} returns this
*/
proto.threads.pb.GetCollectionIndexesReply.prototype.setIndexesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.threads.pb.Index=} opt_value
 * @param {number=} opt_index
 * @return {!proto.threads.pb.Index}
 */
proto.threads.pb.GetCollectionIndexesReply.prototype.addIndexes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.threads.pb.Index, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.threads.pb.GetCollectionIndexesReply} returns this
 */
proto.threads.pb.GetCollectionIndexesReply.prototype.clearIndexesList = function() {
  return this.setIndexesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.ListCollectionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.ListCollectionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.ListCollectionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.ListCollectionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    dbid: msg.getDbid_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.ListCollectionsRequest}
 */
proto.threads.pb.ListCollectionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.ListCollectionsRequest;
  return proto.threads.pb.ListCollectionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.ListCollectionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.ListCollectionsRequest}
 */
proto.threads.pb.ListCollectionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDbid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.ListCollectionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.ListCollectionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.ListCollectionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.ListCollectionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDbid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes dbID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.ListCollectionsRequest.prototype.getDbid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes dbID = 1;
 * This is a type-conversion wrapper around `getDbid()`
 * @return {string}
 */
proto.threads.pb.ListCollectionsRequest.prototype.getDbid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDbid()));
};


/**
 * optional bytes dbID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDbid()`
 * @return {!Uint8Array}
 */
proto.threads.pb.ListCollectionsRequest.prototype.getDbid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDbid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.pb.ListCollectionsRequest} returns this
 */
proto.threads.pb.ListCollectionsRequest.prototype.setDbid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.threads.pb.ListCollectionsReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.ListCollectionsReply.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.ListCollectionsReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.ListCollectionsReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.ListCollectionsReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    collectionsList: jspb.Message.toObjectList(msg.getCollectionsList(),
    proto.threads.pb.GetCollectionInfoReply.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.ListCollectionsReply}
 */
proto.threads.pb.ListCollectionsReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.ListCollectionsReply;
  return proto.threads.pb.ListCollectionsReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.ListCollectionsReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.ListCollectionsReply}
 */
proto.threads.pb.ListCollectionsReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.threads.pb.GetCollectionInfoReply;
      reader.readMessage(value,proto.threads.pb.GetCollectionInfoReply.deserializeBinaryFromReader);
      msg.addCollections(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.ListCollectionsReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.ListCollectionsReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.ListCollectionsReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.ListCollectionsReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCollectionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.threads.pb.GetCollectionInfoReply.serializeBinaryToWriter
    );
  }
};


/**
 * repeated GetCollectionInfoReply collections = 1;
 * @return {!Array<!proto.threads.pb.GetCollectionInfoReply>}
 */
proto.threads.pb.ListCollectionsReply.prototype.getCollectionsList = function() {
  return /** @type{!Array<!proto.threads.pb.GetCollectionInfoReply>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.threads.pb.GetCollectionInfoReply, 1));
};


/**
 * @param {!Array<!proto.threads.pb.GetCollectionInfoReply>} value
 * @return {!proto.threads.pb.ListCollectionsReply} returns this
*/
proto.threads.pb.ListCollectionsReply.prototype.setCollectionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.threads.pb.GetCollectionInfoReply=} opt_value
 * @param {number=} opt_index
 * @return {!proto.threads.pb.GetCollectionInfoReply}
 */
proto.threads.pb.ListCollectionsReply.prototype.addCollections = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.threads.pb.GetCollectionInfoReply, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.threads.pb.ListCollectionsReply} returns this
 */
proto.threads.pb.ListCollectionsReply.prototype.clearCollectionsList = function() {
  return this.setCollectionsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.threads.pb.CreateRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.CreateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.CreateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.CreateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.CreateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    dbid: msg.getDbid_asB64(),
    collectionname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    instancesList: msg.getInstancesList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.CreateRequest}
 */
proto.threads.pb.CreateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.CreateRequest;
  return proto.threads.pb.CreateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.CreateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.CreateRequest}
 */
proto.threads.pb.CreateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDbid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollectionname(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addInstances(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.CreateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.CreateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.CreateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.CreateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDbid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCollectionname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getInstancesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes dbID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.CreateRequest.prototype.getDbid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes dbID = 1;
 * This is a type-conversion wrapper around `getDbid()`
 * @return {string}
 */
proto.threads.pb.CreateRequest.prototype.getDbid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDbid()));
};


/**
 * optional bytes dbID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDbid()`
 * @return {!Uint8Array}
 */
proto.threads.pb.CreateRequest.prototype.getDbid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDbid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.pb.CreateRequest} returns this
 */
proto.threads.pb.CreateRequest.prototype.setDbid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string collectionName = 2;
 * @return {string}
 */
proto.threads.pb.CreateRequest.prototype.getCollectionname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.threads.pb.CreateRequest} returns this
 */
proto.threads.pb.CreateRequest.prototype.setCollectionname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated bytes instances = 3;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.threads.pb.CreateRequest.prototype.getInstancesList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * repeated bytes instances = 3;
 * This is a type-conversion wrapper around `getInstancesList()`
 * @return {!Array<string>}
 */
proto.threads.pb.CreateRequest.prototype.getInstancesList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getInstancesList()));
};


/**
 * repeated bytes instances = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInstancesList()`
 * @return {!Array<!Uint8Array>}
 */
proto.threads.pb.CreateRequest.prototype.getInstancesList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getInstancesList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.threads.pb.CreateRequest} returns this
 */
proto.threads.pb.CreateRequest.prototype.setInstancesList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.threads.pb.CreateRequest} returns this
 */
proto.threads.pb.CreateRequest.prototype.addInstances = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.threads.pb.CreateRequest} returns this
 */
proto.threads.pb.CreateRequest.prototype.clearInstancesList = function() {
  return this.setInstancesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.threads.pb.CreateReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.CreateReply.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.CreateReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.CreateReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.CreateReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    instanceidsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    transactionerror: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.CreateReply}
 */
proto.threads.pb.CreateReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.CreateReply;
  return proto.threads.pb.CreateReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.CreateReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.CreateReply}
 */
proto.threads.pb.CreateReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addInstanceids(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionerror(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.CreateReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.CreateReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.CreateReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.CreateReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstanceidsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getTransactionerror();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated string instanceIDs = 1;
 * @return {!Array<string>}
 */
proto.threads.pb.CreateReply.prototype.getInstanceidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.threads.pb.CreateReply} returns this
 */
proto.threads.pb.CreateReply.prototype.setInstanceidsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.threads.pb.CreateReply} returns this
 */
proto.threads.pb.CreateReply.prototype.addInstanceids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.threads.pb.CreateReply} returns this
 */
proto.threads.pb.CreateReply.prototype.clearInstanceidsList = function() {
  return this.setInstanceidsList([]);
};


/**
 * optional string transactionError = 2;
 * @return {string}
 */
proto.threads.pb.CreateReply.prototype.getTransactionerror = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.threads.pb.CreateReply} returns this
 */
proto.threads.pb.CreateReply.prototype.setTransactionerror = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.threads.pb.VerifyRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.VerifyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.VerifyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.VerifyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.VerifyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    dbid: msg.getDbid_asB64(),
    collectionname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    instancesList: msg.getInstancesList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.VerifyRequest}
 */
proto.threads.pb.VerifyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.VerifyRequest;
  return proto.threads.pb.VerifyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.VerifyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.VerifyRequest}
 */
proto.threads.pb.VerifyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDbid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollectionname(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addInstances(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.VerifyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.VerifyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.VerifyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.VerifyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDbid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCollectionname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getInstancesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes dbID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.VerifyRequest.prototype.getDbid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes dbID = 1;
 * This is a type-conversion wrapper around `getDbid()`
 * @return {string}
 */
proto.threads.pb.VerifyRequest.prototype.getDbid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDbid()));
};


/**
 * optional bytes dbID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDbid()`
 * @return {!Uint8Array}
 */
proto.threads.pb.VerifyRequest.prototype.getDbid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDbid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.pb.VerifyRequest} returns this
 */
proto.threads.pb.VerifyRequest.prototype.setDbid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string collectionName = 2;
 * @return {string}
 */
proto.threads.pb.VerifyRequest.prototype.getCollectionname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.threads.pb.VerifyRequest} returns this
 */
proto.threads.pb.VerifyRequest.prototype.setCollectionname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated bytes instances = 3;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.threads.pb.VerifyRequest.prototype.getInstancesList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * repeated bytes instances = 3;
 * This is a type-conversion wrapper around `getInstancesList()`
 * @return {!Array<string>}
 */
proto.threads.pb.VerifyRequest.prototype.getInstancesList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getInstancesList()));
};


/**
 * repeated bytes instances = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInstancesList()`
 * @return {!Array<!Uint8Array>}
 */
proto.threads.pb.VerifyRequest.prototype.getInstancesList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getInstancesList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.threads.pb.VerifyRequest} returns this
 */
proto.threads.pb.VerifyRequest.prototype.setInstancesList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.threads.pb.VerifyRequest} returns this
 */
proto.threads.pb.VerifyRequest.prototype.addInstances = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.threads.pb.VerifyRequest} returns this
 */
proto.threads.pb.VerifyRequest.prototype.clearInstancesList = function() {
  return this.setInstancesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.VerifyReply.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.VerifyReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.VerifyReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.VerifyReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionerror: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.VerifyReply}
 */
proto.threads.pb.VerifyReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.VerifyReply;
  return proto.threads.pb.VerifyReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.VerifyReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.VerifyReply}
 */
proto.threads.pb.VerifyReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionerror(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.VerifyReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.VerifyReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.VerifyReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.VerifyReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionerror();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string transactionError = 1;
 * @return {string}
 */
proto.threads.pb.VerifyReply.prototype.getTransactionerror = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.threads.pb.VerifyReply} returns this
 */
proto.threads.pb.VerifyReply.prototype.setTransactionerror = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.threads.pb.SaveRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.SaveRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.SaveRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.SaveRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.SaveRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    dbid: msg.getDbid_asB64(),
    collectionname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    instancesList: msg.getInstancesList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.SaveRequest}
 */
proto.threads.pb.SaveRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.SaveRequest;
  return proto.threads.pb.SaveRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.SaveRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.SaveRequest}
 */
proto.threads.pb.SaveRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDbid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollectionname(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addInstances(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.SaveRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.SaveRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.SaveRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.SaveRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDbid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCollectionname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getInstancesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes dbID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.SaveRequest.prototype.getDbid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes dbID = 1;
 * This is a type-conversion wrapper around `getDbid()`
 * @return {string}
 */
proto.threads.pb.SaveRequest.prototype.getDbid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDbid()));
};


/**
 * optional bytes dbID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDbid()`
 * @return {!Uint8Array}
 */
proto.threads.pb.SaveRequest.prototype.getDbid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDbid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.pb.SaveRequest} returns this
 */
proto.threads.pb.SaveRequest.prototype.setDbid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string collectionName = 2;
 * @return {string}
 */
proto.threads.pb.SaveRequest.prototype.getCollectionname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.threads.pb.SaveRequest} returns this
 */
proto.threads.pb.SaveRequest.prototype.setCollectionname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated bytes instances = 3;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.threads.pb.SaveRequest.prototype.getInstancesList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * repeated bytes instances = 3;
 * This is a type-conversion wrapper around `getInstancesList()`
 * @return {!Array<string>}
 */
proto.threads.pb.SaveRequest.prototype.getInstancesList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getInstancesList()));
};


/**
 * repeated bytes instances = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInstancesList()`
 * @return {!Array<!Uint8Array>}
 */
proto.threads.pb.SaveRequest.prototype.getInstancesList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getInstancesList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.threads.pb.SaveRequest} returns this
 */
proto.threads.pb.SaveRequest.prototype.setInstancesList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.threads.pb.SaveRequest} returns this
 */
proto.threads.pb.SaveRequest.prototype.addInstances = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.threads.pb.SaveRequest} returns this
 */
proto.threads.pb.SaveRequest.prototype.clearInstancesList = function() {
  return this.setInstancesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.SaveReply.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.SaveReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.SaveReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.SaveReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionerror: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.SaveReply}
 */
proto.threads.pb.SaveReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.SaveReply;
  return proto.threads.pb.SaveReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.SaveReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.SaveReply}
 */
proto.threads.pb.SaveReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionerror(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.SaveReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.SaveReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.SaveReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.SaveReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionerror();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string transactionError = 1;
 * @return {string}
 */
proto.threads.pb.SaveReply.prototype.getTransactionerror = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.threads.pb.SaveReply} returns this
 */
proto.threads.pb.SaveReply.prototype.setTransactionerror = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.threads.pb.DeleteRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.DeleteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.DeleteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.DeleteRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.DeleteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    dbid: msg.getDbid_asB64(),
    collectionname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    instanceidsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.DeleteRequest}
 */
proto.threads.pb.DeleteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.DeleteRequest;
  return proto.threads.pb.DeleteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.DeleteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.DeleteRequest}
 */
proto.threads.pb.DeleteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDbid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollectionname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addInstanceids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.DeleteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.DeleteRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.DeleteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.DeleteRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDbid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCollectionname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getInstanceidsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional bytes dbID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.DeleteRequest.prototype.getDbid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes dbID = 1;
 * This is a type-conversion wrapper around `getDbid()`
 * @return {string}
 */
proto.threads.pb.DeleteRequest.prototype.getDbid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDbid()));
};


/**
 * optional bytes dbID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDbid()`
 * @return {!Uint8Array}
 */
proto.threads.pb.DeleteRequest.prototype.getDbid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDbid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.pb.DeleteRequest} returns this
 */
proto.threads.pb.DeleteRequest.prototype.setDbid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string collectionName = 2;
 * @return {string}
 */
proto.threads.pb.DeleteRequest.prototype.getCollectionname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.threads.pb.DeleteRequest} returns this
 */
proto.threads.pb.DeleteRequest.prototype.setCollectionname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string instanceIDs = 3;
 * @return {!Array<string>}
 */
proto.threads.pb.DeleteRequest.prototype.getInstanceidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.threads.pb.DeleteRequest} returns this
 */
proto.threads.pb.DeleteRequest.prototype.setInstanceidsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.threads.pb.DeleteRequest} returns this
 */
proto.threads.pb.DeleteRequest.prototype.addInstanceids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.threads.pb.DeleteRequest} returns this
 */
proto.threads.pb.DeleteRequest.prototype.clearInstanceidsList = function() {
  return this.setInstanceidsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.DeleteReply.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.DeleteReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.DeleteReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.DeleteReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionerror: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.DeleteReply}
 */
proto.threads.pb.DeleteReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.DeleteReply;
  return proto.threads.pb.DeleteReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.DeleteReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.DeleteReply}
 */
proto.threads.pb.DeleteReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionerror(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.DeleteReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.DeleteReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.DeleteReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.DeleteReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionerror();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string transactionError = 1;
 * @return {string}
 */
proto.threads.pb.DeleteReply.prototype.getTransactionerror = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.threads.pb.DeleteReply} returns this
 */
proto.threads.pb.DeleteReply.prototype.setTransactionerror = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.threads.pb.HasRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.HasRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.HasRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.HasRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.HasRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    dbid: msg.getDbid_asB64(),
    collectionname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    instanceidsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.HasRequest}
 */
proto.threads.pb.HasRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.HasRequest;
  return proto.threads.pb.HasRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.HasRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.HasRequest}
 */
proto.threads.pb.HasRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDbid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollectionname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addInstanceids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.HasRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.HasRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.HasRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.HasRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDbid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCollectionname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getInstanceidsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional bytes dbID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.HasRequest.prototype.getDbid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes dbID = 1;
 * This is a type-conversion wrapper around `getDbid()`
 * @return {string}
 */
proto.threads.pb.HasRequest.prototype.getDbid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDbid()));
};


/**
 * optional bytes dbID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDbid()`
 * @return {!Uint8Array}
 */
proto.threads.pb.HasRequest.prototype.getDbid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDbid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.pb.HasRequest} returns this
 */
proto.threads.pb.HasRequest.prototype.setDbid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string collectionName = 2;
 * @return {string}
 */
proto.threads.pb.HasRequest.prototype.getCollectionname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.threads.pb.HasRequest} returns this
 */
proto.threads.pb.HasRequest.prototype.setCollectionname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string instanceIDs = 3;
 * @return {!Array<string>}
 */
proto.threads.pb.HasRequest.prototype.getInstanceidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.threads.pb.HasRequest} returns this
 */
proto.threads.pb.HasRequest.prototype.setInstanceidsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.threads.pb.HasRequest} returns this
 */
proto.threads.pb.HasRequest.prototype.addInstanceids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.threads.pb.HasRequest} returns this
 */
proto.threads.pb.HasRequest.prototype.clearInstanceidsList = function() {
  return this.setInstanceidsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.HasReply.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.HasReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.HasReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.HasReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    exists: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    transactionerror: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.HasReply}
 */
proto.threads.pb.HasReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.HasReply;
  return proto.threads.pb.HasReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.HasReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.HasReply}
 */
proto.threads.pb.HasReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExists(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionerror(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.HasReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.HasReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.HasReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.HasReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExists();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getTransactionerror();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool exists = 1;
 * @return {boolean}
 */
proto.threads.pb.HasReply.prototype.getExists = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.threads.pb.HasReply} returns this
 */
proto.threads.pb.HasReply.prototype.setExists = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string transactionError = 2;
 * @return {string}
 */
proto.threads.pb.HasReply.prototype.getTransactionerror = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.threads.pb.HasReply} returns this
 */
proto.threads.pb.HasReply.prototype.setTransactionerror = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.FindRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.FindRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.FindRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.FindRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    dbid: msg.getDbid_asB64(),
    collectionname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    queryjson: msg.getQueryjson_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.FindRequest}
 */
proto.threads.pb.FindRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.FindRequest;
  return proto.threads.pb.FindRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.FindRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.FindRequest}
 */
proto.threads.pb.FindRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDbid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollectionname(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setQueryjson(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.FindRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.FindRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.FindRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.FindRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDbid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCollectionname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getQueryjson_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes dbID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.FindRequest.prototype.getDbid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes dbID = 1;
 * This is a type-conversion wrapper around `getDbid()`
 * @return {string}
 */
proto.threads.pb.FindRequest.prototype.getDbid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDbid()));
};


/**
 * optional bytes dbID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDbid()`
 * @return {!Uint8Array}
 */
proto.threads.pb.FindRequest.prototype.getDbid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDbid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.pb.FindRequest} returns this
 */
proto.threads.pb.FindRequest.prototype.setDbid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string collectionName = 2;
 * @return {string}
 */
proto.threads.pb.FindRequest.prototype.getCollectionname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.threads.pb.FindRequest} returns this
 */
proto.threads.pb.FindRequest.prototype.setCollectionname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes queryJSON = 3;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.FindRequest.prototype.getQueryjson = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes queryJSON = 3;
 * This is a type-conversion wrapper around `getQueryjson()`
 * @return {string}
 */
proto.threads.pb.FindRequest.prototype.getQueryjson_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getQueryjson()));
};


/**
 * optional bytes queryJSON = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getQueryjson()`
 * @return {!Uint8Array}
 */
proto.threads.pb.FindRequest.prototype.getQueryjson_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getQueryjson()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.pb.FindRequest} returns this
 */
proto.threads.pb.FindRequest.prototype.setQueryjson = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.threads.pb.FindReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.FindReply.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.FindReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.FindReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.FindReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    instancesList: msg.getInstancesList_asB64(),
    transactionerror: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.FindReply}
 */
proto.threads.pb.FindReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.FindReply;
  return proto.threads.pb.FindReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.FindReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.FindReply}
 */
proto.threads.pb.FindReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addInstances(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionerror(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.FindReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.FindReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.FindReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.FindReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstancesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
  f = message.getTransactionerror();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated bytes instances = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.threads.pb.FindReply.prototype.getInstancesList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes instances = 1;
 * This is a type-conversion wrapper around `getInstancesList()`
 * @return {!Array<string>}
 */
proto.threads.pb.FindReply.prototype.getInstancesList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getInstancesList()));
};


/**
 * repeated bytes instances = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInstancesList()`
 * @return {!Array<!Uint8Array>}
 */
proto.threads.pb.FindReply.prototype.getInstancesList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getInstancesList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.threads.pb.FindReply} returns this
 */
proto.threads.pb.FindReply.prototype.setInstancesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.threads.pb.FindReply} returns this
 */
proto.threads.pb.FindReply.prototype.addInstances = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.threads.pb.FindReply} returns this
 */
proto.threads.pb.FindReply.prototype.clearInstancesList = function() {
  return this.setInstancesList([]);
};


/**
 * optional string transactionError = 2;
 * @return {string}
 */
proto.threads.pb.FindReply.prototype.getTransactionerror = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.threads.pb.FindReply} returns this
 */
proto.threads.pb.FindReply.prototype.setTransactionerror = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.FindByIDRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.FindByIDRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.FindByIDRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.FindByIDRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    dbid: msg.getDbid_asB64(),
    collectionname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    instanceid: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.FindByIDRequest}
 */
proto.threads.pb.FindByIDRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.FindByIDRequest;
  return proto.threads.pb.FindByIDRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.FindByIDRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.FindByIDRequest}
 */
proto.threads.pb.FindByIDRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDbid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollectionname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setInstanceid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.FindByIDRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.FindByIDRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.FindByIDRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.FindByIDRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDbid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCollectionname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getInstanceid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional bytes dbID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.FindByIDRequest.prototype.getDbid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes dbID = 1;
 * This is a type-conversion wrapper around `getDbid()`
 * @return {string}
 */
proto.threads.pb.FindByIDRequest.prototype.getDbid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDbid()));
};


/**
 * optional bytes dbID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDbid()`
 * @return {!Uint8Array}
 */
proto.threads.pb.FindByIDRequest.prototype.getDbid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDbid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.pb.FindByIDRequest} returns this
 */
proto.threads.pb.FindByIDRequest.prototype.setDbid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string collectionName = 2;
 * @return {string}
 */
proto.threads.pb.FindByIDRequest.prototype.getCollectionname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.threads.pb.FindByIDRequest} returns this
 */
proto.threads.pb.FindByIDRequest.prototype.setCollectionname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string instanceID = 3;
 * @return {string}
 */
proto.threads.pb.FindByIDRequest.prototype.getInstanceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.threads.pb.FindByIDRequest} returns this
 */
proto.threads.pb.FindByIDRequest.prototype.setInstanceid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.FindByIDReply.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.FindByIDReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.FindByIDReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.FindByIDReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    instance: msg.getInstance_asB64(),
    transactionerror: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.FindByIDReply}
 */
proto.threads.pb.FindByIDReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.FindByIDReply;
  return proto.threads.pb.FindByIDReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.FindByIDReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.FindByIDReply}
 */
proto.threads.pb.FindByIDReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setInstance(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionerror(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.FindByIDReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.FindByIDReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.FindByIDReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.FindByIDReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstance_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getTransactionerror();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bytes instance = 1;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.FindByIDReply.prototype.getInstance = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes instance = 1;
 * This is a type-conversion wrapper around `getInstance()`
 * @return {string}
 */
proto.threads.pb.FindByIDReply.prototype.getInstance_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getInstance()));
};


/**
 * optional bytes instance = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInstance()`
 * @return {!Uint8Array}
 */
proto.threads.pb.FindByIDReply.prototype.getInstance_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getInstance()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.pb.FindByIDReply} returns this
 */
proto.threads.pb.FindByIDReply.prototype.setInstance = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string transactionError = 2;
 * @return {string}
 */
proto.threads.pb.FindByIDReply.prototype.getTransactionerror = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.threads.pb.FindByIDReply} returns this
 */
proto.threads.pb.FindByIDReply.prototype.setTransactionerror = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.DiscardRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.DiscardRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.DiscardRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.DiscardRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.DiscardRequest}
 */
proto.threads.pb.DiscardRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.DiscardRequest;
  return proto.threads.pb.DiscardRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.DiscardRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.DiscardRequest}
 */
proto.threads.pb.DiscardRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.DiscardRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.DiscardRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.DiscardRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.DiscardRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.DiscardReply.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.DiscardReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.DiscardReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.DiscardReply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.DiscardReply}
 */
proto.threads.pb.DiscardReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.DiscardReply;
  return proto.threads.pb.DiscardReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.DiscardReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.DiscardReply}
 */
proto.threads.pb.DiscardReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.DiscardReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.DiscardReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.DiscardReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.DiscardReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.StartTransactionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.StartTransactionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.StartTransactionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.StartTransactionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    dbid: msg.getDbid_asB64(),
    collectionname: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.StartTransactionRequest}
 */
proto.threads.pb.StartTransactionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.StartTransactionRequest;
  return proto.threads.pb.StartTransactionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.StartTransactionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.StartTransactionRequest}
 */
proto.threads.pb.StartTransactionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDbid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollectionname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.StartTransactionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.StartTransactionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.StartTransactionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.StartTransactionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDbid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCollectionname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bytes dbID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.StartTransactionRequest.prototype.getDbid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes dbID = 1;
 * This is a type-conversion wrapper around `getDbid()`
 * @return {string}
 */
proto.threads.pb.StartTransactionRequest.prototype.getDbid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDbid()));
};


/**
 * optional bytes dbID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDbid()`
 * @return {!Uint8Array}
 */
proto.threads.pb.StartTransactionRequest.prototype.getDbid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDbid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.pb.StartTransactionRequest} returns this
 */
proto.threads.pb.StartTransactionRequest.prototype.setDbid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string collectionName = 2;
 * @return {string}
 */
proto.threads.pb.StartTransactionRequest.prototype.getCollectionname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.threads.pb.StartTransactionRequest} returns this
 */
proto.threads.pb.StartTransactionRequest.prototype.setCollectionname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.threads.pb.ReadTransactionRequest.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.threads.pb.ReadTransactionRequest.OptionCase = {
  OPTION_NOT_SET: 0,
  STARTTRANSACTIONREQUEST: 1,
  HASREQUEST: 2,
  FINDREQUEST: 3,
  FINDBYIDREQUEST: 4
};

/**
 * @return {proto.threads.pb.ReadTransactionRequest.OptionCase}
 */
proto.threads.pb.ReadTransactionRequest.prototype.getOptionCase = function() {
  return /** @type {proto.threads.pb.ReadTransactionRequest.OptionCase} */(jspb.Message.computeOneofCase(this, proto.threads.pb.ReadTransactionRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.ReadTransactionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.ReadTransactionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.ReadTransactionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.ReadTransactionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    starttransactionrequest: (f = msg.getStarttransactionrequest()) && proto.threads.pb.StartTransactionRequest.toObject(includeInstance, f),
    hasrequest: (f = msg.getHasrequest()) && proto.threads.pb.HasRequest.toObject(includeInstance, f),
    findrequest: (f = msg.getFindrequest()) && proto.threads.pb.FindRequest.toObject(includeInstance, f),
    findbyidrequest: (f = msg.getFindbyidrequest()) && proto.threads.pb.FindByIDRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.ReadTransactionRequest}
 */
proto.threads.pb.ReadTransactionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.ReadTransactionRequest;
  return proto.threads.pb.ReadTransactionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.ReadTransactionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.ReadTransactionRequest}
 */
proto.threads.pb.ReadTransactionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.threads.pb.StartTransactionRequest;
      reader.readMessage(value,proto.threads.pb.StartTransactionRequest.deserializeBinaryFromReader);
      msg.setStarttransactionrequest(value);
      break;
    case 2:
      var value = new proto.threads.pb.HasRequest;
      reader.readMessage(value,proto.threads.pb.HasRequest.deserializeBinaryFromReader);
      msg.setHasrequest(value);
      break;
    case 3:
      var value = new proto.threads.pb.FindRequest;
      reader.readMessage(value,proto.threads.pb.FindRequest.deserializeBinaryFromReader);
      msg.setFindrequest(value);
      break;
    case 4:
      var value = new proto.threads.pb.FindByIDRequest;
      reader.readMessage(value,proto.threads.pb.FindByIDRequest.deserializeBinaryFromReader);
      msg.setFindbyidrequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.ReadTransactionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.ReadTransactionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.ReadTransactionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.ReadTransactionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStarttransactionrequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.threads.pb.StartTransactionRequest.serializeBinaryToWriter
    );
  }
  f = message.getHasrequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.threads.pb.HasRequest.serializeBinaryToWriter
    );
  }
  f = message.getFindrequest();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.threads.pb.FindRequest.serializeBinaryToWriter
    );
  }
  f = message.getFindbyidrequest();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.threads.pb.FindByIDRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional StartTransactionRequest startTransactionRequest = 1;
 * @return {?proto.threads.pb.StartTransactionRequest}
 */
proto.threads.pb.ReadTransactionRequest.prototype.getStarttransactionrequest = function() {
  return /** @type{?proto.threads.pb.StartTransactionRequest} */ (
    jspb.Message.getWrapperField(this, proto.threads.pb.StartTransactionRequest, 1));
};


/**
 * @param {?proto.threads.pb.StartTransactionRequest|undefined} value
 * @return {!proto.threads.pb.ReadTransactionRequest} returns this
*/
proto.threads.pb.ReadTransactionRequest.prototype.setStarttransactionrequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.threads.pb.ReadTransactionRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.threads.pb.ReadTransactionRequest} returns this
 */
proto.threads.pb.ReadTransactionRequest.prototype.clearStarttransactionrequest = function() {
  return this.setStarttransactionrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.threads.pb.ReadTransactionRequest.prototype.hasStarttransactionrequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional HasRequest hasRequest = 2;
 * @return {?proto.threads.pb.HasRequest}
 */
proto.threads.pb.ReadTransactionRequest.prototype.getHasrequest = function() {
  return /** @type{?proto.threads.pb.HasRequest} */ (
    jspb.Message.getWrapperField(this, proto.threads.pb.HasRequest, 2));
};


/**
 * @param {?proto.threads.pb.HasRequest|undefined} value
 * @return {!proto.threads.pb.ReadTransactionRequest} returns this
*/
proto.threads.pb.ReadTransactionRequest.prototype.setHasrequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.threads.pb.ReadTransactionRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.threads.pb.ReadTransactionRequest} returns this
 */
proto.threads.pb.ReadTransactionRequest.prototype.clearHasrequest = function() {
  return this.setHasrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.threads.pb.ReadTransactionRequest.prototype.hasHasrequest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional FindRequest findRequest = 3;
 * @return {?proto.threads.pb.FindRequest}
 */
proto.threads.pb.ReadTransactionRequest.prototype.getFindrequest = function() {
  return /** @type{?proto.threads.pb.FindRequest} */ (
    jspb.Message.getWrapperField(this, proto.threads.pb.FindRequest, 3));
};


/**
 * @param {?proto.threads.pb.FindRequest|undefined} value
 * @return {!proto.threads.pb.ReadTransactionRequest} returns this
*/
proto.threads.pb.ReadTransactionRequest.prototype.setFindrequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.threads.pb.ReadTransactionRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.threads.pb.ReadTransactionRequest} returns this
 */
proto.threads.pb.ReadTransactionRequest.prototype.clearFindrequest = function() {
  return this.setFindrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.threads.pb.ReadTransactionRequest.prototype.hasFindrequest = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional FindByIDRequest findByIDRequest = 4;
 * @return {?proto.threads.pb.FindByIDRequest}
 */
proto.threads.pb.ReadTransactionRequest.prototype.getFindbyidrequest = function() {
  return /** @type{?proto.threads.pb.FindByIDRequest} */ (
    jspb.Message.getWrapperField(this, proto.threads.pb.FindByIDRequest, 4));
};


/**
 * @param {?proto.threads.pb.FindByIDRequest|undefined} value
 * @return {!proto.threads.pb.ReadTransactionRequest} returns this
*/
proto.threads.pb.ReadTransactionRequest.prototype.setFindbyidrequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.threads.pb.ReadTransactionRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.threads.pb.ReadTransactionRequest} returns this
 */
proto.threads.pb.ReadTransactionRequest.prototype.clearFindbyidrequest = function() {
  return this.setFindbyidrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.threads.pb.ReadTransactionRequest.prototype.hasFindbyidrequest = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.threads.pb.ReadTransactionReply.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.threads.pb.ReadTransactionReply.OptionCase = {
  OPTION_NOT_SET: 0,
  HASREPLY: 1,
  FINDREPLY: 2,
  FINDBYIDREPLY: 3
};

/**
 * @return {proto.threads.pb.ReadTransactionReply.OptionCase}
 */
proto.threads.pb.ReadTransactionReply.prototype.getOptionCase = function() {
  return /** @type {proto.threads.pb.ReadTransactionReply.OptionCase} */(jspb.Message.computeOneofCase(this, proto.threads.pb.ReadTransactionReply.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.ReadTransactionReply.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.ReadTransactionReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.ReadTransactionReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.ReadTransactionReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    hasreply: (f = msg.getHasreply()) && proto.threads.pb.HasReply.toObject(includeInstance, f),
    findreply: (f = msg.getFindreply()) && proto.threads.pb.FindReply.toObject(includeInstance, f),
    findbyidreply: (f = msg.getFindbyidreply()) && proto.threads.pb.FindByIDReply.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.ReadTransactionReply}
 */
proto.threads.pb.ReadTransactionReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.ReadTransactionReply;
  return proto.threads.pb.ReadTransactionReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.ReadTransactionReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.ReadTransactionReply}
 */
proto.threads.pb.ReadTransactionReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.threads.pb.HasReply;
      reader.readMessage(value,proto.threads.pb.HasReply.deserializeBinaryFromReader);
      msg.setHasreply(value);
      break;
    case 2:
      var value = new proto.threads.pb.FindReply;
      reader.readMessage(value,proto.threads.pb.FindReply.deserializeBinaryFromReader);
      msg.setFindreply(value);
      break;
    case 3:
      var value = new proto.threads.pb.FindByIDReply;
      reader.readMessage(value,proto.threads.pb.FindByIDReply.deserializeBinaryFromReader);
      msg.setFindbyidreply(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.ReadTransactionReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.ReadTransactionReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.ReadTransactionReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.ReadTransactionReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHasreply();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.threads.pb.HasReply.serializeBinaryToWriter
    );
  }
  f = message.getFindreply();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.threads.pb.FindReply.serializeBinaryToWriter
    );
  }
  f = message.getFindbyidreply();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.threads.pb.FindByIDReply.serializeBinaryToWriter
    );
  }
};


/**
 * optional HasReply hasReply = 1;
 * @return {?proto.threads.pb.HasReply}
 */
proto.threads.pb.ReadTransactionReply.prototype.getHasreply = function() {
  return /** @type{?proto.threads.pb.HasReply} */ (
    jspb.Message.getWrapperField(this, proto.threads.pb.HasReply, 1));
};


/**
 * @param {?proto.threads.pb.HasReply|undefined} value
 * @return {!proto.threads.pb.ReadTransactionReply} returns this
*/
proto.threads.pb.ReadTransactionReply.prototype.setHasreply = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.threads.pb.ReadTransactionReply.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.threads.pb.ReadTransactionReply} returns this
 */
proto.threads.pb.ReadTransactionReply.prototype.clearHasreply = function() {
  return this.setHasreply(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.threads.pb.ReadTransactionReply.prototype.hasHasreply = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional FindReply findReply = 2;
 * @return {?proto.threads.pb.FindReply}
 */
proto.threads.pb.ReadTransactionReply.prototype.getFindreply = function() {
  return /** @type{?proto.threads.pb.FindReply} */ (
    jspb.Message.getWrapperField(this, proto.threads.pb.FindReply, 2));
};


/**
 * @param {?proto.threads.pb.FindReply|undefined} value
 * @return {!proto.threads.pb.ReadTransactionReply} returns this
*/
proto.threads.pb.ReadTransactionReply.prototype.setFindreply = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.threads.pb.ReadTransactionReply.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.threads.pb.ReadTransactionReply} returns this
 */
proto.threads.pb.ReadTransactionReply.prototype.clearFindreply = function() {
  return this.setFindreply(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.threads.pb.ReadTransactionReply.prototype.hasFindreply = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional FindByIDReply findByIDReply = 3;
 * @return {?proto.threads.pb.FindByIDReply}
 */
proto.threads.pb.ReadTransactionReply.prototype.getFindbyidreply = function() {
  return /** @type{?proto.threads.pb.FindByIDReply} */ (
    jspb.Message.getWrapperField(this, proto.threads.pb.FindByIDReply, 3));
};


/**
 * @param {?proto.threads.pb.FindByIDReply|undefined} value
 * @return {!proto.threads.pb.ReadTransactionReply} returns this
*/
proto.threads.pb.ReadTransactionReply.prototype.setFindbyidreply = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.threads.pb.ReadTransactionReply.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.threads.pb.ReadTransactionReply} returns this
 */
proto.threads.pb.ReadTransactionReply.prototype.clearFindbyidreply = function() {
  return this.setFindbyidreply(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.threads.pb.ReadTransactionReply.prototype.hasFindbyidreply = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.threads.pb.WriteTransactionRequest.oneofGroups_ = [[1,2,8,3,4,5,6,7,9]];

/**
 * @enum {number}
 */
proto.threads.pb.WriteTransactionRequest.OptionCase = {
  OPTION_NOT_SET: 0,
  STARTTRANSACTIONREQUEST: 1,
  CREATEREQUEST: 2,
  VERIFYREQUEST: 8,
  SAVEREQUEST: 3,
  DELETEREQUEST: 4,
  HASREQUEST: 5,
  FINDREQUEST: 6,
  FINDBYIDREQUEST: 7,
  DISCARDREQUEST: 9
};

/**
 * @return {proto.threads.pb.WriteTransactionRequest.OptionCase}
 */
proto.threads.pb.WriteTransactionRequest.prototype.getOptionCase = function() {
  return /** @type {proto.threads.pb.WriteTransactionRequest.OptionCase} */(jspb.Message.computeOneofCase(this, proto.threads.pb.WriteTransactionRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.WriteTransactionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.WriteTransactionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.WriteTransactionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.WriteTransactionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    starttransactionrequest: (f = msg.getStarttransactionrequest()) && proto.threads.pb.StartTransactionRequest.toObject(includeInstance, f),
    createrequest: (f = msg.getCreaterequest()) && proto.threads.pb.CreateRequest.toObject(includeInstance, f),
    verifyrequest: (f = msg.getVerifyrequest()) && proto.threads.pb.VerifyRequest.toObject(includeInstance, f),
    saverequest: (f = msg.getSaverequest()) && proto.threads.pb.SaveRequest.toObject(includeInstance, f),
    deleterequest: (f = msg.getDeleterequest()) && proto.threads.pb.DeleteRequest.toObject(includeInstance, f),
    hasrequest: (f = msg.getHasrequest()) && proto.threads.pb.HasRequest.toObject(includeInstance, f),
    findrequest: (f = msg.getFindrequest()) && proto.threads.pb.FindRequest.toObject(includeInstance, f),
    findbyidrequest: (f = msg.getFindbyidrequest()) && proto.threads.pb.FindByIDRequest.toObject(includeInstance, f),
    discardrequest: (f = msg.getDiscardrequest()) && proto.threads.pb.DiscardRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.WriteTransactionRequest}
 */
proto.threads.pb.WriteTransactionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.WriteTransactionRequest;
  return proto.threads.pb.WriteTransactionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.WriteTransactionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.WriteTransactionRequest}
 */
proto.threads.pb.WriteTransactionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.threads.pb.StartTransactionRequest;
      reader.readMessage(value,proto.threads.pb.StartTransactionRequest.deserializeBinaryFromReader);
      msg.setStarttransactionrequest(value);
      break;
    case 2:
      var value = new proto.threads.pb.CreateRequest;
      reader.readMessage(value,proto.threads.pb.CreateRequest.deserializeBinaryFromReader);
      msg.setCreaterequest(value);
      break;
    case 8:
      var value = new proto.threads.pb.VerifyRequest;
      reader.readMessage(value,proto.threads.pb.VerifyRequest.deserializeBinaryFromReader);
      msg.setVerifyrequest(value);
      break;
    case 3:
      var value = new proto.threads.pb.SaveRequest;
      reader.readMessage(value,proto.threads.pb.SaveRequest.deserializeBinaryFromReader);
      msg.setSaverequest(value);
      break;
    case 4:
      var value = new proto.threads.pb.DeleteRequest;
      reader.readMessage(value,proto.threads.pb.DeleteRequest.deserializeBinaryFromReader);
      msg.setDeleterequest(value);
      break;
    case 5:
      var value = new proto.threads.pb.HasRequest;
      reader.readMessage(value,proto.threads.pb.HasRequest.deserializeBinaryFromReader);
      msg.setHasrequest(value);
      break;
    case 6:
      var value = new proto.threads.pb.FindRequest;
      reader.readMessage(value,proto.threads.pb.FindRequest.deserializeBinaryFromReader);
      msg.setFindrequest(value);
      break;
    case 7:
      var value = new proto.threads.pb.FindByIDRequest;
      reader.readMessage(value,proto.threads.pb.FindByIDRequest.deserializeBinaryFromReader);
      msg.setFindbyidrequest(value);
      break;
    case 9:
      var value = new proto.threads.pb.DiscardRequest;
      reader.readMessage(value,proto.threads.pb.DiscardRequest.deserializeBinaryFromReader);
      msg.setDiscardrequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.WriteTransactionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.WriteTransactionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.WriteTransactionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.WriteTransactionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStarttransactionrequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.threads.pb.StartTransactionRequest.serializeBinaryToWriter
    );
  }
  f = message.getCreaterequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.threads.pb.CreateRequest.serializeBinaryToWriter
    );
  }
  f = message.getVerifyrequest();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.threads.pb.VerifyRequest.serializeBinaryToWriter
    );
  }
  f = message.getSaverequest();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.threads.pb.SaveRequest.serializeBinaryToWriter
    );
  }
  f = message.getDeleterequest();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.threads.pb.DeleteRequest.serializeBinaryToWriter
    );
  }
  f = message.getHasrequest();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.threads.pb.HasRequest.serializeBinaryToWriter
    );
  }
  f = message.getFindrequest();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.threads.pb.FindRequest.serializeBinaryToWriter
    );
  }
  f = message.getFindbyidrequest();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.threads.pb.FindByIDRequest.serializeBinaryToWriter
    );
  }
  f = message.getDiscardrequest();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.threads.pb.DiscardRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional StartTransactionRequest startTransactionRequest = 1;
 * @return {?proto.threads.pb.StartTransactionRequest}
 */
proto.threads.pb.WriteTransactionRequest.prototype.getStarttransactionrequest = function() {
  return /** @type{?proto.threads.pb.StartTransactionRequest} */ (
    jspb.Message.getWrapperField(this, proto.threads.pb.StartTransactionRequest, 1));
};


/**
 * @param {?proto.threads.pb.StartTransactionRequest|undefined} value
 * @return {!proto.threads.pb.WriteTransactionRequest} returns this
*/
proto.threads.pb.WriteTransactionRequest.prototype.setStarttransactionrequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.threads.pb.WriteTransactionRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.threads.pb.WriteTransactionRequest} returns this
 */
proto.threads.pb.WriteTransactionRequest.prototype.clearStarttransactionrequest = function() {
  return this.setStarttransactionrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.threads.pb.WriteTransactionRequest.prototype.hasStarttransactionrequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CreateRequest createRequest = 2;
 * @return {?proto.threads.pb.CreateRequest}
 */
proto.threads.pb.WriteTransactionRequest.prototype.getCreaterequest = function() {
  return /** @type{?proto.threads.pb.CreateRequest} */ (
    jspb.Message.getWrapperField(this, proto.threads.pb.CreateRequest, 2));
};


/**
 * @param {?proto.threads.pb.CreateRequest|undefined} value
 * @return {!proto.threads.pb.WriteTransactionRequest} returns this
*/
proto.threads.pb.WriteTransactionRequest.prototype.setCreaterequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.threads.pb.WriteTransactionRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.threads.pb.WriteTransactionRequest} returns this
 */
proto.threads.pb.WriteTransactionRequest.prototype.clearCreaterequest = function() {
  return this.setCreaterequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.threads.pb.WriteTransactionRequest.prototype.hasCreaterequest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional VerifyRequest verifyRequest = 8;
 * @return {?proto.threads.pb.VerifyRequest}
 */
proto.threads.pb.WriteTransactionRequest.prototype.getVerifyrequest = function() {
  return /** @type{?proto.threads.pb.VerifyRequest} */ (
    jspb.Message.getWrapperField(this, proto.threads.pb.VerifyRequest, 8));
};


/**
 * @param {?proto.threads.pb.VerifyRequest|undefined} value
 * @return {!proto.threads.pb.WriteTransactionRequest} returns this
*/
proto.threads.pb.WriteTransactionRequest.prototype.setVerifyrequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.threads.pb.WriteTransactionRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.threads.pb.WriteTransactionRequest} returns this
 */
proto.threads.pb.WriteTransactionRequest.prototype.clearVerifyrequest = function() {
  return this.setVerifyrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.threads.pb.WriteTransactionRequest.prototype.hasVerifyrequest = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional SaveRequest saveRequest = 3;
 * @return {?proto.threads.pb.SaveRequest}
 */
proto.threads.pb.WriteTransactionRequest.prototype.getSaverequest = function() {
  return /** @type{?proto.threads.pb.SaveRequest} */ (
    jspb.Message.getWrapperField(this, proto.threads.pb.SaveRequest, 3));
};


/**
 * @param {?proto.threads.pb.SaveRequest|undefined} value
 * @return {!proto.threads.pb.WriteTransactionRequest} returns this
*/
proto.threads.pb.WriteTransactionRequest.prototype.setSaverequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.threads.pb.WriteTransactionRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.threads.pb.WriteTransactionRequest} returns this
 */
proto.threads.pb.WriteTransactionRequest.prototype.clearSaverequest = function() {
  return this.setSaverequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.threads.pb.WriteTransactionRequest.prototype.hasSaverequest = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional DeleteRequest deleteRequest = 4;
 * @return {?proto.threads.pb.DeleteRequest}
 */
proto.threads.pb.WriteTransactionRequest.prototype.getDeleterequest = function() {
  return /** @type{?proto.threads.pb.DeleteRequest} */ (
    jspb.Message.getWrapperField(this, proto.threads.pb.DeleteRequest, 4));
};


/**
 * @param {?proto.threads.pb.DeleteRequest|undefined} value
 * @return {!proto.threads.pb.WriteTransactionRequest} returns this
*/
proto.threads.pb.WriteTransactionRequest.prototype.setDeleterequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.threads.pb.WriteTransactionRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.threads.pb.WriteTransactionRequest} returns this
 */
proto.threads.pb.WriteTransactionRequest.prototype.clearDeleterequest = function() {
  return this.setDeleterequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.threads.pb.WriteTransactionRequest.prototype.hasDeleterequest = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional HasRequest hasRequest = 5;
 * @return {?proto.threads.pb.HasRequest}
 */
proto.threads.pb.WriteTransactionRequest.prototype.getHasrequest = function() {
  return /** @type{?proto.threads.pb.HasRequest} */ (
    jspb.Message.getWrapperField(this, proto.threads.pb.HasRequest, 5));
};


/**
 * @param {?proto.threads.pb.HasRequest|undefined} value
 * @return {!proto.threads.pb.WriteTransactionRequest} returns this
*/
proto.threads.pb.WriteTransactionRequest.prototype.setHasrequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.threads.pb.WriteTransactionRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.threads.pb.WriteTransactionRequest} returns this
 */
proto.threads.pb.WriteTransactionRequest.prototype.clearHasrequest = function() {
  return this.setHasrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.threads.pb.WriteTransactionRequest.prototype.hasHasrequest = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional FindRequest findRequest = 6;
 * @return {?proto.threads.pb.FindRequest}
 */
proto.threads.pb.WriteTransactionRequest.prototype.getFindrequest = function() {
  return /** @type{?proto.threads.pb.FindRequest} */ (
    jspb.Message.getWrapperField(this, proto.threads.pb.FindRequest, 6));
};


/**
 * @param {?proto.threads.pb.FindRequest|undefined} value
 * @return {!proto.threads.pb.WriteTransactionRequest} returns this
*/
proto.threads.pb.WriteTransactionRequest.prototype.setFindrequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.threads.pb.WriteTransactionRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.threads.pb.WriteTransactionRequest} returns this
 */
proto.threads.pb.WriteTransactionRequest.prototype.clearFindrequest = function() {
  return this.setFindrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.threads.pb.WriteTransactionRequest.prototype.hasFindrequest = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional FindByIDRequest findByIDRequest = 7;
 * @return {?proto.threads.pb.FindByIDRequest}
 */
proto.threads.pb.WriteTransactionRequest.prototype.getFindbyidrequest = function() {
  return /** @type{?proto.threads.pb.FindByIDRequest} */ (
    jspb.Message.getWrapperField(this, proto.threads.pb.FindByIDRequest, 7));
};


/**
 * @param {?proto.threads.pb.FindByIDRequest|undefined} value
 * @return {!proto.threads.pb.WriteTransactionRequest} returns this
*/
proto.threads.pb.WriteTransactionRequest.prototype.setFindbyidrequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.threads.pb.WriteTransactionRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.threads.pb.WriteTransactionRequest} returns this
 */
proto.threads.pb.WriteTransactionRequest.prototype.clearFindbyidrequest = function() {
  return this.setFindbyidrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.threads.pb.WriteTransactionRequest.prototype.hasFindbyidrequest = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional DiscardRequest discardRequest = 9;
 * @return {?proto.threads.pb.DiscardRequest}
 */
proto.threads.pb.WriteTransactionRequest.prototype.getDiscardrequest = function() {
  return /** @type{?proto.threads.pb.DiscardRequest} */ (
    jspb.Message.getWrapperField(this, proto.threads.pb.DiscardRequest, 9));
};


/**
 * @param {?proto.threads.pb.DiscardRequest|undefined} value
 * @return {!proto.threads.pb.WriteTransactionRequest} returns this
*/
proto.threads.pb.WriteTransactionRequest.prototype.setDiscardrequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.threads.pb.WriteTransactionRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.threads.pb.WriteTransactionRequest} returns this
 */
proto.threads.pb.WriteTransactionRequest.prototype.clearDiscardrequest = function() {
  return this.setDiscardrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.threads.pb.WriteTransactionRequest.prototype.hasDiscardrequest = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.threads.pb.WriteTransactionReply.oneofGroups_ = [[1,7,2,3,4,5,6,8]];

/**
 * @enum {number}
 */
proto.threads.pb.WriteTransactionReply.OptionCase = {
  OPTION_NOT_SET: 0,
  CREATEREPLY: 1,
  VERIFYREPLY: 7,
  SAVEREPLY: 2,
  DELETEREPLY: 3,
  HASREPLY: 4,
  FINDREPLY: 5,
  FINDBYIDREPLY: 6,
  DISCARDREPLY: 8
};

/**
 * @return {proto.threads.pb.WriteTransactionReply.OptionCase}
 */
proto.threads.pb.WriteTransactionReply.prototype.getOptionCase = function() {
  return /** @type {proto.threads.pb.WriteTransactionReply.OptionCase} */(jspb.Message.computeOneofCase(this, proto.threads.pb.WriteTransactionReply.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.WriteTransactionReply.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.WriteTransactionReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.WriteTransactionReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.WriteTransactionReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    createreply: (f = msg.getCreatereply()) && proto.threads.pb.CreateReply.toObject(includeInstance, f),
    verifyreply: (f = msg.getVerifyreply()) && proto.threads.pb.VerifyReply.toObject(includeInstance, f),
    savereply: (f = msg.getSavereply()) && proto.threads.pb.SaveReply.toObject(includeInstance, f),
    deletereply: (f = msg.getDeletereply()) && proto.threads.pb.DeleteReply.toObject(includeInstance, f),
    hasreply: (f = msg.getHasreply()) && proto.threads.pb.HasReply.toObject(includeInstance, f),
    findreply: (f = msg.getFindreply()) && proto.threads.pb.FindReply.toObject(includeInstance, f),
    findbyidreply: (f = msg.getFindbyidreply()) && proto.threads.pb.FindByIDReply.toObject(includeInstance, f),
    discardreply: (f = msg.getDiscardreply()) && proto.threads.pb.DiscardReply.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.WriteTransactionReply}
 */
proto.threads.pb.WriteTransactionReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.WriteTransactionReply;
  return proto.threads.pb.WriteTransactionReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.WriteTransactionReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.WriteTransactionReply}
 */
proto.threads.pb.WriteTransactionReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.threads.pb.CreateReply;
      reader.readMessage(value,proto.threads.pb.CreateReply.deserializeBinaryFromReader);
      msg.setCreatereply(value);
      break;
    case 7:
      var value = new proto.threads.pb.VerifyReply;
      reader.readMessage(value,proto.threads.pb.VerifyReply.deserializeBinaryFromReader);
      msg.setVerifyreply(value);
      break;
    case 2:
      var value = new proto.threads.pb.SaveReply;
      reader.readMessage(value,proto.threads.pb.SaveReply.deserializeBinaryFromReader);
      msg.setSavereply(value);
      break;
    case 3:
      var value = new proto.threads.pb.DeleteReply;
      reader.readMessage(value,proto.threads.pb.DeleteReply.deserializeBinaryFromReader);
      msg.setDeletereply(value);
      break;
    case 4:
      var value = new proto.threads.pb.HasReply;
      reader.readMessage(value,proto.threads.pb.HasReply.deserializeBinaryFromReader);
      msg.setHasreply(value);
      break;
    case 5:
      var value = new proto.threads.pb.FindReply;
      reader.readMessage(value,proto.threads.pb.FindReply.deserializeBinaryFromReader);
      msg.setFindreply(value);
      break;
    case 6:
      var value = new proto.threads.pb.FindByIDReply;
      reader.readMessage(value,proto.threads.pb.FindByIDReply.deserializeBinaryFromReader);
      msg.setFindbyidreply(value);
      break;
    case 8:
      var value = new proto.threads.pb.DiscardReply;
      reader.readMessage(value,proto.threads.pb.DiscardReply.deserializeBinaryFromReader);
      msg.setDiscardreply(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.WriteTransactionReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.WriteTransactionReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.WriteTransactionReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.WriteTransactionReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreatereply();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.threads.pb.CreateReply.serializeBinaryToWriter
    );
  }
  f = message.getVerifyreply();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.threads.pb.VerifyReply.serializeBinaryToWriter
    );
  }
  f = message.getSavereply();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.threads.pb.SaveReply.serializeBinaryToWriter
    );
  }
  f = message.getDeletereply();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.threads.pb.DeleteReply.serializeBinaryToWriter
    );
  }
  f = message.getHasreply();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.threads.pb.HasReply.serializeBinaryToWriter
    );
  }
  f = message.getFindreply();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.threads.pb.FindReply.serializeBinaryToWriter
    );
  }
  f = message.getFindbyidreply();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.threads.pb.FindByIDReply.serializeBinaryToWriter
    );
  }
  f = message.getDiscardreply();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.threads.pb.DiscardReply.serializeBinaryToWriter
    );
  }
};


/**
 * optional CreateReply createReply = 1;
 * @return {?proto.threads.pb.CreateReply}
 */
proto.threads.pb.WriteTransactionReply.prototype.getCreatereply = function() {
  return /** @type{?proto.threads.pb.CreateReply} */ (
    jspb.Message.getWrapperField(this, proto.threads.pb.CreateReply, 1));
};


/**
 * @param {?proto.threads.pb.CreateReply|undefined} value
 * @return {!proto.threads.pb.WriteTransactionReply} returns this
*/
proto.threads.pb.WriteTransactionReply.prototype.setCreatereply = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.threads.pb.WriteTransactionReply.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.threads.pb.WriteTransactionReply} returns this
 */
proto.threads.pb.WriteTransactionReply.prototype.clearCreatereply = function() {
  return this.setCreatereply(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.threads.pb.WriteTransactionReply.prototype.hasCreatereply = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional VerifyReply verifyReply = 7;
 * @return {?proto.threads.pb.VerifyReply}
 */
proto.threads.pb.WriteTransactionReply.prototype.getVerifyreply = function() {
  return /** @type{?proto.threads.pb.VerifyReply} */ (
    jspb.Message.getWrapperField(this, proto.threads.pb.VerifyReply, 7));
};


/**
 * @param {?proto.threads.pb.VerifyReply|undefined} value
 * @return {!proto.threads.pb.WriteTransactionReply} returns this
*/
proto.threads.pb.WriteTransactionReply.prototype.setVerifyreply = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.threads.pb.WriteTransactionReply.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.threads.pb.WriteTransactionReply} returns this
 */
proto.threads.pb.WriteTransactionReply.prototype.clearVerifyreply = function() {
  return this.setVerifyreply(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.threads.pb.WriteTransactionReply.prototype.hasVerifyreply = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional SaveReply saveReply = 2;
 * @return {?proto.threads.pb.SaveReply}
 */
proto.threads.pb.WriteTransactionReply.prototype.getSavereply = function() {
  return /** @type{?proto.threads.pb.SaveReply} */ (
    jspb.Message.getWrapperField(this, proto.threads.pb.SaveReply, 2));
};


/**
 * @param {?proto.threads.pb.SaveReply|undefined} value
 * @return {!proto.threads.pb.WriteTransactionReply} returns this
*/
proto.threads.pb.WriteTransactionReply.prototype.setSavereply = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.threads.pb.WriteTransactionReply.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.threads.pb.WriteTransactionReply} returns this
 */
proto.threads.pb.WriteTransactionReply.prototype.clearSavereply = function() {
  return this.setSavereply(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.threads.pb.WriteTransactionReply.prototype.hasSavereply = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional DeleteReply deleteReply = 3;
 * @return {?proto.threads.pb.DeleteReply}
 */
proto.threads.pb.WriteTransactionReply.prototype.getDeletereply = function() {
  return /** @type{?proto.threads.pb.DeleteReply} */ (
    jspb.Message.getWrapperField(this, proto.threads.pb.DeleteReply, 3));
};


/**
 * @param {?proto.threads.pb.DeleteReply|undefined} value
 * @return {!proto.threads.pb.WriteTransactionReply} returns this
*/
proto.threads.pb.WriteTransactionReply.prototype.setDeletereply = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.threads.pb.WriteTransactionReply.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.threads.pb.WriteTransactionReply} returns this
 */
proto.threads.pb.WriteTransactionReply.prototype.clearDeletereply = function() {
  return this.setDeletereply(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.threads.pb.WriteTransactionReply.prototype.hasDeletereply = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional HasReply hasReply = 4;
 * @return {?proto.threads.pb.HasReply}
 */
proto.threads.pb.WriteTransactionReply.prototype.getHasreply = function() {
  return /** @type{?proto.threads.pb.HasReply} */ (
    jspb.Message.getWrapperField(this, proto.threads.pb.HasReply, 4));
};


/**
 * @param {?proto.threads.pb.HasReply|undefined} value
 * @return {!proto.threads.pb.WriteTransactionReply} returns this
*/
proto.threads.pb.WriteTransactionReply.prototype.setHasreply = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.threads.pb.WriteTransactionReply.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.threads.pb.WriteTransactionReply} returns this
 */
proto.threads.pb.WriteTransactionReply.prototype.clearHasreply = function() {
  return this.setHasreply(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.threads.pb.WriteTransactionReply.prototype.hasHasreply = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional FindReply findReply = 5;
 * @return {?proto.threads.pb.FindReply}
 */
proto.threads.pb.WriteTransactionReply.prototype.getFindreply = function() {
  return /** @type{?proto.threads.pb.FindReply} */ (
    jspb.Message.getWrapperField(this, proto.threads.pb.FindReply, 5));
};


/**
 * @param {?proto.threads.pb.FindReply|undefined} value
 * @return {!proto.threads.pb.WriteTransactionReply} returns this
*/
proto.threads.pb.WriteTransactionReply.prototype.setFindreply = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.threads.pb.WriteTransactionReply.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.threads.pb.WriteTransactionReply} returns this
 */
proto.threads.pb.WriteTransactionReply.prototype.clearFindreply = function() {
  return this.setFindreply(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.threads.pb.WriteTransactionReply.prototype.hasFindreply = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional FindByIDReply findByIDReply = 6;
 * @return {?proto.threads.pb.FindByIDReply}
 */
proto.threads.pb.WriteTransactionReply.prototype.getFindbyidreply = function() {
  return /** @type{?proto.threads.pb.FindByIDReply} */ (
    jspb.Message.getWrapperField(this, proto.threads.pb.FindByIDReply, 6));
};


/**
 * @param {?proto.threads.pb.FindByIDReply|undefined} value
 * @return {!proto.threads.pb.WriteTransactionReply} returns this
*/
proto.threads.pb.WriteTransactionReply.prototype.setFindbyidreply = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.threads.pb.WriteTransactionReply.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.threads.pb.WriteTransactionReply} returns this
 */
proto.threads.pb.WriteTransactionReply.prototype.clearFindbyidreply = function() {
  return this.setFindbyidreply(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.threads.pb.WriteTransactionReply.prototype.hasFindbyidreply = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional DiscardReply discardReply = 8;
 * @return {?proto.threads.pb.DiscardReply}
 */
proto.threads.pb.WriteTransactionReply.prototype.getDiscardreply = function() {
  return /** @type{?proto.threads.pb.DiscardReply} */ (
    jspb.Message.getWrapperField(this, proto.threads.pb.DiscardReply, 8));
};


/**
 * @param {?proto.threads.pb.DiscardReply|undefined} value
 * @return {!proto.threads.pb.WriteTransactionReply} returns this
*/
proto.threads.pb.WriteTransactionReply.prototype.setDiscardreply = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.threads.pb.WriteTransactionReply.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.threads.pb.WriteTransactionReply} returns this
 */
proto.threads.pb.WriteTransactionReply.prototype.clearDiscardreply = function() {
  return this.setDiscardreply(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.threads.pb.WriteTransactionReply.prototype.hasDiscardreply = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.threads.pb.ListenRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.ListenRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.ListenRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.ListenRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.ListenRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    dbid: msg.getDbid_asB64(),
    filtersList: jspb.Message.toObjectList(msg.getFiltersList(),
    proto.threads.pb.ListenRequest.Filter.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.ListenRequest}
 */
proto.threads.pb.ListenRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.ListenRequest;
  return proto.threads.pb.ListenRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.ListenRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.ListenRequest}
 */
proto.threads.pb.ListenRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDbid(value);
      break;
    case 2:
      var value = new proto.threads.pb.ListenRequest.Filter;
      reader.readMessage(value,proto.threads.pb.ListenRequest.Filter.deserializeBinaryFromReader);
      msg.addFilters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.ListenRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.ListenRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.ListenRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.ListenRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDbid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getFiltersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.threads.pb.ListenRequest.Filter.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.ListenRequest.Filter.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.ListenRequest.Filter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.ListenRequest.Filter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.ListenRequest.Filter.toObject = function(includeInstance, msg) {
  var f, obj = {
    collectionname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    instanceid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    action: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.ListenRequest.Filter}
 */
proto.threads.pb.ListenRequest.Filter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.ListenRequest.Filter;
  return proto.threads.pb.ListenRequest.Filter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.ListenRequest.Filter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.ListenRequest.Filter}
 */
proto.threads.pb.ListenRequest.Filter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollectionname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInstanceid(value);
      break;
    case 3:
      var value = /** @type {!proto.threads.pb.ListenRequest.Filter.Action} */ (reader.readEnum());
      msg.setAction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.ListenRequest.Filter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.ListenRequest.Filter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.ListenRequest.Filter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.ListenRequest.Filter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCollectionname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInstanceid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAction();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.threads.pb.ListenRequest.Filter.Action = {
  ALL: 0,
  CREATE: 1,
  SAVE: 2,
  DELETE: 3
};

/**
 * optional string collectionName = 1;
 * @return {string}
 */
proto.threads.pb.ListenRequest.Filter.prototype.getCollectionname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.threads.pb.ListenRequest.Filter} returns this
 */
proto.threads.pb.ListenRequest.Filter.prototype.setCollectionname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string instanceID = 2;
 * @return {string}
 */
proto.threads.pb.ListenRequest.Filter.prototype.getInstanceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.threads.pb.ListenRequest.Filter} returns this
 */
proto.threads.pb.ListenRequest.Filter.prototype.setInstanceid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Action action = 3;
 * @return {!proto.threads.pb.ListenRequest.Filter.Action}
 */
proto.threads.pb.ListenRequest.Filter.prototype.getAction = function() {
  return /** @type {!proto.threads.pb.ListenRequest.Filter.Action} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.threads.pb.ListenRequest.Filter.Action} value
 * @return {!proto.threads.pb.ListenRequest.Filter} returns this
 */
proto.threads.pb.ListenRequest.Filter.prototype.setAction = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional bytes dbID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.ListenRequest.prototype.getDbid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes dbID = 1;
 * This is a type-conversion wrapper around `getDbid()`
 * @return {string}
 */
proto.threads.pb.ListenRequest.prototype.getDbid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDbid()));
};


/**
 * optional bytes dbID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDbid()`
 * @return {!Uint8Array}
 */
proto.threads.pb.ListenRequest.prototype.getDbid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDbid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.pb.ListenRequest} returns this
 */
proto.threads.pb.ListenRequest.prototype.setDbid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated Filter filters = 2;
 * @return {!Array<!proto.threads.pb.ListenRequest.Filter>}
 */
proto.threads.pb.ListenRequest.prototype.getFiltersList = function() {
  return /** @type{!Array<!proto.threads.pb.ListenRequest.Filter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.threads.pb.ListenRequest.Filter, 2));
};


/**
 * @param {!Array<!proto.threads.pb.ListenRequest.Filter>} value
 * @return {!proto.threads.pb.ListenRequest} returns this
*/
proto.threads.pb.ListenRequest.prototype.setFiltersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.threads.pb.ListenRequest.Filter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.threads.pb.ListenRequest.Filter}
 */
proto.threads.pb.ListenRequest.prototype.addFilters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.threads.pb.ListenRequest.Filter, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.threads.pb.ListenRequest} returns this
 */
proto.threads.pb.ListenRequest.prototype.clearFiltersList = function() {
  return this.setFiltersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.pb.ListenReply.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.pb.ListenReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.pb.ListenReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.ListenReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    collectionname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    instanceid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    action: jspb.Message.getFieldWithDefault(msg, 3, 0),
    instance: msg.getInstance_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.pb.ListenReply}
 */
proto.threads.pb.ListenReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.pb.ListenReply;
  return proto.threads.pb.ListenReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.pb.ListenReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.pb.ListenReply}
 */
proto.threads.pb.ListenReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollectionname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInstanceid(value);
      break;
    case 3:
      var value = /** @type {!proto.threads.pb.ListenReply.Action} */ (reader.readEnum());
      msg.setAction(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setInstance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.pb.ListenReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.pb.ListenReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.pb.ListenReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.pb.ListenReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCollectionname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInstanceid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAction();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getInstance_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.threads.pb.ListenReply.Action = {
  CREATE: 0,
  SAVE: 1,
  DELETE: 2
};

/**
 * optional string collectionName = 1;
 * @return {string}
 */
proto.threads.pb.ListenReply.prototype.getCollectionname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.threads.pb.ListenReply} returns this
 */
proto.threads.pb.ListenReply.prototype.setCollectionname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string instanceID = 2;
 * @return {string}
 */
proto.threads.pb.ListenReply.prototype.getInstanceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.threads.pb.ListenReply} returns this
 */
proto.threads.pb.ListenReply.prototype.setInstanceid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Action action = 3;
 * @return {!proto.threads.pb.ListenReply.Action}
 */
proto.threads.pb.ListenReply.prototype.getAction = function() {
  return /** @type {!proto.threads.pb.ListenReply.Action} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.threads.pb.ListenReply.Action} value
 * @return {!proto.threads.pb.ListenReply} returns this
 */
proto.threads.pb.ListenReply.prototype.setAction = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional bytes instance = 4;
 * @return {!(string|Uint8Array)}
 */
proto.threads.pb.ListenReply.prototype.getInstance = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes instance = 4;
 * This is a type-conversion wrapper around `getInstance()`
 * @return {string}
 */
proto.threads.pb.ListenReply.prototype.getInstance_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getInstance()));
};


/**
 * optional bytes instance = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInstance()`
 * @return {!Uint8Array}
 */
proto.threads.pb.ListenReply.prototype.getInstance_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getInstance()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.pb.ListenReply} returns this
 */
proto.threads.pb.ListenReply.prototype.setInstance = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


goog.object.extend(exports, proto.threads.pb);
