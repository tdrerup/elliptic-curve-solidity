{"version":3,"file":"filecoin.js","sourceRoot":"","sources":["../../src/filecoin.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AACA,sEAKqC;AAErC,wDAA0B;AAC1B,+BAOc;AAUd,MAAM,MAAM,GAAG,kBAAG,CAAC,SAAS,CAAC,UAAU,CAAC,CAAA;AACxC;;;;;;;;;;;;;;;GAeG;AACH,MAAa,QAAS,SAAQ,wCAAkB;IAC9C;;;;;;;;;;;;;;;;;;;;;;;;OAwBG;IACH,MAAM,CAAC,QAAQ,CAAC,IAAwB,EAAE,OAAyB;QACjE,OAAO,IAAI,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,KAAK,CAAC,CAAA;IACnD,CAAC;IACD;;;;;;;;;;;OAWG;IACH,MAAM,CAAC,YAAY,CACjB,IAA0C,EAC1C,OAA6B;QAE7B,MAAM,GAAG,GAAG,KAAK,CAAC,YAAY,CAAC,IAAI,EAAE,OAAO,CAAC,CAAA;QAC7C,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,OAAO,CAAC,CAAA;IACpC,CAAC;IAED;;;;;;;;;;;;;;;OAeG;IACH,MAAM,CAAO,WAAW,CAAC,GAAY,EAAE,OAA4B;;;;;YACjE,MAAM,IAAI,GAAG,MAAM,OAAM,WAAW,YAAC,GAAG,EAAE,OAAO,CAAC,CAAA;YAClD,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,OAAO,CAAC,CAAA;QACrC,CAAC;KAAA;IAED;;;;;;;;;;;;OAYG;IACG,QAAQ,CAAC,QAAkB;;;;;YAC/B,OAAO,OAAM,QAAQ,YAAC,QAAQ,EAAC;QACjC,CAAC;KAAA;IAED;;OAEG;IACH,QAAQ,CAAC,KAAa;QACpB,OAAO,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAA;IAC9B,CAAC;IAED;;;;;;;;;;;;;;;;;;;;OAoBG;IACG,iBAAiB,CACrB,SAAiB,EACjB,QAAqE;;;;;YAErE,OAAO,OAAM,iBAAiB,YAAC,SAAS,EAAE,QAAQ,EAAC;QACrD,CAAC;KAAA;IAED;;;OAGG;IACG,SAAS;;YACb,OAAO,eAAS,CAAC,IAAI,CAAC,CAAA;QACxB,CAAC;KAAA;IAED;;;;OAIG;IACG,OAAO,CAAC,OAAe;;YAC3B,OAAO,aAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CAAA;QAC/B,CAAC;KAAA;IAED;;;;OAIG;IACG,UAAU,CAAC,GAAG,IAAc;;YAChC,OAAO,gBAAU,CAAC,IAAI,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC,CAAA;QAC7C,CAAC;KAAA;IAED;;;;OAIG;IACG,OAAO,CAAC,GAAW;;YACvB,OAAO,aAAO,CAAC,IAAI,EAAE,SAAS,EAAE,GAAG,CAAC,CAAA;QACtC,CAAC;KAAA;IAED;;;;OAIG;IACG,kBAAkB,CACtB,MAAyB;;YAEzB,OAAO,wBAAkB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAA;QACzC,CAAC;KAAA;IAED;;;;OAIG;IACG,oBAAoB,CACxB,MAAyB;;YAEzB,OAAO,0BAAoB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAA;QAC3C,CAAC;KAAA;CACF;AAlLD,4BAkLC","sourcesContent":["import { Identity } from '@textile/crypto'\nimport {\n  CopyAuthOptions,\n  GrpcAuthentication,\n  WithKeyInfoOptions,\n  WithUserAuthOptions,\n} from '@textile/grpc-authentication'\nimport { KeyInfo, UserAuth } from '@textile/security'\nimport log from 'loglevel'\nimport {\n  addresses,\n  balance,\n  cidInfo,\n  cidSummary,\n  retrievalDealRecords,\n  storageDealRecords,\n} from './api'\nimport {\n  AddressInfo,\n  CidInfo,\n  CidSummary,\n  DealRecordsConfig,\n  RetrievalDealRecord,\n  StorageDealRecord,\n} from './types'\n\nconst logger = log.getLogger('filecoin')\n/**\n * Filecoin is a client wrapper for interacting with the Textile Hub Filecoin API.\n * @example\n * Initialize the Bucket API and open an existing bucket (or create if new).\n * ```typescript\n * import { Filecoin, PrivateKey, UserAuth } from '@textile/hub'\n *\n * const getAddresses = async (auth: UserAuth, user: PrivateKey) => {\n *   const filecoin = Filecoin.withUserAuth(auth)\n *   // Scope the API to the current user\n *   await filecoin.getToken(user)\n *   // List wallet addresses\n *   const health = await filecoin.addresses()\n * }\n * ```\n */\nexport class Filecoin extends GrpcAuthentication {\n  /**\n   * {@inheritDoc @textile/hub#GrpcAuthentication.copyAuth}\n   *\n   * @example\n   * Copy an authenticated Users api instance to Filecoin.\n   * ```typescript\n   * import { Filecoin, Users } from '@textile/hub'\n   *\n   * const usersToFilecoin = async (user: Users) => {\n   *   const filecoin = Filecoin.copyAuth(user)\n   *   return filecoin\n   * }\n   * ```\n   *\n   * @example\n   * Copy an authenticated Filecoin api instance to Users.\n   * ```typescript\n   * import { Filecoin, Users } from '@textile/hub'\n   *\n   * const filecoinToUsers = async (filecoin: Filecoin) => {\n   *   const user = Users.copyAuth(filecoin)\n   *   return user\n   * }\n   * ```\n   */\n  static copyAuth(auth: GrpcAuthentication, options?: CopyAuthOptions) {\n    return new Filecoin(auth.context, options?.debug)\n  }\n  /**\n   * {@inheritDoc @textile/hub#GrpcAuthentication.withUserAuth}\n   *\n   * @example\n   * ```@typescript\n   * import { Filecoin, UserAuth } from '@textile/hub'\n   *\n   * async function example (userAuth: UserAuth) {\n   *   const filecoin = await Filecoin.withUserAuth(userAuth)\n   * }\n   * ```\n   */\n  static withUserAuth(\n    auth: UserAuth | (() => Promise<UserAuth>),\n    options?: WithUserAuthOptions,\n  ) {\n    const res = super.withUserAuth(auth, options)\n    return this.copyAuth(res, options)\n  }\n\n  /**\n   * {@inheritDoc @textile/hub#GrpcAuthentication.withKeyInfo}\n   *\n   * @example\n   * ```@typescript\n   * import { Filecoin, KeyInfo } from '@textile/hub'\n   *\n   * async function start () {\n   *   const keyInfo: KeyInfo = {\n   *     key: '<api key>',\n   *     secret: '<api secret>'\n   *   }\n   *   const filecoin = await Filecoin.withKeyInfo(keyInfo)\n   * }\n   * ```\n   */\n  static async withKeyInfo(key: KeyInfo, options?: WithKeyInfoOptions) {\n    const auth = await super.withKeyInfo(key, options)\n    return this.copyAuth(auth, options)\n  }\n\n  /**\n   * {@inheritDoc @textile/hub#GrpcAuthentication.getToken}\n   *\n   * @example\n   * ```@typescript\n   * import { Filecoin, PrivateKey } from '@textile/hub'\n   *\n   * async function example (filecoin: Filecoin, identity: PrivateKey) {\n   *   const token = await filecoin.getToken(identity)\n   *   return token // already added to `filecoin` scope\n   * }\n   * ```\n   */\n  async getToken(identity: Identity) {\n    return super.getToken(identity)\n  }\n\n  /**\n   * {@inheritDoc @textile/hub#GrpcAuthentication.getToken}\n   */\n  setToken(token: string) {\n    return super.setToken(token)\n  }\n\n  /**\n   * {@inheritDoc @textile/hub#GrpcAuthentication.getTokenChallenge}\n   *\n   * @example\n   * ```typescript\n   * import { Filecoin, PrivateKey } from '@textile/hub'\n   *\n   * async function example (filecoin: Filecoin, identity: PrivateKey) {\n   *   const token = await filecoin.getTokenChallenge(\n   *     identity.public.toString(),\n   *     (challenge: Uint8Array) => {\n   *       return new Promise((resolve, reject) => {\n   *         // This is where you should program PrivateKey to respond to challenge\n   *         // Read more here: https://docs.textile.io/tutorials/hub/production-auth/\n   *       })\n   *     }\n   *   )\n   *   return token\n   * }\n   * ```\n   */\n  async getTokenChallenge(\n    publicKey: string,\n    callback: (challenge: Uint8Array) => Uint8Array | Promise<Uint8Array>,\n  ): Promise<string> {\n    return super.getTokenChallenge(publicKey, callback)\n  }\n\n  /**\n   * List all Filecoin wallet addresses associated with the current account or user.\n   * @beta\n   */\n  async addresses(): Promise<AddressInfo[]> {\n    return addresses(this)\n  }\n\n  /**\n   * Get the balance for any wallet address.\n   * @beta\n   * @param address The wallet address to check the balance of.\n   */\n  async balance(address: string): Promise<bigint> {\n    return balance(this, address)\n  }\n\n  /**\n   * Get summary information about the storage and storage job state of cids stored by the user.\n   * @beta\n   * @param cids The cids to get summary info for.\n   */\n  async cidSummary(...cids: string[]): Promise<CidSummary[]> {\n    return cidSummary(this, undefined, ...cids)\n  }\n\n  /**\n   * Get information about the storage and storage job state of a cid stored by the user.\n   * @beta\n   * @param cid The cid to get info for.\n   */\n  async cidInfo(cid: string): Promise<CidInfo> {\n    return cidInfo(this, undefined, cid)\n  }\n\n  /**\n   * Query for Filecoin storage deal records for the current account/user.\n   * @beta\n   * @param config A config object to control the behavior of the query.\n   */\n  async storageDealRecords(\n    config: DealRecordsConfig,\n  ): Promise<StorageDealRecord[]> {\n    return storageDealRecords(this, config)\n  }\n\n  /**\n   * Query for Filecoin retrieval deal records for the current account/user.\n   * @beta\n   * @param config A config object to control the behavior of the query.\n   */\n  async retrievalDealRecords(\n    config: DealRecordsConfig,\n  ): Promise<RetrievalDealRecord[]> {\n    return retrievalDealRecords(this, config)\n  }\n}\n"]}