{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/types.ts"],"names":[],"mappings":";;;AAmVA;;GAEG;AACH,IAAY,SAyBX;AAzBD,WAAY,SAAS;IACnB;;OAEG;IACH,uDAAW,CAAA;IACX;;OAEG;IACH,6CAAM,CAAA;IACN;;OAEG;IACH,mDAAS,CAAA;IACT;;OAEG;IACH,6CAAM,CAAA;IACN;;OAEG;IACH,iDAAQ,CAAA;IACR;;OAEG;IACH,+CAAO,CAAA;AACT,CAAC,EAzBW,SAAS,GAAT,iBAAS,KAAT,iBAAS,QAyBpB","sourcesContent":["/**\n * Information about a wallet address.\n */\nexport interface AddressInfo {\n  /**\n   * Human readable name.\n   */\n  name: string\n  /**\n   * The address.\n   */\n  address: string\n  /**\n   * The type of wallet address.\n   */\n  type: string\n  /**\n   * The wallet address balance in attoFIL.\n   */\n  balance: bigint\n}\n\n/**\n * IPFS related storage configuration.\n */\nexport interface IpfsConfig {\n  /**\n   * Upper bound on adding data to IPFS node from the network before failing.\n   */\n  addTimeout: number\n}\n\n/**\n * Hot storage configuration.\n */\nexport interface HotConfig {\n  /**\n   * Whether or not to enable hot storage.\n   */\n  enabled: boolean\n  /**\n   * Indicates that if data isn't available in hot storage, it's allowed to be fed by Cold Storage if available.\n   */\n  allowUnfreeze: boolean\n  /**\n   * Maximum amount of attoFil to pay for retrieval of data to unfreeze.\n   */\n  unfreezeMaxPrice: number\n  /**\n   * IPFS related storage configuration.\n   */\n  ipfs?: IpfsConfig\n}\n\n/**\n * Filecoin storage renew configuration.\n */\nexport interface FilRenew {\n  /**\n   * Whether or not to enable automatic renew of storage deals.\n   */\n  enabled: boolean\n  /**\n   * In epochs, how soon before expiration to renew storage deals.\n   */\n  threshold: number\n}\n\n/**\n * Filecoin storage configuration.\n */\nexport interface FilConfig {\n  /**\n   * How many miners to store the data with.\n   */\n  replicationFactor: number\n  /**\n   * Minimum number of epochs to store the data.\n   */\n  dealMinDuration: number\n  /**\n   * Miners to exclude from storage deals.\n   */\n  excludedMiners: string[]\n  /**\n   * Miners to prefer for deal making.\n   */\n  trustedMiners: string[]\n  /**\n   * Preferred locations of minders to store data with.\n   */\n  countryCodes: string[]\n  /**\n   * Storage renew configuration.\n   */\n  renew?: FilRenew\n  /**\n   * The wallet address to pay for storage.\n   */\n  address: string\n  /**\n   * The max price to pay for storage in units of attoFIL per GiB per epoch.\n   */\n  maxPrice: number\n  /**\n   * Whether or not to enable fast retrieval feature.\n   */\n  fastRetrieval: boolean\n  /**\n   * How many epochs in the future impose a deadline to new deals being active on-chain.\n   * This value might influence if miners accept deals, since they should seal fast enough to satisfy this constraint.\n   */\n  dealStartOffset: number\n}\n\n/**\n * Cold storage configuration.\n */\nexport interface ColdConfig {\n  /**\n   * Whether or not to enable cold storage.\n   */\n  enabled: boolean\n  /**\n   * Filecoin storage configuration.\n   */\n  filecoin?: FilConfig\n}\n\n/**\n * Configuration for storing data in Powergate.\n */\nexport interface StorageConfig {\n  /**\n   * Hot storage configuration.\n   */\n  hot?: HotConfig\n  /**\n   * Cold storage configuration.\n   */\n  cold?: ColdConfig\n  /**\n   * Whether or not to enable storage auto repair.\n   */\n  repairable: boolean\n}\n\n/**\n * Current IPFS storage state.\n */\nexport interface IpfsHotInfo {\n  /**\n   * When the data was stored in IPFS.\n   */\n  created: Date\n}\n\n/**\n * Current hot storage state.\n */\nexport interface HotInfo {\n  /**\n   * Whether or not hot storage is enabled.\n   */\n  enabled: boolean\n  /**\n   * The size of the data in bytes.\n   */\n  size: number\n  /**\n   * Current IPFS storage state.\n   */\n  ipfs?: IpfsHotInfo\n}\n\n/**\n * Current Filecoin storage state with a single miner.\n */\nexport interface FilStorage {\n  /**\n   * The unique deal id.\n   */\n  dealId: number\n  /**\n   * Whether or not the current storage is a renewal.\n   */\n  renewed: boolean\n  /**\n   * The number of epochs the data is being stored for.\n   */\n  duration: number\n  /**\n   * The starting epoch in which the deal is considered active on-chain.\n   */\n  startEpoch: number\n  /**\n   * The miner the data is stored with.\n   */\n  miner: string\n  /**\n   * The storage price in attoFIL per GiB per epoch.\n   */\n  epochPrice: number\n  /**\n   * The piece cid.\n   */\n  pieceCid: string\n}\n\n/**\n * Current Filecoin storage state.\n */\nexport interface FilInfo {\n  /**\n   * The cid of the data being stored.\n   */\n  dataCid: string\n  /**\n   * The size of the data being stored.\n   */\n  size: number\n  /**\n   * Current Filecoin storage state with each miner.\n   */\n  proposals: FilStorage[]\n}\n\n/**\n * Current cold storage state.\n */\nexport interface ColdInfo {\n  /**\n   * Whether or not cold storage is enabled.\n   */\n  enabled: boolean\n  /**\n   * Current Filecoin storage state.\n   */\n  filecoin?: FilInfo\n}\n\n/**\n * Current data storage state.\n */\nexport interface StorageInfo {\n  /**\n   * The id of the job that executed the data storage.\n   */\n  jobId: string\n  /**\n   * The data cid.\n   */\n  cid: string\n  /**\n   * The timestamp of when the data was stored.\n   */\n  created: Date\n  /**\n   * Current hot storage state.\n   */\n  hot?: HotInfo\n  /**\n   * Current cold storage state.\n   */\n  cold?: ColdInfo\n}\n\n/**\n * Information about a Filecoin storage deal.\n */\nexport interface StorageDealInfo {\n  /**\n   * The cid of the deal proposal.\n   */\n  proposalCid: string\n  /**\n   * The id of the current deal state.\n   */\n  stateId: number\n  /**\n   * The name of the current deal state.\n   */\n  stateName: string\n  /**\n   * The id of the miner for the deal.\n   */\n  miner: string\n  /**\n   * The piece cid.\n   */\n  pieceCid: string\n  /**\n   * The size of the stored data in bytes, including padding.\n   */\n  size: number\n  /**\n   * The storage price in units of attoFIL per GiB per epoch.\n   */\n  pricePerEpoch: number\n  /**\n   * The start epoch of the deal.\n   */\n  startEpoch: number\n  /**\n   * The duration of the deal in epochs.\n   */\n  duration: number\n  /**\n   * The deal id.\n   */\n  dealId: number\n  /**\n   * The epoch in which the deal became active, or 0 if it is not yet active.\n   */\n  activationEpoch: number\n  /**\n   * A message from the miner.\n   */\n  message: string\n}\n\n/**\n * Information about a deal error.\n */\nexport interface DealError {\n  /**\n   * The proposal cid.\n   */\n  proposalCid: string\n  /**\n   * The miner.\n   */\n  miner: string\n  /**\n   * A message describing the error.\n   */\n  message: string\n}\n\n/**\n * Storage job status codes\n */\nexport enum JobStatus {\n  /**\n   * Status is not specified.\n   */\n  Unspecified,\n  /**\n   * The job is queued.\n   */\n  Queued,\n  /**\n   * The job is executing.\n   */\n  Executing,\n  /**\n   * The job has failed.\n   */\n  Failed,\n  /**\n   * The job was canceled.\n   */\n  Canceled,\n  /**\n   * The job succeeded.\n   */\n  Success,\n}\n\n/**\n * Information about a storage job.\n */\nexport interface StorageJob {\n  /**\n   * The job id.\n   */\n  id: string\n  /**\n   * An internal id associated with the user.\n   */\n  apiId: string\n  /**\n   * The data cid the job is operating on.\n   */\n  cid: string\n  /**\n   * The current job status.\n   */\n  status: JobStatus\n  /**\n   * In case of failed job, a message describing the cause.\n   */\n  errorCause: string\n  /**\n   * Information about Filecoin storage deals the job is managing.\n   */\n  dealInfo: StorageDealInfo[]\n  /**\n   * Information about any Filecoin deal errors that occurred.\n   */\n  dealErrors: DealError[]\n  /**\n   * The time the job was created.\n   */\n  createdAt: Date\n}\n\n/**\n * Summary information about a cid in Powergate.\n */\nexport interface CidSummary {\n  /**\n   * The cid.\n   */\n  cid: string\n  /**\n   * Whether or not the data is already stored by Powergate.\n   */\n  stored: boolean\n  /**\n   * A list of queued job ids for the cid.\n   */\n  queuedJobs: string[]\n  /**\n   * The id of the executing job for the cid if there is one.\n   */\n  executingJob?: string\n}\n\n/**\n * Information about the current jobs and storage state of a data cid.\n */\nexport interface CidInfo {\n  /**\n   * The data cid.\n   */\n  cid: string\n  /**\n   * The latest storage configuration applied, or undefined if there isn't one.\n   */\n  latestStorageConfig?: StorageConfig\n  /**\n   * Current data storage state, or undefined if there is none.\n   */\n  currentStorageInfo?: StorageInfo\n  /**\n   * Information about queued storage jobs.\n   */\n  queuedStorageJobs: StorageJob[]\n  /**\n   * Information about the executing storage job or undefined if there isn't one.\n   */\n  executingStorageJob?: StorageJob\n}\n\n/**\n * A record of a single storage deal.\n */\nexport interface StorageDealRecord {\n  /**\n   * The data cid.\n   */\n  rootCid: string\n  /**\n   * The wallet address used to pay for the deal.\n   */\n  address: string\n  /**\n   * The timestamp of the deal.\n   */\n  time: Date\n  /**\n   * Whether or not the deal is processing or final.\n   */\n  pending: boolean\n  /**\n   * The current state of the deal.\n   */\n  dealInfo?: StorageDealInfo\n}\n\n/**\n * Information about a retrieval deal.\n */\nexport interface RetrievalDealInfo {\n  /**\n   * The data cid.\n   */\n  rootCid: string\n  /**\n   * The size of the data in bytes.\n   */\n  size: number\n  minPrice: number\n  paymentInterval: number\n  paymentIntervalIncrease: number\n  miner: string\n  minerPeerId: string\n}\n\n/**\n * A record of a single retrieval deal.\n */\nexport interface RetrievalDealRecord {\n  address: string\n  time: Date\n  dealInfo?: RetrievalDealInfo\n}\n\n/**\n * A configuration object to control the behavior of querying for deal records.\n */\nexport interface DealRecordsConfig {\n  /**\n   * Filter of wallet addressed used to fund the deals.\n   */\n  fromAddrs: string[]\n  /**\n   * Filter of data cids of the deals.\n   */\n  dataCids: string[]\n  /**\n   * Whether or not to include pending deals, default false.\n   */\n  includePending: boolean\n  /**\n   * Whether or not to include final deals, default false.\n   */\n  includeFinal: boolean\n  /**\n   * Whether or not to sort results by timestamp ascending, default descending.\n   */\n  ascending: boolean\n}\n"]}