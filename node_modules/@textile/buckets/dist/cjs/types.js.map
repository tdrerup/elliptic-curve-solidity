{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/types.ts"],"names":[],"mappings":";;;AAEa,QAAA,UAAU,GAAG,IAAI,KAAK,CAAC,SAAS,CAAC,CAAA;AAmJ9C,IAAY,cAKX;AALD,WAAY,cAAc;IACxB,mGAAgC,CAAA;IAChC,yFAA2B,CAAA;IAC3B,yFAA2B,CAAA;IAC3B,uFAA0B,CAAA;AAC5B,CAAC,EALW,cAAc,GAAd,sBAAc,KAAd,sBAAc,QAKzB;AA8LD;;GAEG;AACH,IAAY,aAyBX;AAzBD,WAAY,aAAa;IACvB;;OAEG;IACH,+DAAW,CAAA;IACX;;OAEG;IACH,qDAAM,CAAA;IACN;;OAEG;IACH,2DAAS,CAAA;IACT;;OAEG;IACH,qDAAM,CAAA;IACN;;OAEG;IACH,yDAAQ,CAAA;IACR;;OAEG;IACH,uDAAO,CAAA;AACT,CAAC,EAzBW,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAyBxB","sourcesContent":["import type CID from 'cids'\n\nexport const AbortError = new Error('aborted')\n\n/**\n * Options for getOrCreate\n */\nexport interface GetOrCreateOptions {\n  /**\n   * Name of the Thread where the Bucket will be created.\n   */\n  threadName?: string\n  /**\n   * Encrypt the contents of the bucket on IPFS\n   */\n  encrypted?: boolean\n  /**\n   * Seed a new bucket with the data available at the content address (CID).\n   */\n  cid?: string\n  /**\n   * ID of the Thread where the Bucket will be created.\n   * Will override any ThreadName if different.\n   */\n  threadID?: string\n}\n\n/**\n * Response from getOrCreate\n */\nexport interface GetOrCreateResponse {\n  /**\n   * Root of the bucket\n   */\n  root?: Root\n  /**\n   * ThreadID where the bucket was created.\n   */\n  threadID?: string\n}\n\nexport interface CreateOptions {\n  /**\n   * Encrypt the contents of the bucket on IPFS\n   */\n  encrypted?: boolean\n  /**\n   * Seed a new bucket with the data available at the content address (CID).\n   */\n  cid?: string\n}\n\n/**\n * Bucket create response\n */\nexport interface CreateResponse {\n  seed: Uint8Array\n  seedCid: string\n  root?: Root\n  links?: Links\n}\n/**\n * @deprecated\n */\nexport type CreateObject = CreateResponse\n\n/**\n * PushOptions provides additional options for controlling a push to a bucket path.\n */\nexport interface PushOptions {\n  /**\n   * A callback function to use for monitoring push progress.\n   */\n  progress?: (num?: number) => void\n  /**\n   * The bucket root path as a string, or root object. Important to set this property when\n   * there is a possibility of multiple parallel pushes to a bucket. Specifying this property\n   * will enforce fast-forward only updates. It not provided explicitly, the root path will\n   * be fetched via an additional API call before each push.\n   */\n  root?: Root | string\n\n  /**\n   * An optional abort signal to allow cancellation or aborting a bucket push.\n   */\n  signal?: AbortSignal\n}\n\n/**\n * RemovePathOptions provides additional options for path remove steps.\n */\nexport interface RemovePathOptions {\n  root?: Root | string\n}\n\n/**\n * The expected result format from pushing a path to a bucket\n */\nexport interface PushPathResult {\n  path: {\n    path: string\n    cid: CID\n    root: CID\n    remainder: string\n  }\n  root: string\n}\n\n/**\n * The expected result format from pushing multiple paths to a bucket\n */\nexport interface PushPathsResult {\n  path: string\n  cid: CID\n  size: number\n  pinned: number\n  root?: Root\n}\n\n/**\n * Response from bucket links query.\n */\nexport interface Links {\n  www: string\n  ipns: string\n  url: string\n}\n\n/**\n * @deprecated\n */\nexport type LinksObject = Links\n\n/**\n * Bucket root info\n */\nexport interface Root {\n  key: string\n  name: string\n  path: string\n  createdAt: number\n  updatedAt: number\n  thread: string\n}\n/**\n * @deprecated\n */\nexport type RootObject = Root\n\nexport enum PathAccessRole {\n  PATH_ACCESS_ROLE_UNSPECIFIED = 0,\n  PATH_ACCESS_ROLE_READER = 1,\n  PATH_ACCESS_ROLE_WRITER = 2,\n  PATH_ACCESS_ROLE_ADMIN = 3,\n}\n\n/**\n * Response from remote path.\n */\nexport interface RemovePathResponse {\n  /**\n   * Remaining bytes pinned.\n   */\n  pinned: number\n  /**\n   * New bucket root.\n   */\n  root?: Root\n}\n\nexport interface BuckMetadata {\n  roles: Map<string, PathAccessRole>\n  updatedAt: number\n}\n/**\n * @deprecated\n */\nexport type MetadataObject = BuckMetadata\n\n/**\n * A bucket path item response\n */\nexport interface PathItem {\n  cid: string\n  name: string\n  path: string\n  size: number\n  isDir: boolean\n  items: Array<PathItem>\n  count: number\n  metadata?: BuckMetadata\n}\n/**\n * @deprecated\n */\nexport type PathItemObject = PathItem\n\n/**\n * A bucket list path response\n */\nexport interface Path {\n  item?: PathItem\n  root?: Root\n}\n/**\n * @deprecated\n */\nexport type PathObject = Path\n\n/**\n * ArchiveConfig is the desired state of a Cid in the Filecoin network.\n */\nexport interface ArchiveConfig {\n  /**\n   * RepFactor (ignored in Filecoin testnet) indicates the desired amount of active deals\n   * with different miners to store the data. While making deals\n   * the other attributes of FilConfig are considered for miner selection.\n   */\n  repFactor: number\n  /**\n   * DealMinDuration indicates the duration to be used when making new deals.\n   */\n  dealMinDuration: number\n  /**\n   * ExcludedMiners (ignored in Filecoin testnet) is a set of miner addresses won't be ever be selected\n   * when making new deals, even if they comply to other filters.\n   */\n  excludedMiners: Array<string>\n  /**\n   * TrustedMiners (ignored in Filecoin testnet) is a set of miner addresses which will be forcibly used\n   * when making new deals. An empty/nil list disables this feature.\n   */\n  trustedMiners: Array<string>\n  /**\n   * CountryCodes (ignored in Filecoin testnet) indicates that new deals should select miners on specific countries.\n   */\n  countryCodes: Array<string>\n  /**\n   * Renew indicates deal-renewal configuration.\n   */\n  renew?: ArchiveRenew\n  /**\n   * MaxPrice is the maximum price that will be spent to store the data, 0 is no max\n   */\n  maxPrice: number\n  /**\n   *\n   * FastRetrieval indicates that created deals should enable the\n   * fast retrieval feature.\n   */\n  fastRetrieval: boolean\n  /**\n   * DealStartOffset indicates how many epochs in the future impose a\n   * deadline to new deals being active on-chain. This value might influence\n   * if miners accept deals, since they should seal fast enough to satisfy\n   * this constraint.\n   */\n  dealStartOffset: number\n  /**\n   * VerifiedDeal indicates that new deals will be verified-deals, using\n   * available datacap from the wallet address.\n   */\n  verifiedDeal: boolean\n}\n\n/**\n * ArchiveRenew contains renew configuration for a ArchiveConfig.\n */\nexport interface ArchiveRenew {\n  /**\n   * Enabled indicates that deal-renewal is enabled for this Cid.\n   */\n  enabled: boolean\n  /**\n   * Threshold indicates how many epochs before expiring should trigger\n   * deal renewal. e.g: 100 epoch before expiring.\n   */\n  threshold: number\n}\n\n/**\n * An object to configure options for Archive.\n */\nexport interface ArchiveOptions {\n  /**\n   * Provide a custom ArchiveConfig to override use of the default.\n   */\n  archiveConfig?: ArchiveConfig\n}\n\n/**\n * Information about a Filecoin deal for a bucket archive.\n */\nexport interface ArchiveDealInfo {\n  /**\n   * The cid of the deal proposal.\n   */\n  proposalCid: string\n  /**\n   * The id of the current deal state.\n   */\n  stateId: number\n  /**\n   * The name of the current deal state.\n   */\n  stateName: string\n  /**\n   * The id of the miner for the deal.\n   */\n  miner: string\n  /**\n   * The piece cid.\n   */\n  pieceCid: string\n  /**\n   * The size of the stored data in bytes, including padding.\n   */\n  size: number\n  /**\n   * The storage price in units of attoFIL per GiB per epoch.\n   */\n  pricePerEpoch: number\n  /**\n   * The start epoch of the deal.\n   */\n  startEpoch: number\n  /**\n   * The duration of the deal in epochs.\n   */\n  duration: number\n  /**\n   * The deal id.\n   */\n  dealId: number\n  /**\n   * The epoch in which the deal became active, or 0 if it is not yet active.\n   */\n  activationEpoch: number\n  /**\n   * A message from the miner.\n   */\n  message: string\n}\n\n/**\n * Archive job status codes\n */\nexport enum ArchiveStatus {\n  /**\n   * Status is not specified.\n   */\n  Unspecified,\n  /**\n   * The archive job is queued.\n   */\n  Queued,\n  /**\n   * The archive job is executing.\n   */\n  Executing,\n  /**\n   * The archive job has failed.\n   */\n  Failed,\n  /**\n   * The archive job was canceled.\n   */\n  Canceled,\n  /**\n   * The archive job succeeded.\n   */\n  Success,\n}\n\n/**\n * Information about a bucket archive.\n */\nexport interface Archive {\n  /**\n   * The data cid of the bucket at the time it was archived.\n   */\n  cid: string\n  /**\n   * The id of the archive job.\n   */\n  jobId: string\n  /**\n   * The current status of the archive job.\n   */\n  status: ArchiveStatus\n  /**\n   * Whether or not the archive was aborted.\n   */\n  aborted: boolean\n  /**\n   * If the archive was aborted, a message about why.\n   */\n  abortedMsg: string\n  /**\n   * If the archive job failed, a message about why.\n   */\n  failureMsg: string\n  /**\n   * The timestamp of when the archive was initiated.\n   */\n  createdAt: Date\n  /**\n   * A list of the underlying filecoin deal information for the archive.\n   */\n  dealInfo: Array<ArchiveDealInfo>\n}\n\n/**\n * Current and past archives for a bucket.\n */\nexport interface Archives {\n  /**\n   * The latest archive for a bucket in either a processing or final state.\n   */\n  current?: Archive\n  /**\n   * A list of past archives for a bucket.\n   */\n  history: Array<Archive>\n}\n"]}