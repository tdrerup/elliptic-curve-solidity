{"version":3,"file":"users.js","sourceRoot":"","sources":["../../src/users.ts"],"names":[],"mappings":"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","sourcesContent":["import { grpc } from '@improbable-eng/grpc-web'\nimport {\n  encrypt,\n  extractPublicKeyBytes,\n  Identity,\n  Public,\n} from '@textile/crypto'\nimport {\n  CopyAuthOptions,\n  GrpcAuthentication,\n  WithKeyInfoOptions,\n  WithUserAuthOptions,\n} from '@textile/grpc-authentication'\nimport { GetThreadResponse } from '@textile/hub-threads-client'\nimport { KeyInfo, UserAuth } from '@textile/security'\nimport {\n  deleteInboxMessage,\n  deleteSentboxMessage,\n  getMailboxID,\n  getThread,\n  getUsage,\n  GetUsageResponse,\n  InboxListOptions,\n  listInboxMessages,\n  listSentboxMessages,\n  listThreads,\n  MailboxEvent,\n  readInboxMessage,\n  sendMessage,\n  SentboxListOptions,\n  setupMailbox,\n  UsageOptions,\n  UserMessage,\n  watchMailbox,\n} from './api'\n\n/**\n * Users a client wrapper for interacting with the Textile Users API.\n *\n * This API has the ability to:\n *\n *   - Register new users with a User Group key and obtain a new API Token\n *\n *   - Get and List all Threads created for/by the user in your app.\n *\n *   - Create an inbox for the user or send message to another user's inbox.\n *\n *   - Check, read, and delete messages in a user's inbox.\n *\n * @example\n * Initialize a the User API and list their threads.\n * ```typescript\n * import { Users, UserAuth } from '@textile/hub'\n *\n * const example = async (auth: UserAuth) => {\n *   const api = Users.withUserAuth(auth)\n *   const list = api.listThreads()\n *   return list\n * }\n * ```\n *\n * @example\n * Create a new inbox for the user\n * ```typescript\n * import { Users } from '@textile/hub'\n *\n * // This method requires you already authenticate the Users object.\n * async function setupMailbox (users: Users) {\n *   await users.setupMailbox()\n * }\n * ```\n *\n * @example\n * Send a message to a public key\n * ```typescript\n * import { Users, Identity, PublicKey  } from \"@textile/hub\"\n *\n * // This method requires you already authenticate the Users object.\n *\n * async function example(users: Users, from: Identity, to: PublicKey, message: string) {\n *   const encoder = new TextEncoder()\n *   const body = encoder.encode(message)\n *   return await users.sendMessage(from, to, body)\n * }\n * ```\n */\nexport class Users extends GrpcAuthentication {\n  /**\n   * {@inheritDoc @textile/hub#GrpcAuthentication.copyAuth}\n   *\n   * @example\n   * Copy an authenticated Users api instance to Buckets.\n   * ```typescript\n   * import { Buckets, Users } from '@textile/hub'\n   *\n   * const usersToBuckets = async (user: Users) => {\n   *   const buckets = Buckets.copyAuth(user)\n   *   return buckets\n   * }\n   * ```\n   *\n   * @example\n   * Copy an authenticated Buckets api instance to Users.\n   * ```typescript\n   * import { Buckets, Users } from '@textile/hub'\n   *\n   * const bucketsToUsers = async (buckets: Buckets) => {\n   *   const user = Users.copyAuth(buckets)\n   *   return user\n   * }\n   * ```\n   */\n  static copyAuth(auth: GrpcAuthentication, options?: CopyAuthOptions): Users {\n    return new Users(auth.context, options?.debug)\n  }\n  /**\n   * {@inheritDoc @textile/hub#GrpcAuthentication.withUserAuth}\n   *\n   * @example\n   * ```@typescript\n   * import { Users, UserAuth } from '@textile/hub'\n   *\n   * async function example (userAuth: UserAuth) {\n   *   const users = await Users.withUserAuth(userAuth)\n   * }\n   * ```\n   */\n  static withUserAuth(\n    auth: UserAuth | (() => Promise<UserAuth>),\n    options?: WithUserAuthOptions,\n  ): Users {\n    const res = super.withUserAuth(auth, options)\n    return this.copyAuth(res, options)\n  }\n\n  /**\n   * {@inheritDoc @textile/hub#GrpcAuthentication.withKeyInfo}\n   *\n   * @example\n   * ```@typescript\n   * import { Users, KeyInfo } from '@textile/hub'\n   *\n   * async function start () {\n   *   const keyInfo: KeyInfo = {\n   *     key: '<api key>',\n   *     secret: '<api secret>'\n   *   }\n   *   const users = await Users.withKeyInfo(keyInfo)\n   * }\n   * ```\n   */\n  static async withKeyInfo(\n    key: KeyInfo,\n    options?: WithKeyInfoOptions,\n  ): Promise<Users> {\n    const auth = await super.withKeyInfo(key, options)\n    return this.copyAuth(auth, options)\n  }\n\n  /**\n   * {@inheritDoc @textile/hub#GrpcAuthentication.withThread}\n   *\n   * @example\n   * ```@typescript\n   * import { Client, ThreadID } from '@textile/hub'\n   *\n   * async function example (threadID: ThreadID) {\n   *   const id = threadID.toString()\n   *   const users = await Users.withThread(id)\n   * }\n   * ```\n   */\n  withThread(threadID?: string): void {\n    return super.withThread(threadID)\n  }\n\n  /**\n   * {@inheritDoc @textile/hub#GrpcAuthentication.getToken}\n   *\n   * @example\n   * ```@typescript\n   * import { Users, PrivateKey } from '@textile/hub'\n   *\n   * async function example (users: Users, identity: PrivateKey) {\n   *   const token = await users.getToken(identity)\n   *   return token // already added to `users` scope\n   * }\n   * ```\n   */\n  async getToken(identity: Identity): Promise<string> {\n    return super.getToken(identity)\n  }\n\n  /**\n   * {@inheritDoc @textile/hub#GrpcAuthentication.getToken}\n   */\n  setToken(token: string): Promise<void> {\n    return super.setToken(token)\n  }\n\n  /**\n   * {@inheritDoc @textile/hub#GrpcAuthentication.getTokenChallenge}\n   *\n   * @example\n   * ```typescript\n   * import { Users, PrivateKey } from '@textile/hub'\n   *\n   * async function example (users: Users, identity: PrivateKey) {\n   *   const token = await users.getTokenChallenge(\n   *     identity.public.toString(),\n   *     (challenge: Uint8Array) => {\n   *       return new Promise((resolve, reject) => {\n   *         // This is where you should program PrivateKey to respond to challenge\n   *         // Read more here: https://docs.textile.io/tutorials/hub/production-auth/\n   *       })\n   *     }\n   *   )\n   *   return token\n   * }\n   * ```\n   */\n  async getTokenChallenge(\n    publicKey: string,\n    callback: (challenge: Uint8Array) => Uint8Array | Promise<Uint8Array>,\n  ): Promise<string> {\n    return super.getTokenChallenge(publicKey, callback)\n  }\n\n  /**\n   * GetUsage returns current billing and usage information.\n   *\n   * @example\n   * ```typescript\n   * import { Users } from \"@textile/hub\"\n   *\n   * async function example(users: Users) {\n   *    const usage = await users.getUsage()\n   * }\n   * ```\n   */\n  async getUsage(options?: UsageOptions): Promise<GetUsageResponse> {\n    return getUsage(this, options)\n  }\n\n  /**\n   * Lists a users existing threads. This method\n   * requires a valid user, token, and session.\n   *\n   * @example\n   * ```typescript\n   * import { Users } from \"@textile/hub\"\n   *\n   * async function example(users: Users) {\n   *    const list = await users.listThreads()\n   * }\n   * ```\n   */\n  async listThreads(): Promise<Array<GetThreadResponse>> {\n    return listThreads(this)\n  }\n\n  /**\n   * Gets a users existing thread by name.\n   *\n   * @example\n   * ```typescript\n   * import { Users } from \"@textile/hub\"\n   *\n   * async function example(users: Users) {\n   *    const thread = await users.getThread('thread-name')\n   *    return thread\n   * }\n   * ```\n   */\n  async getThread(name: string): Promise<GetThreadResponse> {\n    return getThread(this, name)\n  }\n\n  /**\n   * Setup a user's inbox. This is required for each new user.\n   * An inbox must be setup by the inbox owner (keys) before\n   * messages can be sent to it.\n   *\n   * @returns mailboxID\n   *\n   * @example\n   * ```typescript\n   * import { Users } from \"@textile/hub\"\n   *\n   * async function example(users: Users) {\n   *    return await users.setupMailbox()\n   * }\n   * ```\n   */\n  async setupMailbox(): Promise<string> {\n    return setupMailbox(this)\n  }\n\n  /**\n   * Returns the mailboxID of the current user if it exists.\n   *\n   * @returns {string} mailboxID\n   */\n  async getMailboxID(): Promise<string> {\n    return getMailboxID(this)\n  }\n\n  /**\n   * A local user can author messages to remote user through their public-key\n   *\n   * @param from defines the local, sending, user. Any object that conforms to the Identity interface.\n   * @param to defines the remote, receiving user. Any object that conforms to the Public interface.\n   * @param body is the message body bytes in UInt8Array format.\n   *\n   * @example\n   * ```typescript\n   * import { Users, Identity, PublicKey  } from \"@textile/hub\"\n   *\n   * async function example(users: Users, from: Identity, to: PublicKey, message: string) {\n   *   const encoder = new TextEncoder()\n   *   const body = encoder.encode(message)\n   *   return await users.sendMessage(from, to, body)\n   * }\n   * ```\n   */\n  async sendMessage(\n    from: Identity,\n    to: Public,\n    body: Uint8Array,\n  ): Promise<UserMessage> {\n    const toBytes = extractPublicKeyBytes(to)\n    const fromBytes = extractPublicKeyBytes(from.public)\n    const fromBody = await encrypt(body, fromBytes)\n    const fromSig = await from.sign(fromBody)\n    const toBody = await encrypt(body, toBytes)\n    const toSig = await from.sign(toBody)\n    return sendMessage(\n      this,\n      from.public.toString(),\n      to.toString(),\n      toBody,\n      toSig,\n      fromBody,\n      fromSig,\n    )\n  }\n\n  /**\n   * List the inbox of the local user\n   *\n   * @example\n   * ```typescript\n   * import { Users, Status } from \"@textile/hub\"\n   *\n   * async function example(users: Users) {\n   *    return await users.listInboxMessages({\n   *      limit: 5,\n   *      ascending: true,\n   *      status: Status.UNREAD,\n   *    })\n   * }\n   * ```\n   */\n  async listInboxMessages(\n    opts?: InboxListOptions,\n  ): Promise<Array<UserMessage>> {\n    return listInboxMessages(this, opts)\n  }\n\n  /**\n   * List the sent messages of the local user\n   *\n   * @example\n   * ```typescript\n   * import { Users } from \"@textile/hub\"\n   *\n   * async function example(users: Users) {\n   *    return await users.listSentboxMessages({\n   *      limit: 5,\n   *      ascending: true,\n   *    })\n   * }\n   * ```\n   */\n  async listSentboxMessages(\n    opts?: SentboxListOptions,\n  ): Promise<Array<UserMessage>> {\n    return listSentboxMessages(this, opts)\n  }\n\n  /**\n   * Mark a message as read\n   *\n   * @example\n   * ```typescript\n   * import { Users } from \"@textile/hub\"\n   *\n   * async function example(users: Users) {\n   *    const res = await users.listInboxMessages({\n   *      limit: 1,\n   *      ascending: true,\n   *    })\n   *    if (res.length === 1) users.readInboxMessage(res[0].id)\n   * }\n   * ```\n   */\n  async readInboxMessage(id: string): Promise<{ readAt: number }> {\n    return readInboxMessage(this, id)\n  }\n\n  /**\n   * Mark a message as read\n   *\n   * @example\n   * ```typescript\n   * import { Users } from \"@textile/hub\"\n   *\n   * async function example(users: Users) {\n   *    const res = await users.listInboxMessages({\n   *      limit: 1,\n   *      ascending: true,\n   *    })\n   *    if (res.length === 1) users.deleteInboxMessage(res[0].id)\n   * }\n   * ```\n   */\n  async deleteInboxMessage(id: string): Promise<void> {\n    return deleteInboxMessage(this, id)\n  }\n\n  /**\n   * Mark a message as read\n   *\n   * @example\n   * ```typescript\n   * import { Users } from \"@textile/hub\"\n   *\n   * async function example(users: Users) {\n   *    const res = await users.listSentboxMessages({\n   *      limit: 1,\n   *      ascending: true,\n   *    })\n   *    if (res.length === 1) users.deleteInboxMessage(res[0].id)\n   * }\n   * ```\n   */\n  async deleteSentboxMessage(id: string): Promise<void> {\n    return deleteSentboxMessage(this, id)\n  }\n\n  /**\n   * watchInbox watches the inbox for new mailbox events.\n   * Returns a listener of watch connectivity states.\n   * @returns listener. listener.close will stop watching.\n   * @param id the mailbox id\n   * @param callback handles each new mailbox event\n   *\n   * @example\n   * Listen and log all new inbox events\n   *\n   * ```typescript\n   * import { Users, MailboxEvent } from '@textile/hub'\n   *\n   * const callback = async (reply?: MailboxEvent, err?: Error) => {\n   *   if (!reply || !reply.message) return console.log('no message')\n   *   console.log(reply.type)\n   * }\n   *\n   * async function example (users: Users) {\n   *   const mailboxID = await users.getMailboxID()\n   *   const closer = await users.watchInbox(mailboxID, callback)\n   *   return closer\n   * }\n   * ```\n   *\n   * @example\n   * Decrypt a new message in local user's inbox sent by listener callback\n   *\n   * ```typescript\n   * import { Users, MailboxEvent, PrivateKey } from '@textile/hub'\n   *\n   * const userID = PrivateKey.fromRandom()\n   *\n   * const callback = async (reply?: MailboxEvent, err?: Error) => {\n   *   if (!reply || !reply.message) return console.log('no message')\n   *   const bodyBytes = await userID.decrypt(reply.message.body)\n   *\n   *   const decoder = new TextDecoder()\n   *   const body = decoder.decode(bodyBytes)\n   *\n   *   console.log(body)\n   * }\n   *\n   * // Requires userID already be authenticated to the Users API\n   * async function startListener(users: Users) {\n   *   const mailboxID = await users.getMailboxID()\n   *   const closer = await users.watchInbox(mailboxID, callback)\n   * }\n   * ```\n   */\n\n  watchInbox(\n    id: string,\n    callback: (reply?: MailboxEvent, err?: Error) => void,\n  ): grpc.Request {\n    return watchMailbox(this, id, 'inbox', callback)\n  }\n  /**\n   * watchSentbox watches the sentbox for new mailbox events.\n   * Returns a listener of watch connectivity states.\n   * @returns listener. listener.close will stop watching.\n   * @param id the mailbox id\n   * @param callback handles each new mailbox event.\n   *\n   * @example\n   * The local user's own sentbox can be decrypted with their private key\n   *\n   * ```typescript\n   * import { Users, MailboxEvent, PrivateKey } from '@textile/hub'\n   *\n   * const userID = PrivateKey.fromRandom()\n   *\n   * const callback = async (reply?: MailboxEvent, err?: Error) => {\n   *   if (!reply || !reply.message) return console.log('no message')\n   *   const bodyBytes = await userID.decrypt(reply.message.body)\n   *\n   *   const decoder = new TextDecoder()\n   *   const body = decoder.decode(bodyBytes)\n   *\n   *   console.log(body)\n   * }\n   *\n   * // Requires userID already be authenticated to the Users API\n   * async function startListener(users: Users) {\n   *   const mailboxID = await users.getMailboxID()\n   *   const closer = await users.watchInbox(mailboxID, callback)\n   * }\n   * ```\n   */\n  watchSentbox(\n    id: string,\n    callback: (reply?: MailboxEvent, err?: Error) => void,\n  ): grpc.Request {\n    return watchMailbox(this, id, 'sentbox', callback)\n  }\n}\n"]}