{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;GAMG;AACH,6CAAkC;AAClC,6CAA0C;AAC1C,0DAAiC;AAEjC,MAAM,OAAO,GAAG,IAAI,WAAW,EAAE,CAAA;AACjC,MAAM,OAAO,GAAG,IAAI,WAAW,EAAE,CAAA;AA8DjC;;;;;;;;;;;;;;;;;;GAkBG;AACH,SAAsB,YAAY,CAChC,MAAc,EACd,OAAa,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC;;QAElD,MAAM,GAAG,GAAG,mBAAS,CAAC,MAAM,CAAC,MAAM,CAAC,CAAA;QACpC,MAAM,GAAG,GAAG,IAAI,CAAC,WAAW,EAAE,CAAA;QAC9B,MAAM,IAAI,GAAG,IAAI,kBAAI,CAAC,GAAG,CAAC,CAAA;QAC1B,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,EAAE,CAAA;QACrD,MAAM,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,mBAAS,CAAC,MAAM,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAA;QAC3D,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,CAAA;IACrB,CAAC;CAAA;AAVD,oCAUC;AAED;;;;;;;;;;;;;;;;;;;;;;;;;GAyBG;AACH,SAAsB,cAAc,CAClC,GAAW,EACX,MAAc,EACd,IAAW,EACX,KAAc;;QAEd,MAAM,OAAO,GAAG,MAAM,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,CAAA;QAChD,uCACK,OAAO,KACV,GAAG;YACH,KAAK,IACN;IACH,CAAC;CAAA;AAZD,wCAYC;AAED,wCAAqB","sourcesContent":["/**\n * Common types/methods for Textile security including authentication and authorization.\n *\n * All methods here should be imported directly from the @textile/hub library.\n *\n * @packageDocumentation\n */\nimport { HMAC } from 'fast-sha256'\nimport 'fastestsmallesttextencoderdecoder'\nimport multibase from 'multibase'\n\nconst encoder = new TextEncoder()\nconst decoder = new TextDecoder()\n\n/**\n * UserAuth is a type describing the minimal requirements create a session from a user group key. Generate with {@link createUserAuth}.\n *\n * Optional token generated by {@link https://textileio.github.io/js-threads/classes/_textile_threads_client.client.html#gettoken | Client.getToken} or {@link https://textileio.github.io/js-threads/classes/_textile_threads_client.client.html#gettoken | Client.getTokenChallenge}.\n * @public\n * @example\n * Import\n * ```typescript\n * import {UserAuth} from '@textile/threads';\n * ```\n * @param {string} key - API key. Can be embedded/shared within an app.\n * @param {string} sig - The signature of the authentication message.\n * @param {string} msg - The authentication message.\n * @param {string} token - User verification token generated by {@link https://textileio.github.io/js-threads/classes/_textile_threads_client.client.html#gettoken | Client.getToken} or {@link https://textileio.github.io/js-threads/classes/_textile_threads_client.client.html#gettoken | Client.getTokenChallenge}.\n */\nexport type UserAuth = {\n  key: string\n  sig: string\n  msg: string\n  token?: string\n}\n\n/**\n * KeyInfo is a type that contains the API Secret. It should never be shared in insecure environments.\n * @public\n * @example\n * Import\n * ```typescript\n * import {KeyInfo} from '@textile/threads';\n * ```\n * @param {string} key - API key. Can be embedded/shared within an app.\n * @param {string} secret - User group/account secret. Should not be embedded/shared publicly.\n */\nexport type KeyInfo = {\n  /**\n   * API key. Can be embedded/shared within an app.\n   */\n  key: string\n  /**\n   * User group/account secret. Should not be embedded/shared publicly.\n   */\n  secret?: string\n}\n\n/**\n * Create an API signature for use in authenticated systems. Generate with {@link createAPISig}.\n * @public\n * @example\n * Import\n * ```typescript\n * import {APISig} from '@textile/threads';\n * ```\n * @param {string} sig - The signature of the authentication message.\n * @param {string} msg - The authentication message.\n */\nexport type APISig = {\n  sig: string\n  msg: string\n}\n\n/**\n * createAPISig generates an authorization signature and message only.\n *\n * This function should NOT be used client-side, as it requires a key secret.\n * @public\n * @example\n * Basic usage\n * ```typescript\n * import {createAPISig, APISig} from '@textile/threads'\n *\n * async function sign (key: string) {\n *   const sig: APISig = await createAPISig(key)\n *   return sig\n * }\n * ```\n * @param {string} secret - The key secret to generate the signature. See KeyInfo for details.\n * @param {Date} date - An optional future Date to use as signature message. Once `date` has passed, this\n * authorization signature and message will expire. Defaults to one minute from `Date.now`.\n */\nexport async function createAPISig(\n  secret: string,\n  date: Date = new Date(Date.now() + 1000 * 60 * 30), // Default to 30 minutes\n): Promise<APISig> {\n  const sec = multibase.decode(secret)\n  const msg = date.toISOString()\n  const hash = new HMAC(sec)\n  const mac = hash.update(encoder.encode(msg)).digest()\n  const sig = decoder.decode(multibase.encode('base32', mac))\n  return { sig, msg }\n}\n\n/**\n * Generate a UserAuth containing API key, signature, and message.\n *\n * The gRPC APIs will throw (or return an authorization error) if the message date has passed.\n * This function should NOT be used client-side, as it requires a key secret. The result does\n * not contain the secret and therefor CAN be used client side.\n * @public\n * @example\n * Create a new UserAuth\n * ```typescript\n * import {createUserAuth, KeyInfo, UserAuth} from '@textile/threads';\n *\n * async function auth (keyInfo: KeyInfo) {\n *   // Create an expiration and create a signature. 60s or less is recommended.\n *   const expiration = new Date(Date.now() + 60 * 1000)\n *   // Generate a new UserAuth\n *   const userAuth: UserAuth = await createUserAuth(keyInfo.key, keyInfo.secret ?? '', expiration)\n *   return userAuth\n * }\n * ```\n *\n * @param {string} key - The API key secret to generate the signature. See KeyInfo for details.\n * @param {string} secret - The API key secret to generate the signature. See KeyInfo for details.\n * @param {Date} date - An optional future Date to use as signature message. Default 1 minute from now.\n * @param {string} token - An optional user API token.\n */\nexport async function createUserAuth(\n  key: string,\n  secret: string,\n  date?: Date,\n  token?: string,\n): Promise<UserAuth> {\n  const partial = await createAPISig(secret, date)\n  return {\n    ...partial,\n    key,\n    token,\n  }\n}\n\nexport * from './key'\n"]}