{"version":3,"file":"key.js","sourceRoot":"","sources":["../../src/key.ts"],"names":[],"mappings":"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","sourcesContent":["import randombytes from '@consento/sync-randombytes'\nimport multibase from 'multibase'\n\nexport const errors = {\n  invalidKeyError: new Error('Invalid key'),\n}\n\nexport const randomBytes = (byteLength: number): Uint8Array => {\n  return randombytes(new Uint8Array(byteLength))\n}\n\n// KeyBytes is the length of GCM key.\nconst keyBytes = 32\n\n/**\n * keyFromString returns a key by decoding a base32-encoded string.\n * @param k Input base32-encoded string.\n */\nexport const keyFromString = (k: string): Uint8Array => {\n  return multibase.decode(k)\n}\n\n/**\n * String returns the base32-encoded string representation of raw key bytes.\n * @param k Input key bytes.\n */\nexport const keyToString = (k: Uint8Array): string => {\n  const decoder = new TextDecoder()\n  return decoder.decode(multibase.encode('base32', k))\n}\n\n/**\n * Key is a thread encryption key with two components.\n * @param sk Network key is used to encrypt outer log record linkages.\n * @param rk Read key is used to encrypt inner record events.\n */\nexport class ThreadKey {\n  constructor(readonly service: Uint8Array, readonly read?: Uint8Array) {}\n  /**\n   * Create a new set of keys.\n   * @param withRead Whether to also include a random read key.\n   */\n  static fromRandom(withRead = true): ThreadKey {\n    return new ThreadKey(\n      randomBytes(keyBytes),\n      withRead ? randomBytes(keyBytes) : undefined,\n    )\n  }\n\n  /**\n   * Create Key from bytes.\n   * @param bytes Input bytes of (possibly both) key(s).\n   */\n  static fromBytes(bytes: Uint8Array): ThreadKey {\n    if (bytes.byteLength !== keyBytes && bytes.byteLength !== keyBytes * 2) {\n      throw errors.invalidKeyError\n    }\n    const sk = bytes.slice(0, keyBytes)\n    let rk: Uint8Array | undefined\n    if (bytes.byteLength === keyBytes * 2) {\n      rk = bytes.slice(keyBytes)\n    }\n    return new ThreadKey(sk, rk)\n  }\n\n  /**\n   * Create Key by decoding a base32-encoded string.\n   * @param s The base32-encoded string.\n   */\n  static fromString(s: string): ThreadKey {\n    const data = multibase.decode(s)\n    return this.fromBytes(data)\n  }\n\n  isDefined(): boolean {\n    return this.service !== undefined\n  }\n\n  canRead(): boolean {\n    return this.read !== undefined\n  }\n\n  toBytes(): Uint8Array {\n    if (this.read !== undefined) {\n      const full = new Uint8Array(\n        this.service.byteLength + (this.read.byteLength ?? 0),\n      )\n      full.set(this.service)\n      this.read && full.set(this.read, this.service.byteLength)\n      return full\n    }\n    return this.service\n  }\n\n  /**\n   * Return the base32-encoded string representation of raw key bytes.\n   * For example:\n   * Full: \"brv7t5l2h55uklz5qwpntcat26csaasfchzof3emmdy6povabcd3a2to2qdkqdkto2prfhizerqqudqsdvwherbiy4nazqxjejgdr4oy\"\n   * Network: \"bp2vvqody5zm6yqycsnazb4kpqvycbdosos352zvpsorxce5koh7q\"\n   */\n  toString(): string {\n    return keyToString(this.toBytes())\n  }\n}\n"]}