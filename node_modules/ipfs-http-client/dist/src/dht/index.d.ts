declare function _exports(config: any): {
    get: (key: string | Uint8Array, options?: (import("ipfs-core-types").AbortOptions & import("..").HttpOptions) | undefined) => Promise<Uint8Array>;
    put: (key: Uint8Array, value: Uint8Array, options?: (import("ipfs-core-types").AbortOptions & import("..").HttpOptions) | undefined) => AsyncIterable<import("ipfs-core/src/components/dht").QueryEvent>;
    findProvs: (cid: import("cids"), options?: (import("ipfs-core/src/components/dht").FindProvsOptions & import("ipfs-core-types").AbortOptions & import("..").HttpOptions) | undefined) => AsyncIterable<import("ipfs-core/src/components/dht").PeerInfo>;
    findPeer: (peerId: import("cids") | import("peer-id"), options?: (import("ipfs-core-types").AbortOptions & import("..").HttpOptions) | undefined) => Promise<{
        id: string;
        addrs: import("multiaddr")[];
    }>;
    provide: (cids: import("cids") | import("cids")[], options?: (import("ipfs-core/src/components/dht").ProvideOptions & import("ipfs-core-types").AbortOptions & import("..").HttpOptions) | undefined) => AsyncIterable<import("ipfs-core/src/components/dht").QueryEvent>;
    query: (peerId: string | import("peer-id"), options?: (import("ipfs-core-types").AbortOptions & import("..").HttpOptions) | undefined) => AsyncIterable<{
        id: import("cids");
        addrs: import("multiaddr")[];
    }>;
};
export = _exports;
//# sourceMappingURL=index.d.ts.map