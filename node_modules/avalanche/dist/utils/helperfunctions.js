"use strict";
/**
 * @packageDocumentation
 * @module Utils-HelperFunctions
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeIDStringToBuffer = exports.bufferToNodeIDString = exports.privateKeyStringToBuffer = exports.bufferToPrivateKeyString = exports.UnixNow = exports.MaxWeightFormula = exports.getPreferredHRP = void 0;
const constants_1 = require("./constants");
const bn_js_1 = __importDefault(require("bn.js"));
const bintools_1 = __importDefault(require("../utils/bintools"));
const errors_1 = require("../utils/errors");
/**
 * @ignore
 */
const bintools = bintools_1.default.getInstance();
function getPreferredHRP(networkID = undefined) {
    if (networkID in constants_1.NetworkIDToHRP) {
        return constants_1.NetworkIDToHRP[networkID];
    }
    else if (typeof networkID === "undefined") {
        return constants_1.NetworkIDToHRP[constants_1.DefaultNetworkID];
    }
    return constants_1.FallbackHRP;
}
exports.getPreferredHRP = getPreferredHRP;
function MaxWeightFormula(staked, cap) {
    return bn_js_1.default.min(staked.mul(new bn_js_1.default(5)), cap);
}
exports.MaxWeightFormula = MaxWeightFormula;
/**
 * Function providing the current UNIX time using a {@link https://github.com/indutny/bn.js/|BN}.
 */
function UnixNow() {
    return new bn_js_1.default(Math.round(new Date().getTime() / 1000));
}
exports.UnixNow = UnixNow;
/**
 * Takes a private key buffer and produces a private key string with prefix.
 *
 * @param pk A {@link https://github.com/feross/buffer|Buffer} for the private key.
 */
function bufferToPrivateKeyString(pk) {
    return "PrivateKey-" + bintools.cb58Encode(pk);
}
exports.bufferToPrivateKeyString = bufferToPrivateKeyString;
/**
 * Takes a private key string and produces a private key {@link https://github.com/feross/buffer|Buffer}.
 *
 * @param pk A string for the private key.
 */
function privateKeyStringToBuffer(pk) {
    if (!pk.startsWith("PrivateKey-")) {
        throw new errors_1.PrivateKeyError("Error - privateKeyStringToBuffer: private keys must start with 'PrivateKey-'");
    }
    let pksplit = pk.split("-");
    return bintools.cb58Decode(pksplit[pksplit.length - 1]);
}
exports.privateKeyStringToBuffer = privateKeyStringToBuffer;
/**
 * Takes a nodeID buffer and produces a nodeID string with prefix.
 *
 * @param pk A {@link https://github.com/feross/buffer|Buffer} for the nodeID.
 */
function bufferToNodeIDString(pk) {
    return "NodeID-" + bintools.cb58Encode(pk);
}
exports.bufferToNodeIDString = bufferToNodeIDString;
/**
 * Takes a nodeID string and produces a nodeID {@link https://github.com/feross/buffer|Buffer}.
 *
 * @param pk A string for the nodeID.
 */
function NodeIDStringToBuffer(pk) {
    if (!pk.startsWith("NodeID-")) {
        throw new errors_1.NodeIdError("Error - privateNodeIDToBuffer: nodeID must start with 'NodeID-'");
    }
    let pksplit = pk.split("-");
    return bintools.cb58Decode(pksplit[pksplit.length - 1]);
}
exports.NodeIDStringToBuffer = NodeIDStringToBuffer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVyZnVuY3Rpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3V0aWxzL2hlbHBlcmZ1bmN0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOzs7Ozs7QUFFSCwyQ0FBMkU7QUFDM0Usa0RBQXNCO0FBRXRCLGlFQUF3QztBQUN4Qyw0Q0FBOEQ7QUFFOUQ7O0dBRUc7QUFDSCxNQUFNLFFBQVEsR0FBYSxrQkFBUSxDQUFDLFdBQVcsRUFBRSxDQUFBO0FBRWpELFNBQWdCLGVBQWUsQ0FBQyxZQUFvQixTQUFTO0lBQzNELElBQUksU0FBUyxJQUFJLDBCQUFjLEVBQUU7UUFDL0IsT0FBTywwQkFBYyxDQUFDLFNBQVMsQ0FBQyxDQUFBO0tBQ2pDO1NBQU0sSUFBSSxPQUFPLFNBQVMsS0FBSyxXQUFXLEVBQUU7UUFDM0MsT0FBTywwQkFBYyxDQUFDLDRCQUFnQixDQUFDLENBQUE7S0FDeEM7SUFDRCxPQUFPLHVCQUFXLENBQUE7QUFDcEIsQ0FBQztBQVBELDBDQU9DO0FBRUQsU0FBZ0IsZ0JBQWdCLENBQUMsTUFBVSxFQUFFLEdBQU87SUFDbEQsT0FBTyxlQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxlQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQTtBQUMzQyxDQUFDO0FBRkQsNENBRUM7QUFFRDs7R0FFRztBQUNILFNBQWdCLE9BQU87SUFDckIsT0FBTyxJQUFJLGVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQTtBQUN4RCxDQUFDO0FBRkQsMEJBRUM7QUFFRDs7OztHQUlHO0FBQ0gsU0FBZ0Isd0JBQXdCLENBQUMsRUFBVTtJQUNqRCxPQUFPLGFBQWEsR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0FBQ2hELENBQUM7QUFGRCw0REFFQztBQUVEOzs7O0dBSUc7QUFDSCxTQUFnQix3QkFBd0IsQ0FBQyxFQUFVO0lBQ2pELElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxFQUFFO1FBQ2pDLE1BQU0sSUFBSSx3QkFBZSxDQUN2Qiw4RUFBOEUsQ0FDL0UsQ0FBQTtLQUNGO0lBQ0QsSUFBSSxPQUFPLEdBQWEsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUNyQyxPQUFPLFFBQVEsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUN6RCxDQUFDO0FBUkQsNERBUUM7QUFFRDs7OztHQUlHO0FBQ0gsU0FBZ0Isb0JBQW9CLENBQUMsRUFBVTtJQUM3QyxPQUFPLFNBQVMsR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0FBQzVDLENBQUM7QUFGRCxvREFFQztBQUVEOzs7O0dBSUc7QUFDSCxTQUFnQixvQkFBb0IsQ0FBQyxFQUFVO0lBQzdDLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxFQUFFO1FBQzdCLE1BQU0sSUFBSSxvQkFBVyxDQUNuQixpRUFBaUUsQ0FDbEUsQ0FBQTtLQUNGO0lBQ0QsSUFBSSxPQUFPLEdBQWEsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUNyQyxPQUFPLFFBQVEsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUN6RCxDQUFDO0FBUkQsb0RBUUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQG1vZHVsZSBVdGlscy1IZWxwZXJGdW5jdGlvbnNcbiAqL1xuXG5pbXBvcnQgeyBOZXR3b3JrSURUb0hSUCwgRGVmYXVsdE5ldHdvcmtJRCwgRmFsbGJhY2tIUlAgfSBmcm9tIFwiLi9jb25zdGFudHNcIlxuaW1wb3J0IEJOIGZyb20gXCJibi5qc1wiXG5pbXBvcnQgeyBCdWZmZXIgfSBmcm9tIFwiYnVmZmVyL1wiXG5pbXBvcnQgQmluVG9vbHMgZnJvbSBcIi4uL3V0aWxzL2JpbnRvb2xzXCJcbmltcG9ydCB7IFByaXZhdGVLZXlFcnJvciwgTm9kZUlkRXJyb3IgfSBmcm9tIFwiLi4vdXRpbHMvZXJyb3JzXCJcblxuLyoqXG4gKiBAaWdub3JlXG4gKi9cbmNvbnN0IGJpbnRvb2xzOiBCaW5Ub29scyA9IEJpblRvb2xzLmdldEluc3RhbmNlKClcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFByZWZlcnJlZEhSUChuZXR3b3JrSUQ6IG51bWJlciA9IHVuZGVmaW5lZCkge1xuICBpZiAobmV0d29ya0lEIGluIE5ldHdvcmtJRFRvSFJQKSB7XG4gICAgcmV0dXJuIE5ldHdvcmtJRFRvSFJQW25ldHdvcmtJRF1cbiAgfSBlbHNlIGlmICh0eXBlb2YgbmV0d29ya0lEID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIE5ldHdvcmtJRFRvSFJQW0RlZmF1bHROZXR3b3JrSURdXG4gIH1cbiAgcmV0dXJuIEZhbGxiYWNrSFJQXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBNYXhXZWlnaHRGb3JtdWxhKHN0YWtlZDogQk4sIGNhcDogQk4pOiBCTiB7XG4gIHJldHVybiBCTi5taW4oc3Rha2VkLm11bChuZXcgQk4oNSkpLCBjYXApXG59XG5cbi8qKlxuICogRnVuY3Rpb24gcHJvdmlkaW5nIHRoZSBjdXJyZW50IFVOSVggdGltZSB1c2luZyBhIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vaW5kdXRueS9ibi5qcy98Qk59LlxuICovXG5leHBvcnQgZnVuY3Rpb24gVW5peE5vdygpOiBCTiB7XG4gIHJldHVybiBuZXcgQk4oTWF0aC5yb3VuZChuZXcgRGF0ZSgpLmdldFRpbWUoKSAvIDEwMDApKVxufVxuXG4vKipcbiAqIFRha2VzIGEgcHJpdmF0ZSBrZXkgYnVmZmVyIGFuZCBwcm9kdWNlcyBhIHByaXZhdGUga2V5IHN0cmluZyB3aXRoIHByZWZpeC5cbiAqXG4gKiBAcGFyYW0gcGsgQSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSBmb3IgdGhlIHByaXZhdGUga2V5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gYnVmZmVyVG9Qcml2YXRlS2V5U3RyaW5nKHBrOiBCdWZmZXIpOiBzdHJpbmcge1xuICByZXR1cm4gXCJQcml2YXRlS2V5LVwiICsgYmludG9vbHMuY2I1OEVuY29kZShwaylcbn1cblxuLyoqXG4gKiBUYWtlcyBhIHByaXZhdGUga2V5IHN0cmluZyBhbmQgcHJvZHVjZXMgYSBwcml2YXRlIGtleSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfS5cbiAqXG4gKiBAcGFyYW0gcGsgQSBzdHJpbmcgZm9yIHRoZSBwcml2YXRlIGtleS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByaXZhdGVLZXlTdHJpbmdUb0J1ZmZlcihwazogc3RyaW5nKTogQnVmZmVyIHtcbiAgaWYgKCFway5zdGFydHNXaXRoKFwiUHJpdmF0ZUtleS1cIikpIHtcbiAgICB0aHJvdyBuZXcgUHJpdmF0ZUtleUVycm9yKFxuICAgICAgXCJFcnJvciAtIHByaXZhdGVLZXlTdHJpbmdUb0J1ZmZlcjogcHJpdmF0ZSBrZXlzIG11c3Qgc3RhcnQgd2l0aCAnUHJpdmF0ZUtleS0nXCJcbiAgICApXG4gIH1cbiAgbGV0IHBrc3BsaXQ6IHN0cmluZ1tdID0gcGsuc3BsaXQoXCItXCIpXG4gIHJldHVybiBiaW50b29scy5jYjU4RGVjb2RlKHBrc3BsaXRbcGtzcGxpdC5sZW5ndGggLSAxXSlcbn1cblxuLyoqXG4gKiBUYWtlcyBhIG5vZGVJRCBidWZmZXIgYW5kIHByb2R1Y2VzIGEgbm9kZUlEIHN0cmluZyB3aXRoIHByZWZpeC5cbiAqXG4gKiBAcGFyYW0gcGsgQSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSBmb3IgdGhlIG5vZGVJRC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJ1ZmZlclRvTm9kZUlEU3RyaW5nKHBrOiBCdWZmZXIpOiBzdHJpbmcge1xuICByZXR1cm4gXCJOb2RlSUQtXCIgKyBiaW50b29scy5jYjU4RW5jb2RlKHBrKVxufVxuXG4vKipcbiAqIFRha2VzIGEgbm9kZUlEIHN0cmluZyBhbmQgcHJvZHVjZXMgYSBub2RlSUQge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0uXG4gKlxuICogQHBhcmFtIHBrIEEgc3RyaW5nIGZvciB0aGUgbm9kZUlELlxuICovXG5leHBvcnQgZnVuY3Rpb24gTm9kZUlEU3RyaW5nVG9CdWZmZXIocGs6IHN0cmluZyk6IEJ1ZmZlciB7XG4gIGlmICghcGsuc3RhcnRzV2l0aChcIk5vZGVJRC1cIikpIHtcbiAgICB0aHJvdyBuZXcgTm9kZUlkRXJyb3IoXG4gICAgICBcIkVycm9yIC0gcHJpdmF0ZU5vZGVJRFRvQnVmZmVyOiBub2RlSUQgbXVzdCBzdGFydCB3aXRoICdOb2RlSUQtJ1wiXG4gICAgKVxuICB9XG4gIGxldCBwa3NwbGl0OiBzdHJpbmdbXSA9IHBrLnNwbGl0KFwiLVwiKVxuICByZXR1cm4gYmludG9vbHMuY2I1OERlY29kZShwa3NwbGl0W3Brc3BsaXQubGVuZ3RoIC0gMV0pXG59XG4iXX0=