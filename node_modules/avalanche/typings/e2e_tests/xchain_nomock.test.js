"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const e2etestlib_1 = require("./e2etestlib");
const api_1 = require("src/apis/keystore/api");
const bn_js_1 = __importDefault(require("bn.js"));
describe("XChain", () => {
    let tx = { value: "" };
    let asset = { value: "" };
    let addrB = { value: "" };
    let addrC = { value: "" };
    const avalanche = e2etestlib_1.getAvalanche();
    const xchain = avalanche.XChain();
    const keystore = new api_1.KeystoreAPI(avalanche);
    const user = "avalancheJsXChainUser";
    const passwd = "avalancheJsP1ssw4rd";
    const badUser = "asdfasdfsa";
    const badPass = "pass";
    const memo = "hello world";
    const whaleAddr = "X-local18jma8ppw3nhx5r4ap8clazz0dps7rv5u00z96u";
    const key = "PrivateKey-ewoqjP7PxY4yr3iLTpLisriqt94hdyDFNgchSxGGztUrTXtNN";
    // test_name        response_promise                            resp_fn          matcher           expected_value/obtained_value
    const tests_spec = [
        ["createUser", () => keystore.createUser(user, passwd), (x) => x, e2etestlib_1.Matcher.toBe, () => true],
        ["createaddrB", () => xchain.createAddress(user, passwd), (x) => x, e2etestlib_1.Matcher.Get, () => addrB],
        ["createaddrB", () => xchain.createAddress(user, passwd), (x) => x, e2etestlib_1.Matcher.Get, () => addrC],
        ["incorrectUser", () => xchain.send(badUser, passwd, "AVAX", 10, addrB.value, [addrC.value], addrB.value, memo),
            (x) => x, e2etestlib_1.Matcher.toThrow, () => `problem retrieving user: incorrect password for user "${badUser}"`],
        ["incorrectPass", () => xchain.send(user, badPass, "AVAX", 10, addrB.value, [addrC.value], addrB.value, memo),
            (x) => x, e2etestlib_1.Matcher.toThrow, () => `problem retrieving user: incorrect password for user "${user}"`],
        ["getBalance", () => xchain.getBalance(whaleAddr, "AVAX"), (x) => x.balance, e2etestlib_1.Matcher.toBe, () => "300000000000000000"],
        ["getBalance2", () => xchain.getBalance(whaleAddr, "AVAX"), (x) => x.utxoIDs[0].txID, e2etestlib_1.Matcher.toBe, () => "2fombhL7aGPwj3KH4bfrmJwW6PVnMobf9Y2fn9GwxiAAJyFDbe"],
        ["importKey", () => xchain.importKey(user, passwd, key), (x) => x, e2etestlib_1.Matcher.toBe, () => whaleAddr],
        ["send", () => xchain.send(user, passwd, "AVAX", 10, addrB.value, [whaleAddr], whaleAddr, memo),
            (x) => x.txID, e2etestlib_1.Matcher.Get, () => tx],
        ["sendMultiple", () => xchain.sendMultiple(user, passwd, [{ assetID: "AVAX", amount: 10, to: addrB.value }, { assetID: "AVAX", amount: 20, to: addrC.value }], [whaleAddr], whaleAddr, memo), (x) => x.txID, e2etestlib_1.Matcher.Get, () => tx],
        ["listAddrs", () => xchain.listAddresses(user, passwd), (x) => x.sort(), e2etestlib_1.Matcher.toEqual, () => [whaleAddr, addrB.value, addrC.value].sort()],
        ["exportKey", () => xchain.exportKey(user, passwd, addrB.value),
            (x) => x, e2etestlib_1.Matcher.toMatch, () => /PrivateKey-\w*/],
        ["export", () => xchain.export(user, passwd, "C" + addrB.value.substring(1), new bn_js_1.default(10), "AVAX"),
            (x) => x, e2etestlib_1.Matcher.toThrow, () => "couldn't unmarshal an argument"],
        ["exportAVAX", () => xchain.exportAVAX(user, passwd, "C" + addrB.value.substring(1), new bn_js_1.default(10)),
            (x) => x, e2etestlib_1.Matcher.toThrow, () => "couldn't unmarshal an argument"],
        ["import", () => xchain.import(user, passwd, addrB.value, "C"),
            (x) => x, e2etestlib_1.Matcher.toThrow, () => "problem issuing transaction: no import inputs"],
        ["importAVAX", () => xchain.importAVAX(user, passwd, addrB.value, "P"),
            (x) => x, e2etestlib_1.Matcher.toThrow, () => "problem issuing transaction: no import inputs"],
        ["createFixed", () => xchain.createFixedCapAsset(user, passwd, "Some Coin", "SCC", 0, [{ address: whaleAddr, amount: "10000" }]),
            (x) => x, e2etestlib_1.Matcher.Get, () => asset],
        ["createVar", () => xchain.createVariableCapAsset(user, passwd, "Some Coin", "SCC", 0, [{ minters: [whaleAddr], threshold: 1 }]),
            (x) => x, e2etestlib_1.Matcher.Get, () => asset],
        ["mint", () => xchain.mint(user, passwd, 1500, asset.value, addrB.value, [whaleAddr]),
            (x) => x, e2etestlib_1.Matcher.toThrow, () => "couldn't unmarshal an argument"],
        ["getTx", () => xchain.getTx(tx.value), (x) => x, e2etestlib_1.Matcher.toMatch, () => /\w+/],
        ["getTxStatus", () => xchain.getTxStatus(tx.value), (x) => x, e2etestlib_1.Matcher.toBe, () => "Processing"],
        ["getAssetDesc", () => xchain.getAssetDescription(asset.value), (x) => [x.name, x.symbol], e2etestlib_1.Matcher.toEqual, () => ["Some Coin", "SCC"]],
    ];
    e2etestlib_1.createTests(tests_spec);
});
//# sourceMappingURL=data:application/json;base64,