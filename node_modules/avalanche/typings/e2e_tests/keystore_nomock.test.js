"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const e2etestlib_1 = require("./e2etestlib");
const api_1 = require("src/apis/keystore/api");
describe("Keystore", () => {
    const username1 = "avalancheJsUser1";
    const username2 = "avalancheJsUser2";
    const username3 = "avalancheJsUser3";
    const password = "avalancheJsP1ssw4rd";
    let exportedUser = { value: "" };
    const avalanche = e2etestlib_1.getAvalanche();
    const keystore = new api_1.KeystoreAPI(avalanche);
    // test_name             response_promise                              resp_fn  matcher           expected_value/obtained_value
    const tests_spec = [
        ["createUserWeakPass", () => keystore.createUser(username1, "weak"), (x) => x, e2etestlib_1.Matcher.toThrow, () => "password is too weak"],
        ["createUser", () => keystore.createUser(username1, password), (x) => x, e2etestlib_1.Matcher.toBe, () => true],
        ["createRepeatedUser", () => keystore.createUser(username1, password), (x) => x, e2etestlib_1.Matcher.toThrow, () => "user already exists: " + username1],
        ["listUsers", () => keystore.listUsers(), (x) => x, e2etestlib_1.Matcher.toContain, () => [username1]],
        ["exportUser", () => keystore.exportUser(username1, password), (x) => x, e2etestlib_1.Matcher.toMatch, () => /\w{78}/],
        ["getExportedUser", () => keystore.exportUser(username1, password), (x) => x, e2etestlib_1.Matcher.Get, () => exportedUser],
        ["importUser", () => keystore.importUser(username2, exportedUser.value, password),
            (x) => x, e2etestlib_1.Matcher.toBe, () => true],
        ["exportImportUser", () => (() => __awaiter(void 0, void 0, void 0, function* () {
                let exported = yield keystore.exportUser(username1, password);
                return yield keystore.importUser(username3, exported, password);
            }))(), (x) => x, e2etestlib_1.Matcher.toBe, () => true],
        ["listUsers2", () => keystore.listUsers(), (x) => x, e2etestlib_1.Matcher.toContain, () => [username1, username2, username3]],
        ["deleteUser1", () => keystore.deleteUser(username1, password), (x) => x, e2etestlib_1.Matcher.toBe, () => true],
        ["deleteUser2", () => keystore.deleteUser(username2, password), (x) => x, e2etestlib_1.Matcher.toBe, () => true],
        ["deleteUser3", () => keystore.deleteUser(username3, password), (x) => x, e2etestlib_1.Matcher.toBe, () => true],
    ];
    e2etestlib_1.createTests(tests_spec);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5c3RvcmVfbm9tb2NrLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9lMmVfdGVzdHMva2V5c3RvcmVfbm9tb2NrLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSw2Q0FBaUU7QUFDakUsK0NBQW1EO0FBRW5ELFFBQVEsQ0FBQyxVQUFVLEVBQUUsR0FBUyxFQUFFO0lBRTlCLE1BQU0sU0FBUyxHQUFXLGtCQUFrQixDQUFBO0lBQzVDLE1BQU0sU0FBUyxHQUFXLGtCQUFrQixDQUFBO0lBQzVDLE1BQU0sU0FBUyxHQUFXLGtCQUFrQixDQUFBO0lBQzVDLE1BQU0sUUFBUSxHQUFXLHFCQUFxQixDQUFBO0lBRTlDLElBQUksWUFBWSxHQUFHLEVBQUMsS0FBSyxFQUFFLEVBQUUsRUFBQyxDQUFBO0lBRTlCLE1BQU0sU0FBUyxHQUFHLHlCQUFZLEVBQUUsQ0FBQTtJQUNoQyxNQUFNLFFBQVEsR0FBRyxJQUFJLGlCQUFXLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFM0MsK0hBQStIO0lBQy9ILE1BQU0sVUFBVSxHQUFRO1FBQ3RCLENBQUMsb0JBQW9CLEVBQUUsR0FBRSxFQUFFLENBQUEsUUFBUSxDQUFDLFVBQVUsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLEVBQUssQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFBLENBQUMsRUFBRyxvQkFBTyxDQUFDLE9BQU8sRUFBSSxHQUFFLEVBQUUsQ0FBQSxzQkFBc0IsQ0FBQztRQUM3SCxDQUFDLFlBQVksRUFBVSxHQUFFLEVBQUUsQ0FBQSxRQUFRLENBQUMsVUFBVSxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsRUFBRyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUEsQ0FBQyxFQUFHLG9CQUFPLENBQUMsSUFBSSxFQUFPLEdBQUUsRUFBRSxDQUFBLElBQUksQ0FBQztRQUMzRyxDQUFDLG9CQUFvQixFQUFFLEdBQUUsRUFBRSxDQUFBLFFBQVEsQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxFQUFHLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQSxDQUFDLEVBQUcsb0JBQU8sQ0FBQyxPQUFPLEVBQUksR0FBRSxFQUFFLENBQUEsdUJBQXVCLEdBQUcsU0FBUyxDQUFDO1FBQzFJLENBQUMsV0FBVyxFQUFXLEdBQUUsRUFBRSxDQUFBLFFBQVEsQ0FBQyxTQUFTLEVBQUUsRUFBdUIsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFBLENBQUMsRUFBRyxvQkFBTyxDQUFDLFNBQVMsRUFBRSxHQUFFLEVBQUUsQ0FBQSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ2xILENBQUMsWUFBWSxFQUFVLEdBQUUsRUFBRSxDQUFBLFFBQVEsQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxFQUFHLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQSxDQUFDLEVBQUcsb0JBQU8sQ0FBQyxPQUFPLEVBQUksR0FBRSxFQUFFLENBQUEsUUFBUSxDQUFDO1FBQy9HLENBQUMsaUJBQWlCLEVBQUssR0FBRSxFQUFFLENBQUEsUUFBUSxDQUFDLFVBQVUsQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLEVBQUcsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFBLENBQUMsRUFBRyxvQkFBTyxDQUFDLEdBQUcsRUFBTSxHQUFFLEVBQUUsQ0FBQSxZQUFZLENBQUM7UUFDakgsQ0FBQyxZQUFZLEVBQVUsR0FBRSxFQUFFLENBQUEsUUFBUSxDQUFDLFVBQVUsQ0FBQyxTQUFTLEVBQUUsWUFBWSxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUM7WUFDakIsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFBLENBQUMsRUFBRyxvQkFBTyxDQUFDLElBQUksRUFBTyxHQUFFLEVBQUUsQ0FBQSxJQUFJLENBQUM7UUFDM0csQ0FBQyxrQkFBa0IsRUFBSSxHQUFFLEVBQUUsQ0FBQSxDQUFDLEdBQVMsRUFBRTtnQkFDZCxJQUFJLFFBQVEsR0FBRyxNQUFNLFFBQVEsQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDO2dCQUM5RCxPQUFPLE1BQU0sUUFBUSxDQUFDLFVBQVUsQ0FBQyxTQUFTLEVBQUUsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ2xFLENBQUMsQ0FBQSxDQUFDLEVBQUUsRUFBMkMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFBLENBQUMsRUFBRyxvQkFBTyxDQUFDLElBQUksRUFBTyxHQUFFLEVBQUUsQ0FBQSxJQUFJLENBQUM7UUFDM0csQ0FBQyxZQUFZLEVBQVUsR0FBRSxFQUFFLENBQUEsUUFBUSxDQUFDLFNBQVMsRUFBRSxFQUF1QixDQUFDLENBQUMsRUFBQyxFQUFFLENBQUEsQ0FBQyxFQUFHLG9CQUFPLENBQUMsU0FBUyxFQUFFLEdBQUUsRUFBRSxDQUFBLENBQUMsU0FBUyxFQUFDLFNBQVMsRUFBQyxTQUFTLENBQUMsQ0FBQztRQUN0SSxDQUFDLGFBQWEsRUFBUyxHQUFFLEVBQUUsQ0FBQSxRQUFRLENBQUMsVUFBVSxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsRUFBRyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUEsQ0FBQyxFQUFHLG9CQUFPLENBQUMsSUFBSSxFQUFPLEdBQUUsRUFBRSxDQUFBLElBQUksQ0FBQztRQUMzRyxDQUFDLGFBQWEsRUFBUyxHQUFFLEVBQUUsQ0FBQSxRQUFRLENBQUMsVUFBVSxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsRUFBRyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUEsQ0FBQyxFQUFHLG9CQUFPLENBQUMsSUFBSSxFQUFPLEdBQUUsRUFBRSxDQUFBLElBQUksQ0FBQztRQUMzRyxDQUFDLGFBQWEsRUFBUyxHQUFFLEVBQUUsQ0FBQSxRQUFRLENBQUMsVUFBVSxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsRUFBRyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUEsQ0FBQyxFQUFHLG9CQUFPLENBQUMsSUFBSSxFQUFPLEdBQUUsRUFBRSxDQUFBLElBQUksQ0FBQztLQUM1RyxDQUFBO0lBRUQsd0JBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQTtBQUV6QixDQUFDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldEF2YWxhbmNoZSwgY3JlYXRlVGVzdHMsIE1hdGNoZXIgfSBmcm9tIFwiLi9lMmV0ZXN0bGliXCJcbmltcG9ydCB7IEtleXN0b3JlQVBJIH0gZnJvbSBcInNyYy9hcGlzL2tleXN0b3JlL2FwaVwiXG5cbmRlc2NyaWJlKFwiS2V5c3RvcmVcIiwgKCk6IHZvaWQgPT4ge1xuXG4gIGNvbnN0IHVzZXJuYW1lMTogc3RyaW5nID0gXCJhdmFsYW5jaGVKc1VzZXIxXCJcbiAgY29uc3QgdXNlcm5hbWUyOiBzdHJpbmcgPSBcImF2YWxhbmNoZUpzVXNlcjJcIlxuICBjb25zdCB1c2VybmFtZTM6IHN0cmluZyA9IFwiYXZhbGFuY2hlSnNVc2VyM1wiXG4gIGNvbnN0IHBhc3N3b3JkOiBzdHJpbmcgPSBcImF2YWxhbmNoZUpzUDFzc3c0cmRcIlxuXG4gIGxldCBleHBvcnRlZFVzZXIgPSB7dmFsdWU6IFwiXCJ9XG5cbiAgY29uc3QgYXZhbGFuY2hlID0gZ2V0QXZhbGFuY2hlKClcbiAgY29uc3Qga2V5c3RvcmUgPSBuZXcgS2V5c3RvcmVBUEkoYXZhbGFuY2hlKVxuXG4gIC8vIHRlc3RfbmFtZSAgICAgICAgICAgICByZXNwb25zZV9wcm9taXNlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcF9mbiAgbWF0Y2hlciAgICAgICAgICAgZXhwZWN0ZWRfdmFsdWUvb2J0YWluZWRfdmFsdWVcbiAgY29uc3QgdGVzdHNfc3BlYzogYW55ID0gW1xuICAgIFtcImNyZWF0ZVVzZXJXZWFrUGFzc1wiLCAoKT0+a2V5c3RvcmUuY3JlYXRlVXNlcih1c2VybmFtZTEsIFwid2Vha1wiKSwgICAgKHgpPT54LCAgTWF0Y2hlci50b1Rocm93LCAgICgpPT5cInBhc3N3b3JkIGlzIHRvbyB3ZWFrXCJdLFxuICAgIFtcImNyZWF0ZVVzZXJcIiwgICAgICAgICAoKT0+a2V5c3RvcmUuY3JlYXRlVXNlcih1c2VybmFtZTEsIHBhc3N3b3JkKSwgICh4KT0+eCwgIE1hdGNoZXIudG9CZSwgICAgICAoKT0+dHJ1ZV0sXG4gICAgW1wiY3JlYXRlUmVwZWF0ZWRVc2VyXCIsICgpPT5rZXlzdG9yZS5jcmVhdGVVc2VyKHVzZXJuYW1lMSwgcGFzc3dvcmQpLCAgKHgpPT54LCAgTWF0Y2hlci50b1Rocm93LCAgICgpPT5cInVzZXIgYWxyZWFkeSBleGlzdHM6IFwiICsgdXNlcm5hbWUxXSxcbiAgICBbXCJsaXN0VXNlcnNcIiwgICAgICAgICAgKCk9PmtleXN0b3JlLmxpc3RVc2VycygpLCAgICAgICAgICAgICAgICAgICAgICAoeCk9PngsICBNYXRjaGVyLnRvQ29udGFpbiwgKCk9Plt1c2VybmFtZTFdXSxcbiAgICBbXCJleHBvcnRVc2VyXCIsICAgICAgICAgKCk9PmtleXN0b3JlLmV4cG9ydFVzZXIodXNlcm5hbWUxLCBwYXNzd29yZCksICAoeCk9PngsICBNYXRjaGVyLnRvTWF0Y2gsICAgKCk9Pi9cXHd7Nzh9L10sXG4gICAgW1wiZ2V0RXhwb3J0ZWRVc2VyXCIsICAgICgpPT5rZXlzdG9yZS5leHBvcnRVc2VyKHVzZXJuYW1lMSwgcGFzc3dvcmQpLCAgKHgpPT54LCAgTWF0Y2hlci5HZXQsICAgICAoKT0+ZXhwb3J0ZWRVc2VyXSxcbiAgICBbXCJpbXBvcnRVc2VyXCIsICAgICAgICAgKCk9PmtleXN0b3JlLmltcG9ydFVzZXIodXNlcm5hbWUyLCBleHBvcnRlZFVzZXIudmFsdWUsIHBhc3N3b3JkKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHgpPT54LCAgTWF0Y2hlci50b0JlLCAgICAgICgpPT50cnVlXSxcbiAgICBbXCJleHBvcnRJbXBvcnRVc2VyXCIsICAgKCk9Pihhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBleHBvcnRlZCA9IGF3YWl0IGtleXN0b3JlLmV4cG9ydFVzZXIodXNlcm5hbWUxLCBwYXNzd29yZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCBrZXlzdG9yZS5pbXBvcnRVc2VyKHVzZXJuYW1lMywgZXhwb3J0ZWQsIHBhc3N3b3JkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKCksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHgpPT54LCAgTWF0Y2hlci50b0JlLCAgICAgICgpPT50cnVlXSxcbiAgICBbXCJsaXN0VXNlcnMyXCIsICAgICAgICAgKCk9PmtleXN0b3JlLmxpc3RVc2VycygpLCAgICAgICAgICAgICAgICAgICAgICAoeCk9PngsICBNYXRjaGVyLnRvQ29udGFpbiwgKCk9Plt1c2VybmFtZTEsdXNlcm5hbWUyLHVzZXJuYW1lM11dLFxuICAgIFtcImRlbGV0ZVVzZXIxXCIsICAgICAgICAoKT0+a2V5c3RvcmUuZGVsZXRlVXNlcih1c2VybmFtZTEsIHBhc3N3b3JkKSwgICh4KT0+eCwgIE1hdGNoZXIudG9CZSwgICAgICAoKT0+dHJ1ZV0sXG4gICAgW1wiZGVsZXRlVXNlcjJcIiwgICAgICAgICgpPT5rZXlzdG9yZS5kZWxldGVVc2VyKHVzZXJuYW1lMiwgcGFzc3dvcmQpLCAgKHgpPT54LCAgTWF0Y2hlci50b0JlLCAgICAgICgpPT50cnVlXSxcbiAgICBbXCJkZWxldGVVc2VyM1wiLCAgICAgICAgKCk9PmtleXN0b3JlLmRlbGV0ZVVzZXIodXNlcm5hbWUzLCBwYXNzd29yZCksICAoeCk9PngsICBNYXRjaGVyLnRvQmUsICAgICAgKCk9PnRydWVdLFxuICBdXG5cbiAgY3JlYXRlVGVzdHModGVzdHNfc3BlYylcblxufSlcblxuIl19