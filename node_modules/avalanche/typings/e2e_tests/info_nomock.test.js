"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const e2etestlib_1 = require("./e2etestlib");
const bn_js_1 = __importDefault(require("bn.js"));
describe("Info", () => {
    const avalanche = e2etestlib_1.getAvalanche();
    let info = avalanche.Info();
    // test_name          response_promise               resp_fn                 matcher           expected_value/obtained_value
    const tests_spec = [
        ["getBlockchainID", () => info.getBlockchainID("X"), (x) => x, e2etestlib_1.Matcher.toBe, () => "2eNy1mUFdmaxXNj1eQHUe7Np4gju9sJsEtWQ4MX3ToiNKuADed"],
        ["getNetworkID", () => info.getNetworkID(), (x) => x, e2etestlib_1.Matcher.toBe, () => "12345"],
        ["getNetworkName", () => info.getNetworkName(), (x) => x, e2etestlib_1.Matcher.toBe, () => "local"],
        ["getNodeId", () => info.getNodeID(), (x) => x, e2etestlib_1.Matcher.toBe, () => "NodeID-7Xhw2mDxuDS44j42TCB6U5579esbSt3Lg"],
        ["getNodeVersion", () => info.getNodeVersion(), (x) => x, e2etestlib_1.Matcher.toMatch, () => /^avalanche\/\d*\.\d*\.\d*$/],
        ["isBootstrapped", () => info.isBootstrapped("X"), (x) => x, e2etestlib_1.Matcher.toBe, () => true],
        ["peers", () => info.peers(), (x) => x.length, e2etestlib_1.Matcher.toBe, () => 4],
        ["getTxFee1", () => info.getTxFee(), (x) => x.txFee, e2etestlib_1.Matcher.toEqual, () => new bn_js_1.default(1000000000)],
        ["getTxFee2", () => info.getTxFee(), (x) => x.creationTxFee, e2etestlib_1.Matcher.toEqual, () => new bn_js_1.default(1000000)],
    ];
    e2etestlib_1.createTests(tests_spec);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5mb19ub21vY2sudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL2UyZV90ZXN0cy9pbmZvX25vbW9jay50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsNkNBQWlFO0FBRWpFLGtEQUFzQjtBQUV0QixRQUFRLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRTtJQUVwQixNQUFNLFNBQVMsR0FBRyx5QkFBWSxFQUFFLENBQUE7SUFDaEMsSUFBSSxJQUFJLEdBQUcsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFBO0lBRTNCLDRIQUE0SDtJQUM1SCxNQUFNLFVBQVUsR0FBUTtRQUN0QixDQUFDLGlCQUFpQixFQUFFLEdBQUUsRUFBRSxDQUFBLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFBLENBQUMsRUFBa0Isb0JBQU8sQ0FBQyxJQUFJLEVBQU0sR0FBRSxFQUFFLENBQUEsb0RBQW9ELENBQUM7UUFDdEosQ0FBQyxjQUFjLEVBQUssR0FBRSxFQUFFLENBQUEsSUFBSSxDQUFDLFlBQVksRUFBRSxFQUFRLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQSxDQUFDLEVBQWtCLG9CQUFPLENBQUMsSUFBSSxFQUFNLEdBQUUsRUFBRSxDQUFBLE9BQU8sQ0FBQztRQUN6RyxDQUFDLGdCQUFnQixFQUFHLEdBQUUsRUFBRSxDQUFBLElBQUksQ0FBQyxjQUFjLEVBQUUsRUFBTSxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUEsQ0FBQyxFQUFrQixvQkFBTyxDQUFDLElBQUksRUFBTSxHQUFFLEVBQUUsQ0FBQSxPQUFPLENBQUM7UUFDekcsQ0FBQyxXQUFXLEVBQVEsR0FBRSxFQUFFLENBQUEsSUFBSSxDQUFDLFNBQVMsRUFBRSxFQUFXLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQSxDQUFDLEVBQWtCLG9CQUFPLENBQUMsSUFBSSxFQUFNLEdBQUUsRUFBRSxDQUFBLDBDQUEwQyxDQUFDO1FBQzVJLENBQUMsZ0JBQWdCLEVBQUcsR0FBRSxFQUFFLENBQUEsSUFBSSxDQUFDLGNBQWMsRUFBRSxFQUFNLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQSxDQUFDLEVBQWtCLG9CQUFPLENBQUMsT0FBTyxFQUFHLEdBQUUsRUFBRSxDQUFBLDRCQUE0QixDQUFDO1FBQzlILENBQUMsZ0JBQWdCLEVBQUcsR0FBRSxFQUFFLENBQUEsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsRUFBRyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUEsQ0FBQyxFQUFrQixvQkFBTyxDQUFDLElBQUksRUFBTSxHQUFFLEVBQUUsQ0FBQSxJQUFJLENBQUM7UUFDdEcsQ0FBQyxPQUFPLEVBQVksR0FBRSxFQUFFLENBQUEsSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFlLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQSxDQUFDLENBQUMsTUFBTSxFQUFXLG9CQUFPLENBQUMsSUFBSSxFQUFNLEdBQUUsRUFBRSxDQUFBLENBQUMsQ0FBQztRQUNuRyxDQUFDLFdBQVcsRUFBUSxHQUFFLEVBQUUsQ0FBQSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQVksQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFBLENBQUMsQ0FBQyxLQUFLLEVBQVksb0JBQU8sQ0FBQyxPQUFPLEVBQUcsR0FBRSxFQUFFLENBQUEsSUFBSSxlQUFFLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDcEgsQ0FBQyxXQUFXLEVBQVEsR0FBRSxFQUFFLENBQUEsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFZLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQSxDQUFDLENBQUMsYUFBYSxFQUFJLG9CQUFPLENBQUMsT0FBTyxFQUFHLEdBQUUsRUFBRSxDQUFBLElBQUksZUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQ2xILENBQUE7SUFFRCx3QkFBVyxDQUFDLFVBQVUsQ0FBQyxDQUFBO0FBRXpCLENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0QXZhbGFuY2hlLCBjcmVhdGVUZXN0cywgTWF0Y2hlciB9IGZyb20gXCIuL2UyZXRlc3RsaWJcIlxuaW1wb3J0IHsgSW5mb0FQSSB9IGZyb20gXCJzcmMvYXBpcy9pbmZvL2FwaVwiXG5pbXBvcnQgQk4gZnJvbSBcImJuLmpzXCJcblxuZGVzY3JpYmUoXCJJbmZvXCIsICgpID0+IHtcblxuICBjb25zdCBhdmFsYW5jaGUgPSBnZXRBdmFsYW5jaGUoKVxuICBsZXQgaW5mbyA9IGF2YWxhbmNoZS5JbmZvKClcblxuICAvLyB0ZXN0X25hbWUgICAgICAgICAgcmVzcG9uc2VfcHJvbWlzZSAgICAgICAgICAgICAgIHJlc3BfZm4gICAgICAgICAgICAgICAgIG1hdGNoZXIgICAgICAgICAgIGV4cGVjdGVkX3ZhbHVlL29idGFpbmVkX3ZhbHVlXG4gIGNvbnN0IHRlc3RzX3NwZWM6IGFueSA9IFtcbiAgICBbXCJnZXRCbG9ja2NoYWluSURcIiwgKCk9PmluZm8uZ2V0QmxvY2tjaGFpbklEKFwiWFwiKSwgKHgpPT54LCAgICAgICAgICAgICAgICAgTWF0Y2hlci50b0JlLCAgICAgKCk9PlwiMmVOeTFtVUZkbWF4WE5qMWVRSFVlN05wNGdqdTlzSnNFdFdRNE1YM1RvaU5LdUFEZWRcIl0sXG4gICAgW1wiZ2V0TmV0d29ya0lEXCIsICAgICgpPT5pbmZvLmdldE5ldHdvcmtJRCgpLCAgICAgICAoeCk9PngsICAgICAgICAgICAgICAgICBNYXRjaGVyLnRvQmUsICAgICAoKT0+XCIxMjM0NVwiXSxcbiAgICBbXCJnZXROZXR3b3JrTmFtZVwiLCAgKCk9PmluZm8uZ2V0TmV0d29ya05hbWUoKSwgICAgICh4KT0+eCwgICAgICAgICAgICAgICAgIE1hdGNoZXIudG9CZSwgICAgICgpPT5cImxvY2FsXCJdLFxuICAgIFtcImdldE5vZGVJZFwiLCAgICAgICAoKT0+aW5mby5nZXROb2RlSUQoKSwgICAgICAgICAgKHgpPT54LCAgICAgICAgICAgICAgICAgTWF0Y2hlci50b0JlLCAgICAgKCk9PlwiTm9kZUlELTdYaHcybUR4dURTNDRqNDJUQ0I2VTU1Nzllc2JTdDNMZ1wiXSxcbiAgICBbXCJnZXROb2RlVmVyc2lvblwiLCAgKCk9PmluZm8uZ2V0Tm9kZVZlcnNpb24oKSwgICAgICh4KT0+eCwgICAgICAgICAgICAgICAgIE1hdGNoZXIudG9NYXRjaCwgICgpPT4vXmF2YWxhbmNoZVxcL1xcZCpcXC5cXGQqXFwuXFxkKiQvXSxcbiAgICBbXCJpc0Jvb3RzdHJhcHBlZFwiLCAgKCk9PmluZm8uaXNCb290c3RyYXBwZWQoXCJYXCIpLCAgKHgpPT54LCAgICAgICAgICAgICAgICAgTWF0Y2hlci50b0JlLCAgICAgKCk9PnRydWVdLFxuICAgIFtcInBlZXJzXCIsICAgICAgICAgICAoKT0+aW5mby5wZWVycygpLCAgICAgICAgICAgICAgKHgpPT54Lmxlbmd0aCwgICAgICAgICAgTWF0Y2hlci50b0JlLCAgICAgKCk9PjRdLFxuICAgIFtcImdldFR4RmVlMVwiLCAgICAgICAoKT0+aW5mby5nZXRUeEZlZSgpLCAgICAgICAgICAgKHgpPT54LnR4RmVlLCAgICAgICAgICAgTWF0Y2hlci50b0VxdWFsLCAgKCk9Pm5ldyBCTigxMDAwMDAwMDAwKV0sXG4gICAgW1wiZ2V0VHhGZWUyXCIsICAgICAgICgpPT5pbmZvLmdldFR4RmVlKCksICAgICAgICAgICAoeCk9PnguY3JlYXRpb25UeEZlZSwgICBNYXRjaGVyLnRvRXF1YWwsICAoKT0+bmV3IEJOKDEwMDAwMDApXSxcbiAgXVxuXG4gIGNyZWF0ZVRlc3RzKHRlc3RzX3NwZWMpXG5cbn0pXG4iXX0=