"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTests = exports.Matcher = exports.getAvalanche = void 0;
const src_1 = require("src");
function getAvalanche() {
    if (process.env.AVALANCHEGO_IP == undefined) {
        throw "undefined environment variable: AVALANCHEGO_IP";
    }
    if (process.env.AVALANCHEGO_PORT == undefined) {
        throw "undefined environment variable: AVALANCHEGO_PORT";
    }
    const avalanche = new src_1.Avalanche(process.env.AVALANCHEGO_IP, parseInt(process.env.AVALANCHEGO_PORT), "http");
    return avalanche;
}
exports.getAvalanche = getAvalanche;
var Matcher;
(function (Matcher) {
    Matcher[Matcher["toBe"] = 0] = "toBe";
    Matcher[Matcher["toEqual"] = 1] = "toEqual";
    Matcher[Matcher["toContain"] = 2] = "toContain";
    Matcher[Matcher["toMatch"] = 3] = "toMatch";
    Matcher[Matcher["toThrow"] = 4] = "toThrow";
    Matcher[Matcher["Get"] = 5] = "Get";
})(Matcher = exports.Matcher || (exports.Matcher = {}));
function createTests(tests_spec) {
    for (const [testName, promise, preprocess, matcher, expected] of tests_spec) {
        test(testName, () => __awaiter(this, void 0, void 0, function* () {
            if (matcher == Matcher.toBe) {
                expect(preprocess(yield promise())).toBe(expected());
            }
            if (matcher == Matcher.toEqual) {
                expect(preprocess(yield promise())).toEqual(expected());
            }
            if (matcher == Matcher.toContain) {
                expect(preprocess(yield promise())).toEqual(expect.arrayContaining(expected()));
            }
            if (matcher == Matcher.toMatch) {
                expect(preprocess(yield promise())).toMatch(expected());
            }
            if (matcher == Matcher.toThrow) {
                yield expect(preprocess(promise())).rejects.toThrow(expected());
            }
            if (matcher == Matcher.Get) {
                expected().value = preprocess(yield promise());
                expect(true).toBe(true);
            }
        }));
    }
}
exports.createTests = createTests;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZTJldGVzdGxpYi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL2UyZV90ZXN0cy9lMmV0ZXN0bGliLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLDZCQUErQjtBQUUvQixTQUFnQixZQUFZO0lBQzFCLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLElBQUksU0FBUyxFQUFFO1FBQzNDLE1BQU0sZ0RBQWdELENBQUE7S0FDdkQ7SUFDRCxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLElBQUksU0FBUyxFQUFFO1FBQzdDLE1BQU0sa0RBQWtELENBQUE7S0FDekQ7SUFDRCxNQUFNLFNBQVMsR0FBRyxJQUFJLGVBQVMsQ0FDN0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQzFCLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLEVBQ3RDLE1BQU0sQ0FDUCxDQUFBO0lBQ0QsT0FBTyxTQUFTLENBQUE7QUFDbEIsQ0FBQztBQWJELG9DQWFDO0FBRUQsSUFBWSxPQU9YO0FBUEQsV0FBWSxPQUFPO0lBQ2YscUNBQUksQ0FBQTtJQUNKLDJDQUFPLENBQUE7SUFDUCwrQ0FBUyxDQUFBO0lBQ1QsMkNBQU8sQ0FBQTtJQUNQLDJDQUFPLENBQUE7SUFDUCxtQ0FBRyxDQUFBO0FBQ1AsQ0FBQyxFQVBXLE9BQU8sR0FBUCxlQUFPLEtBQVAsZUFBTyxRQU9sQjtBQUVELFNBQWdCLFdBQVcsQ0FBQyxVQUFVO0lBQ3BDLEtBQUssTUFBTSxDQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxRQUFRLENBQUMsSUFBSSxVQUFVLEVBQUU7UUFDM0UsSUFBSSxDQUFDLFFBQVEsRUFBRSxHQUFTLEVBQUU7WUFDeEIsSUFBSSxPQUFPLElBQUksT0FBTyxDQUFDLElBQUksRUFBRTtnQkFDM0IsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQTthQUNyRDtZQUNELElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUU7Z0JBQzlCLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUE7YUFDeEQ7WUFDRCxJQUFJLE9BQU8sSUFBSSxPQUFPLENBQUMsU0FBUyxFQUFFO2dCQUNoQyxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQTthQUNoRjtZQUNELElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUU7Z0JBQzlCLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUE7YUFDeEQ7WUFDRCxJQUFJLE9BQU8sSUFBSSxPQUFPLENBQUMsT0FBTyxFQUFFO2dCQUM5QixNQUFNLE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQTthQUNoRTtZQUNELElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxHQUFHLEVBQUU7Z0JBQzFCLFFBQVEsRUFBRSxDQUFDLEtBQUssR0FBRyxVQUFVLENBQUMsTUFBTSxPQUFPLEVBQUUsQ0FBQyxDQUFBO2dCQUM5QyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO2FBQ3hCO1FBQ0gsQ0FBQyxDQUFBLENBQUMsQ0FBQTtLQUNIO0FBQ0gsQ0FBQztBQXhCRCxrQ0F3QkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBdmFsYW5jaGUgfSBmcm9tIFwic3JjXCJcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEF2YWxhbmNoZSgpIHtcbiAgaWYgKHByb2Nlc3MuZW52LkFWQUxBTkNIRUdPX0lQID09IHVuZGVmaW5lZCkge1xuICAgIHRocm93IFwidW5kZWZpbmVkIGVudmlyb25tZW50IHZhcmlhYmxlOiBBVkFMQU5DSEVHT19JUFwiXG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52LkFWQUxBTkNIRUdPX1BPUlQgPT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgXCJ1bmRlZmluZWQgZW52aXJvbm1lbnQgdmFyaWFibGU6IEFWQUxBTkNIRUdPX1BPUlRcIlxuICB9XG4gIGNvbnN0IGF2YWxhbmNoZSA9IG5ldyBBdmFsYW5jaGUoXG4gICAgcHJvY2Vzcy5lbnYuQVZBTEFOQ0hFR09fSVAsXG4gICAgcGFyc2VJbnQocHJvY2Vzcy5lbnYuQVZBTEFOQ0hFR09fUE9SVCksXG4gICAgXCJodHRwXCJcbiAgKVxuICByZXR1cm4gYXZhbGFuY2hlXG59XG5cbmV4cG9ydCBlbnVtIE1hdGNoZXIge1xuICAgIHRvQmUsXG4gICAgdG9FcXVhbCxcbiAgICB0b0NvbnRhaW4sXG4gICAgdG9NYXRjaCxcbiAgICB0b1Rocm93LFxuICAgIEdldCxcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVRlc3RzKHRlc3RzX3NwZWMpIHtcbiAgZm9yIChjb25zdCBbdGVzdE5hbWUsIHByb21pc2UsIHByZXByb2Nlc3MsIG1hdGNoZXIsIGV4cGVjdGVkXSBvZiB0ZXN0c19zcGVjKSB7XG4gICAgdGVzdCh0ZXN0TmFtZSwgYXN5bmMgKCkgPT4ge1xuICAgICAgaWYgKG1hdGNoZXIgPT0gTWF0Y2hlci50b0JlKSB7XG4gICAgICAgIGV4cGVjdChwcmVwcm9jZXNzKGF3YWl0IHByb21pc2UoKSkpLnRvQmUoZXhwZWN0ZWQoKSlcbiAgICAgIH1cbiAgICAgIGlmIChtYXRjaGVyID09IE1hdGNoZXIudG9FcXVhbCkge1xuICAgICAgICBleHBlY3QocHJlcHJvY2Vzcyhhd2FpdCBwcm9taXNlKCkpKS50b0VxdWFsKGV4cGVjdGVkKCkpXG4gICAgICB9XG4gICAgICBpZiAobWF0Y2hlciA9PSBNYXRjaGVyLnRvQ29udGFpbikge1xuICAgICAgICBleHBlY3QocHJlcHJvY2Vzcyhhd2FpdCBwcm9taXNlKCkpKS50b0VxdWFsKGV4cGVjdC5hcnJheUNvbnRhaW5pbmcoZXhwZWN0ZWQoKSkpXG4gICAgICB9XG4gICAgICBpZiAobWF0Y2hlciA9PSBNYXRjaGVyLnRvTWF0Y2gpIHtcbiAgICAgICAgZXhwZWN0KHByZXByb2Nlc3MoYXdhaXQgcHJvbWlzZSgpKSkudG9NYXRjaChleHBlY3RlZCgpKVxuICAgICAgfVxuICAgICAgaWYgKG1hdGNoZXIgPT0gTWF0Y2hlci50b1Rocm93KSB7XG4gICAgICAgIGF3YWl0IGV4cGVjdChwcmVwcm9jZXNzKHByb21pc2UoKSkpLnJlamVjdHMudG9UaHJvdyhleHBlY3RlZCgpKVxuICAgICAgfVxuICAgICAgaWYgKG1hdGNoZXIgPT0gTWF0Y2hlci5HZXQpIHtcbiAgICAgICAgZXhwZWN0ZWQoKS52YWx1ZSA9IHByZXByb2Nlc3MoYXdhaXQgcHJvbWlzZSgpKVxuICAgICAgICBleHBlY3QodHJ1ZSkudG9CZSh0cnVlKVxuICAgICAgfVxuICAgIH0pXG4gIH1cbn1cblxuIl19