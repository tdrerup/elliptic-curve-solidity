"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const utxos_1 = require("../../../src/apis/avm/utxos");
const create_hash_1 = __importDefault(require("create-hash"));
const bintools_1 = __importDefault(require("../../../src/utils/bintools"));
const bn_js_1 = __importDefault(require("bn.js"));
const buffer_1 = require("buffer/");
const outputs_1 = require("../../../src/apis/avm/outputs");
const constants_1 = require("../../../src/apis/avm/constants");
const ops_1 = require("../../../src/apis/avm/ops");
const output_1 = require("../../../src/common/output");
const ops_2 = require("../../../src/apis/avm/ops");
/**
 * @ignore
 */
const bintools = bintools_1.default.getInstance();
describe("Operations", () => {
    const codecID_zero = 0;
    const codecID_one = 1;
    const assetID = "8a5d2d32e68bc50036e4d086044617fe4a0a0296b274999ba568ea92da46d533";
    const assetIDBuff = buffer_1.Buffer.from(assetID, "hex");
    const addrs = [
        bintools.cb58Decode("B6D4v1VtPYLbiUvYXtW4Px8oE9imC2vGW"),
        bintools.cb58Decode("P5wdRuZeaDt28eHMP5S3w9ZdoBfo7wuzF"),
        bintools.cb58Decode("6Y3kysjF9jnHnYkdS9yGAuoHyae2eNmeV")
    ].sort();
    const locktime = new bn_js_1.default(54321);
    const payload = buffer_1.Buffer.alloc(1024);
    payload.write("All you Trekkies and TV addicts, Don't mean to diss don't mean to bring static.", 0, 1024, "utf8");
    describe("NFTMintOperation", () => {
        test("SelectOperationClass", () => {
            const goodop = new ops_1.NFTMintOperation(0, buffer_1.Buffer.from(""), []);
            const operation = ops_1.SelectOperationClass(goodop.getOperationID());
            expect(operation).toBeInstanceOf(ops_1.NFTMintOperation);
            expect(() => {
                ops_1.SelectOperationClass(99);
            }).toThrow("Error - SelectOperationClass: unknown opid");
        });
        test("comparator", () => {
            const outputOwners = [];
            outputOwners.push(new output_1.OutputOwners(addrs, locktime, 1));
            const op1 = new ops_1.NFTMintOperation(1, payload, outputOwners);
            const op2 = new ops_1.NFTMintOperation(2, payload, outputOwners);
            const op3 = new ops_1.NFTMintOperation(0, payload, outputOwners);
            const cmp = ops_1.NFTMintOperation.comparator();
            expect(cmp(op1, op1)).toBe(0);
            expect(cmp(op2, op2)).toBe(0);
            expect(cmp(op3, op3)).toBe(0);
            expect(cmp(op1, op2)).toBe(-1);
            expect(cmp(op1, op3)).toBe(1);
        });
        test("Functionality", () => {
            const outputOwners = [];
            outputOwners.push(new output_1.OutputOwners(addrs, locktime, 1));
            const op = new ops_1.NFTMintOperation(0, payload, outputOwners);
            expect(op.getOperationID()).toBe(constants_1.AVMConstants.NFTMINTOPID);
            expect(op.getOutputOwners().toString()).toBe(outputOwners.toString());
            const opcopy = new ops_1.NFTMintOperation();
            const opb = op.toBuffer();
            opcopy.fromBuffer(opb);
            expect(opcopy.toString()).toBe(op.toString());
        });
        test("NFTMintOperation codecIDs", () => {
            const outputOwners = [];
            outputOwners.push(new output_1.OutputOwners(addrs, locktime, 1));
            const nftMintOperation = new ops_1.NFTMintOperation(0, payload, outputOwners);
            expect(nftMintOperation.getCodecID()).toBe(codecID_zero);
            expect(nftMintOperation.getOperationID()).toBe(constants_1.AVMConstants.NFTMINTOPID);
            nftMintOperation.setCodecID(codecID_one);
            expect(nftMintOperation.getCodecID()).toBe(codecID_one);
            expect(nftMintOperation.getOperationID()).toBe(constants_1.AVMConstants.NFTMINTOPID_CODECONE);
            nftMintOperation.setCodecID(codecID_zero);
            expect(nftMintOperation.getCodecID()).toBe(codecID_zero);
            expect(nftMintOperation.getOperationID()).toBe(constants_1.AVMConstants.NFTMINTOPID);
        });
        test("Invalid NFTMintOperation codecID", () => {
            const outputOwners = [];
            outputOwners.push(new output_1.OutputOwners(addrs, locktime, 1));
            const nftMintOperation = new ops_1.NFTMintOperation(0, payload, outputOwners);
            expect(() => {
                nftMintOperation.setCodecID(2);
            }).toThrow("Error - NFTMintOperation.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.");
        });
    });
    describe("NFTTransferOperation", () => {
        test("SelectOperationClass", () => {
            const nout = new outputs_1.NFTTransferOutput(1000, payload, addrs, locktime, 1);
            const goodop = new ops_1.NFTTransferOperation(nout);
            const operation = ops_1.SelectOperationClass(goodop.getOperationID());
            expect(operation).toBeInstanceOf(ops_1.NFTTransferOperation);
            expect(() => {
                ops_1.SelectOperationClass(99);
            }).toThrow("Error - SelectOperationClass: unknown opid");
        });
        test("comparator", () => {
            const op1 = new ops_1.NFTTransferOperation(new outputs_1.NFTTransferOutput(1000, payload, addrs, locktime, 1));
            const op2 = new ops_1.NFTTransferOperation(new outputs_1.NFTTransferOutput(1001, payload, addrs, locktime, 1));
            const op3 = new ops_1.NFTTransferOperation(new outputs_1.NFTTransferOutput(999, payload, addrs, locktime, 1));
            const cmp = ops_1.NFTTransferOperation.comparator();
            expect(cmp(op1, op1)).toBe(0);
            expect(cmp(op2, op2)).toBe(0);
            expect(cmp(op3, op3)).toBe(0);
            expect(cmp(op1, op2)).toBe(-1);
            expect(cmp(op1, op3)).toBe(1);
        });
        test("Functionality", () => {
            const nout = new outputs_1.NFTTransferOutput(1000, payload, addrs, locktime, 1);
            const op = new ops_1.NFTTransferOperation(nout);
            expect(op.getOperationID()).toBe(constants_1.AVMConstants.NFTXFEROPID);
            expect(op.getOutput().toString()).toBe(nout.toString());
            const opcopy = new ops_1.NFTTransferOperation();
            opcopy.fromBuffer(op.toBuffer());
            expect(opcopy.toString()).toBe(op.toString());
            op.addSignatureIdx(0, addrs[0]);
            const sigidx = op.getSigIdxs();
            expect(sigidx[0].getSource().toString("hex")).toBe(addrs[0].toString("hex"));
            opcopy.fromBuffer(op.toBuffer());
            expect(opcopy.toString()).toBe(op.toString());
        });
        test("NFTTransferOperation codecIDs", () => {
            const nftTransferOperation = new ops_1.NFTTransferOperation(new outputs_1.NFTTransferOutput(1000, payload, addrs, locktime, 1));
            expect(nftTransferOperation.getCodecID()).toBe(codecID_zero);
            expect(nftTransferOperation.getOperationID()).toBe(constants_1.AVMConstants.NFTXFEROPID);
            nftTransferOperation.setCodecID(codecID_one);
            expect(nftTransferOperation.getCodecID()).toBe(codecID_one);
            expect(nftTransferOperation.getOperationID()).toBe(constants_1.AVMConstants.NFTXFEROPID_CODECONE);
            nftTransferOperation.setCodecID(codecID_zero);
            expect(nftTransferOperation.getCodecID()).toBe(codecID_zero);
            expect(nftTransferOperation.getOperationID()).toBe(constants_1.AVMConstants.NFTXFEROPID);
        });
        test("Invalid NFTTransferOperation codecID", () => {
            const nftTransferOperation = new ops_1.NFTTransferOperation(new outputs_1.NFTTransferOutput(1000, payload, addrs, locktime, 1));
            expect(() => {
                nftTransferOperation.setCodecID(2);
            }).toThrow("Error - NFTTransferOperation.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.");
        });
    });
    test("TransferableOperation", () => {
        const nout = new outputs_1.NFTTransferOutput(1000, payload, addrs, locktime, 1);
        const op = new ops_1.NFTTransferOperation(nout);
        const nfttxid = buffer_1.Buffer.from(create_hash_1.default("sha256")
            .update(bintools.fromBNToBuffer(new bn_js_1.default(1000), 32))
            .digest());
        const nftoutputidx = buffer_1.Buffer.from(bintools.fromBNToBuffer(new bn_js_1.default(1000), 4));
        const nftutxo = new utxos_1.UTXO(constants_1.AVMConstants.LATESTCODEC, nfttxid, nftoutputidx, assetIDBuff, nout);
        const xferop = new ops_1.TransferableOperation(assetIDBuff, [nftutxo.getUTXOID()], op);
        const xferop2 = new ops_1.TransferableOperation(assetIDBuff, [buffer_1.Buffer.concat([nfttxid, nftoutputidx])], op);
        const uid = new ops_2.UTXOID();
        uid.fromString(nftutxo.getUTXOID());
        const xferop3 = new ops_1.TransferableOperation(assetIDBuff, [uid], op);
        expect(xferop.getAssetID().toString("hex")).toBe(assetID);
        const utxoiddeserialized = bintools.cb58Decode(xferop.getUTXOIDs()[0].toString());
        expect(bintools.bufferToB58(utxoiddeserialized)).toBe(nftutxo.getUTXOID());
        expect(xferop.getOperation().toString()).toBe(op.toString());
        const opcopy = new ops_1.TransferableOperation();
        opcopy.fromBuffer(xferop.toBuffer());
        expect(opcopy.toString()).toBe(xferop.toString());
        expect(xferop2.toBuffer().toString("hex")).toBe(xferop.toBuffer().toString("hex"));
        expect(xferop3.toBuffer().toString("hex")).toBe(xferop.toBuffer().toString("hex"));
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BzLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi90ZXN0cy9hcGlzL2F2bS9vcHMudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLHVEQUFrRDtBQUNsRCw4REFBb0M7QUFDcEMsMkVBQWtEO0FBQ2xELGtEQUFzQjtBQUN0QixvQ0FBZ0M7QUFDaEMsMkRBQWlFO0FBQ2pFLCtEQUE4RDtBQUM5RCxtREFNa0M7QUFDbEMsdURBQXlEO0FBRXpELG1EQUFrRDtBQUVsRDs7R0FFRztBQUNILE1BQU0sUUFBUSxHQUFhLGtCQUFRLENBQUMsV0FBVyxFQUFFLENBQUE7QUFFakQsUUFBUSxDQUFDLFlBQVksRUFBRSxHQUFTLEVBQUU7SUFDaEMsTUFBTSxZQUFZLEdBQVcsQ0FBQyxDQUFBO0lBQzlCLE1BQU0sV0FBVyxHQUFXLENBQUMsQ0FBQTtJQUM3QixNQUFNLE9BQU8sR0FDWCxrRUFBa0UsQ0FBQTtJQUNwRSxNQUFNLFdBQVcsR0FBVyxlQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQTtJQUN2RCxNQUFNLEtBQUssR0FBYTtRQUN0QixRQUFRLENBQUMsVUFBVSxDQUFDLG1DQUFtQyxDQUFDO1FBQ3hELFFBQVEsQ0FBQyxVQUFVLENBQUMsbUNBQW1DLENBQUM7UUFDeEQsUUFBUSxDQUFDLFVBQVUsQ0FBQyxtQ0FBbUMsQ0FBQztLQUN6RCxDQUFDLElBQUksRUFBRSxDQUFBO0lBRVIsTUFBTSxRQUFRLEdBQU8sSUFBSSxlQUFFLENBQUMsS0FBSyxDQUFDLENBQUE7SUFFbEMsTUFBTSxPQUFPLEdBQVcsZUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUMxQyxPQUFPLENBQUMsS0FBSyxDQUNYLGlGQUFpRixFQUNqRixDQUFDLEVBQ0QsSUFBSSxFQUNKLE1BQU0sQ0FDUCxDQUFBO0lBRUQsUUFBUSxDQUFDLGtCQUFrQixFQUFFLEdBQVMsRUFBRTtRQUN0QyxJQUFJLENBQUMsc0JBQXNCLEVBQUUsR0FBUyxFQUFFO1lBQ3RDLE1BQU0sTUFBTSxHQUFxQixJQUFJLHNCQUFnQixDQUNuRCxDQUFDLEVBQ0QsZUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFDZixFQUFFLENBQ0gsQ0FBQTtZQUNELE1BQU0sU0FBUyxHQUFjLDBCQUFvQixDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFBO1lBQzFFLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxjQUFjLENBQUMsc0JBQWdCLENBQUMsQ0FBQTtZQUNsRCxNQUFNLENBQUMsR0FBRyxFQUFFO2dCQUNWLDBCQUFvQixDQUFDLEVBQUUsQ0FBQyxDQUFBO1lBQzFCLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyw0Q0FBNEMsQ0FBQyxDQUFBO1FBQzFELENBQUMsQ0FBQyxDQUFBO1FBRUYsSUFBSSxDQUFDLFlBQVksRUFBRSxHQUFTLEVBQUU7WUFDNUIsTUFBTSxZQUFZLEdBQW1CLEVBQUUsQ0FBQTtZQUN2QyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUkscUJBQVksQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDdkQsTUFBTSxHQUFHLEdBQXFCLElBQUksc0JBQWdCLENBQ2hELENBQUMsRUFDRCxPQUFPLEVBQ1AsWUFBWSxDQUNiLENBQUE7WUFDRCxNQUFNLEdBQUcsR0FBcUIsSUFBSSxzQkFBZ0IsQ0FDaEQsQ0FBQyxFQUNELE9BQU8sRUFDUCxZQUFZLENBQ2IsQ0FBQTtZQUNELE1BQU0sR0FBRyxHQUFxQixJQUFJLHNCQUFnQixDQUNoRCxDQUFDLEVBQ0QsT0FBTyxFQUNQLFlBQVksQ0FDYixDQUFBO1lBQ0QsTUFBTSxHQUFHLEdBQUcsc0JBQWdCLENBQUMsVUFBVSxFQUFFLENBQUE7WUFDekMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDN0IsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDN0IsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDN0IsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUM5QixNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUMvQixDQUFDLENBQUMsQ0FBQTtRQUVGLElBQUksQ0FBQyxlQUFlLEVBQUUsR0FBUyxFQUFFO1lBQy9CLE1BQU0sWUFBWSxHQUFtQixFQUFFLENBQUE7WUFDdkMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLHFCQUFZLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQ3ZELE1BQU0sRUFBRSxHQUFxQixJQUFJLHNCQUFnQixDQUMvQyxDQUFDLEVBQ0QsT0FBTyxFQUNQLFlBQVksQ0FDYixDQUFBO1lBRUQsTUFBTSxDQUFDLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyx3QkFBWSxDQUFDLFdBQVcsQ0FBQyxDQUFBO1lBQzFELE1BQU0sQ0FBQyxFQUFFLENBQUMsZUFBZSxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUE7WUFFckUsTUFBTSxNQUFNLEdBQXFCLElBQUksc0JBQWdCLEVBQUUsQ0FBQTtZQUN2RCxNQUFNLEdBQUcsR0FBVyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUE7WUFDakMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQTtZQUN0QixNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFBO1FBQy9DLENBQUMsQ0FBQyxDQUFBO1FBRUYsSUFBSSxDQUFDLDJCQUEyQixFQUFFLEdBQVMsRUFBRTtZQUMzQyxNQUFNLFlBQVksR0FBbUIsRUFBRSxDQUFBO1lBQ3ZDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxxQkFBWSxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUN2RCxNQUFNLGdCQUFnQixHQUFxQixJQUFJLHNCQUFnQixDQUM3RCxDQUFDLEVBQ0QsT0FBTyxFQUNQLFlBQVksQ0FDYixDQUFBO1lBQ0QsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFBO1lBQ3hELE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyx3QkFBWSxDQUFDLFdBQVcsQ0FBQyxDQUFBO1lBQ3hFLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQTtZQUN4QyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUE7WUFDdkQsTUFBTSxDQUFDLGdCQUFnQixDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUM1Qyx3QkFBWSxDQUFDLG9CQUFvQixDQUNsQyxDQUFBO1lBQ0QsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFBO1lBQ3pDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQTtZQUN4RCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsd0JBQVksQ0FBQyxXQUFXLENBQUMsQ0FBQTtRQUMxRSxDQUFDLENBQUMsQ0FBQTtRQUVGLElBQUksQ0FBQyxrQ0FBa0MsRUFBRSxHQUFTLEVBQUU7WUFDbEQsTUFBTSxZQUFZLEdBQW1CLEVBQUUsQ0FBQTtZQUN2QyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUkscUJBQVksQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDdkQsTUFBTSxnQkFBZ0IsR0FBcUIsSUFBSSxzQkFBZ0IsQ0FDN0QsQ0FBQyxFQUNELE9BQU8sRUFDUCxZQUFZLENBQ2IsQ0FBQTtZQUNELE1BQU0sQ0FBQyxHQUFHLEVBQUU7Z0JBQ1YsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQ2hDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FDUixtRkFBbUYsQ0FDcEYsQ0FBQTtRQUNILENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQyxDQUFDLENBQUE7SUFFRixRQUFRLENBQUMsc0JBQXNCLEVBQUUsR0FBUyxFQUFFO1FBQzFDLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxHQUFTLEVBQUU7WUFDdEMsTUFBTSxJQUFJLEdBQXNCLElBQUksMkJBQWlCLENBQ25ELElBQUksRUFDSixPQUFPLEVBQ1AsS0FBSyxFQUNMLFFBQVEsRUFDUixDQUFDLENBQ0YsQ0FBQTtZQUNELE1BQU0sTUFBTSxHQUF5QixJQUFJLDBCQUFvQixDQUFDLElBQUksQ0FBQyxDQUFBO1lBQ25FLE1BQU0sU0FBUyxHQUFjLDBCQUFvQixDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFBO1lBQzFFLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxjQUFjLENBQUMsMEJBQW9CLENBQUMsQ0FBQTtZQUN0RCxNQUFNLENBQUMsR0FBUyxFQUFFO2dCQUNoQiwwQkFBb0IsQ0FBQyxFQUFFLENBQUMsQ0FBQTtZQUMxQixDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsNENBQTRDLENBQUMsQ0FBQTtRQUMxRCxDQUFDLENBQUMsQ0FBQTtRQUVGLElBQUksQ0FBQyxZQUFZLEVBQUUsR0FBUyxFQUFFO1lBQzVCLE1BQU0sR0FBRyxHQUF5QixJQUFJLDBCQUFvQixDQUN4RCxJQUFJLDJCQUFpQixDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FDekQsQ0FBQTtZQUNELE1BQU0sR0FBRyxHQUF5QixJQUFJLDBCQUFvQixDQUN4RCxJQUFJLDJCQUFpQixDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FDekQsQ0FBQTtZQUNELE1BQU0sR0FBRyxHQUF5QixJQUFJLDBCQUFvQixDQUN4RCxJQUFJLDJCQUFpQixDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FDeEQsQ0FBQTtZQUNELE1BQU0sR0FBRyxHQUFHLDBCQUFvQixDQUFDLFVBQVUsRUFBRSxDQUFBO1lBQzdDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQzdCLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQzdCLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQzdCLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDOUIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDL0IsQ0FBQyxDQUFDLENBQUE7UUFFRixJQUFJLENBQUMsZUFBZSxFQUFFLEdBQVMsRUFBRTtZQUMvQixNQUFNLElBQUksR0FBc0IsSUFBSSwyQkFBaUIsQ0FDbkQsSUFBSSxFQUNKLE9BQU8sRUFDUCxLQUFLLEVBQ0wsUUFBUSxFQUNSLENBQUMsQ0FDRixDQUFBO1lBQ0QsTUFBTSxFQUFFLEdBQXlCLElBQUksMEJBQW9CLENBQUMsSUFBSSxDQUFDLENBQUE7WUFFL0QsTUFBTSxDQUFDLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyx3QkFBWSxDQUFDLFdBQVcsQ0FBQyxDQUFBO1lBQzFELE1BQU0sQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUE7WUFFdkQsTUFBTSxNQUFNLEdBQXlCLElBQUksMEJBQW9CLEVBQUUsQ0FBQTtZQUMvRCxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFBO1lBQ2hDLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUE7WUFFN0MsRUFBRSxDQUFDLGVBQWUsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDL0IsTUFBTSxNQUFNLEdBQWEsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFBO1lBQ3hDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUNoRCxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUN6QixDQUFBO1lBQ0QsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQTtZQUNoQyxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFBO1FBQy9DLENBQUMsQ0FBQyxDQUFBO1FBRUYsSUFBSSxDQUFDLCtCQUErQixFQUFFLEdBQVMsRUFBRTtZQUMvQyxNQUFNLG9CQUFvQixHQUN4QixJQUFJLDBCQUFvQixDQUN0QixJQUFJLDJCQUFpQixDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FDekQsQ0FBQTtZQUNILE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQTtZQUM1RCxNQUFNLENBQUMsb0JBQW9CLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQ2hELHdCQUFZLENBQUMsV0FBVyxDQUN6QixDQUFBO1lBQ0Qsb0JBQW9CLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFBO1lBQzVDLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQTtZQUMzRCxNQUFNLENBQUMsb0JBQW9CLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQ2hELHdCQUFZLENBQUMsb0JBQW9CLENBQ2xDLENBQUE7WUFDRCxvQkFBb0IsQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUE7WUFDN0MsTUFBTSxDQUFDLG9CQUFvQixDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFBO1lBQzVELE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FDaEQsd0JBQVksQ0FBQyxXQUFXLENBQ3pCLENBQUE7UUFDSCxDQUFDLENBQUMsQ0FBQTtRQUVGLElBQUksQ0FBQyxzQ0FBc0MsRUFBRSxHQUFTLEVBQUU7WUFDdEQsTUFBTSxvQkFBb0IsR0FDeEIsSUFBSSwwQkFBb0IsQ0FDdEIsSUFBSSwyQkFBaUIsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQ3pELENBQUE7WUFDSCxNQUFNLENBQUMsR0FBUyxFQUFFO2dCQUNoQixvQkFBb0IsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDcEMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUNSLHVGQUF1RixDQUN4RixDQUFBO1FBQ0gsQ0FBQyxDQUFDLENBQUE7SUFDSixDQUFDLENBQUMsQ0FBQTtJQUVGLElBQUksQ0FBQyx1QkFBdUIsRUFBRSxHQUFTLEVBQUU7UUFDdkMsTUFBTSxJQUFJLEdBQXNCLElBQUksMkJBQWlCLENBQ25ELElBQUksRUFDSixPQUFPLEVBQ1AsS0FBSyxFQUNMLFFBQVEsRUFDUixDQUFDLENBQ0YsQ0FBQTtRQUNELE1BQU0sRUFBRSxHQUF5QixJQUFJLDBCQUFvQixDQUFDLElBQUksQ0FBQyxDQUFBO1FBQy9ELE1BQU0sT0FBTyxHQUFXLGVBQU0sQ0FBQyxJQUFJLENBQ2pDLHFCQUFVLENBQUMsUUFBUSxDQUFDO2FBQ2pCLE1BQU0sQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLElBQUksZUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO2FBQ2pELE1BQU0sRUFBRSxDQUNaLENBQUE7UUFDRCxNQUFNLFlBQVksR0FBVyxlQUFNLENBQUMsSUFBSSxDQUN0QyxRQUFRLENBQUMsY0FBYyxDQUFDLElBQUksZUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUN6QyxDQUFBO1FBQ0QsTUFBTSxPQUFPLEdBQVMsSUFBSSxZQUFJLENBQzVCLHdCQUFZLENBQUMsV0FBVyxFQUN4QixPQUFPLEVBQ1AsWUFBWSxFQUNaLFdBQVcsRUFDWCxJQUFJLENBQ0wsQ0FBQTtRQUNELE1BQU0sTUFBTSxHQUEwQixJQUFJLDJCQUFxQixDQUM3RCxXQUFXLEVBQ1gsQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLENBQUMsRUFDckIsRUFBRSxDQUNILENBQUE7UUFFRCxNQUFNLE9BQU8sR0FBMEIsSUFBSSwyQkFBcUIsQ0FDOUQsV0FBVyxFQUNYLENBQUMsZUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDLEVBQ3hDLEVBQUUsQ0FDSCxDQUFBO1FBQ0QsTUFBTSxHQUFHLEdBQVcsSUFBSSxZQUFNLEVBQUUsQ0FBQTtRQUNoQyxHQUFHLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFBO1FBQ25DLE1BQU0sT0FBTyxHQUEwQixJQUFJLDJCQUFxQixDQUM5RCxXQUFXLEVBQ1gsQ0FBQyxHQUFHLENBQUMsRUFDTCxFQUFFLENBQ0gsQ0FBQTtRQUVELE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQ3pELE1BQU0sa0JBQWtCLEdBQVcsUUFBUSxDQUFDLFVBQVUsQ0FDcEQsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUNsQyxDQUFBO1FBQ0QsTUFBTSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQTtRQUMxRSxNQUFNLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFBO1FBRTVELE1BQU0sTUFBTSxHQUEwQixJQUFJLDJCQUFxQixFQUFFLENBQUE7UUFDakUsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQTtRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFBO1FBRWpELE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUM3QyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUNsQyxDQUFBO1FBQ0QsTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQzdDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQ2xDLENBQUE7SUFDSCxDQUFDLENBQUMsQ0FBQTtBQUNKLENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVVRYTyB9IGZyb20gXCIuLi8uLi8uLi9zcmMvYXBpcy9hdm0vdXR4b3NcIlxuaW1wb3J0IGNyZWF0ZUhhc2ggZnJvbSBcImNyZWF0ZS1oYXNoXCJcbmltcG9ydCBCaW5Ub29scyBmcm9tIFwiLi4vLi4vLi4vc3JjL3V0aWxzL2JpbnRvb2xzXCJcbmltcG9ydCBCTiBmcm9tIFwiYm4uanNcIlxuaW1wb3J0IHsgQnVmZmVyIH0gZnJvbSBcImJ1ZmZlci9cIlxuaW1wb3J0IHsgTkZUVHJhbnNmZXJPdXRwdXQgfSBmcm9tIFwiLi4vLi4vLi4vc3JjL2FwaXMvYXZtL291dHB1dHNcIlxuaW1wb3J0IHsgQVZNQ29uc3RhbnRzIH0gZnJvbSBcIi4uLy4uLy4uL3NyYy9hcGlzL2F2bS9jb25zdGFudHNcIlxuaW1wb3J0IHtcbiAgU2VsZWN0T3BlcmF0aW9uQ2xhc3MsXG4gIE9wZXJhdGlvbixcbiAgVHJhbnNmZXJhYmxlT3BlcmF0aW9uLFxuICBORlRUcmFuc2Zlck9wZXJhdGlvbixcbiAgTkZUTWludE9wZXJhdGlvblxufSBmcm9tIFwiLi4vLi4vLi4vc3JjL2FwaXMvYXZtL29wc1wiXG5pbXBvcnQgeyBPdXRwdXRPd25lcnMgfSBmcm9tIFwiLi4vLi4vLi4vc3JjL2NvbW1vbi9vdXRwdXRcIlxuaW1wb3J0IHsgU2lnSWR4IH0gZnJvbSBcIi4uLy4uLy4uL3NyYy9jb21tb24vY3JlZGVudGlhbHNcIlxuaW1wb3J0IHsgVVRYT0lEIH0gZnJvbSBcIi4uLy4uLy4uL3NyYy9hcGlzL2F2bS9vcHNcIlxuXG4vKipcbiAqIEBpZ25vcmVcbiAqL1xuY29uc3QgYmludG9vbHM6IEJpblRvb2xzID0gQmluVG9vbHMuZ2V0SW5zdGFuY2UoKVxuXG5kZXNjcmliZShcIk9wZXJhdGlvbnNcIiwgKCk6IHZvaWQgPT4ge1xuICBjb25zdCBjb2RlY0lEX3plcm86IG51bWJlciA9IDBcbiAgY29uc3QgY29kZWNJRF9vbmU6IG51bWJlciA9IDFcbiAgY29uc3QgYXNzZXRJRDogc3RyaW5nID1cbiAgICBcIjhhNWQyZDMyZTY4YmM1MDAzNmU0ZDA4NjA0NDYxN2ZlNGEwYTAyOTZiMjc0OTk5YmE1NjhlYTkyZGE0NmQ1MzNcIlxuICBjb25zdCBhc3NldElEQnVmZjogQnVmZmVyID0gQnVmZmVyLmZyb20oYXNzZXRJRCwgXCJoZXhcIilcbiAgY29uc3QgYWRkcnM6IEJ1ZmZlcltdID0gW1xuICAgIGJpbnRvb2xzLmNiNThEZWNvZGUoXCJCNkQ0djFWdFBZTGJpVXZZWHRXNFB4OG9FOWltQzJ2R1dcIiksXG4gICAgYmludG9vbHMuY2I1OERlY29kZShcIlA1d2RSdVplYUR0MjhlSE1QNVMzdzlaZG9CZm83d3V6RlwiKSxcbiAgICBiaW50b29scy5jYjU4RGVjb2RlKFwiNlkza3lzakY5am5IbllrZFM5eUdBdW9IeWFlMmVObWVWXCIpXG4gIF0uc29ydCgpXG5cbiAgY29uc3QgbG9ja3RpbWU6IEJOID0gbmV3IEJOKDU0MzIxKVxuXG4gIGNvbnN0IHBheWxvYWQ6IEJ1ZmZlciA9IEJ1ZmZlci5hbGxvYygxMDI0KVxuICBwYXlsb2FkLndyaXRlKFxuICAgIFwiQWxsIHlvdSBUcmVra2llcyBhbmQgVFYgYWRkaWN0cywgRG9uJ3QgbWVhbiB0byBkaXNzIGRvbid0IG1lYW4gdG8gYnJpbmcgc3RhdGljLlwiLFxuICAgIDAsXG4gICAgMTAyNCxcbiAgICBcInV0ZjhcIlxuICApXG5cbiAgZGVzY3JpYmUoXCJORlRNaW50T3BlcmF0aW9uXCIsICgpOiB2b2lkID0+IHtcbiAgICB0ZXN0KFwiU2VsZWN0T3BlcmF0aW9uQ2xhc3NcIiwgKCk6IHZvaWQgPT4ge1xuICAgICAgY29uc3QgZ29vZG9wOiBORlRNaW50T3BlcmF0aW9uID0gbmV3IE5GVE1pbnRPcGVyYXRpb24oXG4gICAgICAgIDAsXG4gICAgICAgIEJ1ZmZlci5mcm9tKFwiXCIpLFxuICAgICAgICBbXVxuICAgICAgKVxuICAgICAgY29uc3Qgb3BlcmF0aW9uOiBPcGVyYXRpb24gPSBTZWxlY3RPcGVyYXRpb25DbGFzcyhnb29kb3AuZ2V0T3BlcmF0aW9uSUQoKSlcbiAgICAgIGV4cGVjdChvcGVyYXRpb24pLnRvQmVJbnN0YW5jZU9mKE5GVE1pbnRPcGVyYXRpb24pXG4gICAgICBleHBlY3QoKCkgPT4ge1xuICAgICAgICBTZWxlY3RPcGVyYXRpb25DbGFzcyg5OSlcbiAgICAgIH0pLnRvVGhyb3coXCJFcnJvciAtIFNlbGVjdE9wZXJhdGlvbkNsYXNzOiB1bmtub3duIG9waWRcIilcbiAgICB9KVxuXG4gICAgdGVzdChcImNvbXBhcmF0b3JcIiwgKCk6IHZvaWQgPT4ge1xuICAgICAgY29uc3Qgb3V0cHV0T3duZXJzOiBPdXRwdXRPd25lcnNbXSA9IFtdXG4gICAgICBvdXRwdXRPd25lcnMucHVzaChuZXcgT3V0cHV0T3duZXJzKGFkZHJzLCBsb2NrdGltZSwgMSkpXG4gICAgICBjb25zdCBvcDE6IE5GVE1pbnRPcGVyYXRpb24gPSBuZXcgTkZUTWludE9wZXJhdGlvbihcbiAgICAgICAgMSxcbiAgICAgICAgcGF5bG9hZCxcbiAgICAgICAgb3V0cHV0T3duZXJzXG4gICAgICApXG4gICAgICBjb25zdCBvcDI6IE5GVE1pbnRPcGVyYXRpb24gPSBuZXcgTkZUTWludE9wZXJhdGlvbihcbiAgICAgICAgMixcbiAgICAgICAgcGF5bG9hZCxcbiAgICAgICAgb3V0cHV0T3duZXJzXG4gICAgICApXG4gICAgICBjb25zdCBvcDM6IE5GVE1pbnRPcGVyYXRpb24gPSBuZXcgTkZUTWludE9wZXJhdGlvbihcbiAgICAgICAgMCxcbiAgICAgICAgcGF5bG9hZCxcbiAgICAgICAgb3V0cHV0T3duZXJzXG4gICAgICApXG4gICAgICBjb25zdCBjbXAgPSBORlRNaW50T3BlcmF0aW9uLmNvbXBhcmF0b3IoKVxuICAgICAgZXhwZWN0KGNtcChvcDEsIG9wMSkpLnRvQmUoMClcbiAgICAgIGV4cGVjdChjbXAob3AyLCBvcDIpKS50b0JlKDApXG4gICAgICBleHBlY3QoY21wKG9wMywgb3AzKSkudG9CZSgwKVxuICAgICAgZXhwZWN0KGNtcChvcDEsIG9wMikpLnRvQmUoLTEpXG4gICAgICBleHBlY3QoY21wKG9wMSwgb3AzKSkudG9CZSgxKVxuICAgIH0pXG5cbiAgICB0ZXN0KFwiRnVuY3Rpb25hbGl0eVwiLCAoKTogdm9pZCA9PiB7XG4gICAgICBjb25zdCBvdXRwdXRPd25lcnM6IE91dHB1dE93bmVyc1tdID0gW11cbiAgICAgIG91dHB1dE93bmVycy5wdXNoKG5ldyBPdXRwdXRPd25lcnMoYWRkcnMsIGxvY2t0aW1lLCAxKSlcbiAgICAgIGNvbnN0IG9wOiBORlRNaW50T3BlcmF0aW9uID0gbmV3IE5GVE1pbnRPcGVyYXRpb24oXG4gICAgICAgIDAsXG4gICAgICAgIHBheWxvYWQsXG4gICAgICAgIG91dHB1dE93bmVyc1xuICAgICAgKVxuXG4gICAgICBleHBlY3Qob3AuZ2V0T3BlcmF0aW9uSUQoKSkudG9CZShBVk1Db25zdGFudHMuTkZUTUlOVE9QSUQpXG4gICAgICBleHBlY3Qob3AuZ2V0T3V0cHV0T3duZXJzKCkudG9TdHJpbmcoKSkudG9CZShvdXRwdXRPd25lcnMudG9TdHJpbmcoKSlcblxuICAgICAgY29uc3Qgb3Bjb3B5OiBORlRNaW50T3BlcmF0aW9uID0gbmV3IE5GVE1pbnRPcGVyYXRpb24oKVxuICAgICAgY29uc3Qgb3BiOiBCdWZmZXIgPSBvcC50b0J1ZmZlcigpXG4gICAgICBvcGNvcHkuZnJvbUJ1ZmZlcihvcGIpXG4gICAgICBleHBlY3Qob3Bjb3B5LnRvU3RyaW5nKCkpLnRvQmUob3AudG9TdHJpbmcoKSlcbiAgICB9KVxuXG4gICAgdGVzdChcIk5GVE1pbnRPcGVyYXRpb24gY29kZWNJRHNcIiwgKCk6IHZvaWQgPT4ge1xuICAgICAgY29uc3Qgb3V0cHV0T3duZXJzOiBPdXRwdXRPd25lcnNbXSA9IFtdXG4gICAgICBvdXRwdXRPd25lcnMucHVzaChuZXcgT3V0cHV0T3duZXJzKGFkZHJzLCBsb2NrdGltZSwgMSkpXG4gICAgICBjb25zdCBuZnRNaW50T3BlcmF0aW9uOiBORlRNaW50T3BlcmF0aW9uID0gbmV3IE5GVE1pbnRPcGVyYXRpb24oXG4gICAgICAgIDAsXG4gICAgICAgIHBheWxvYWQsXG4gICAgICAgIG91dHB1dE93bmVyc1xuICAgICAgKVxuICAgICAgZXhwZWN0KG5mdE1pbnRPcGVyYXRpb24uZ2V0Q29kZWNJRCgpKS50b0JlKGNvZGVjSURfemVybylcbiAgICAgIGV4cGVjdChuZnRNaW50T3BlcmF0aW9uLmdldE9wZXJhdGlvbklEKCkpLnRvQmUoQVZNQ29uc3RhbnRzLk5GVE1JTlRPUElEKVxuICAgICAgbmZ0TWludE9wZXJhdGlvbi5zZXRDb2RlY0lEKGNvZGVjSURfb25lKVxuICAgICAgZXhwZWN0KG5mdE1pbnRPcGVyYXRpb24uZ2V0Q29kZWNJRCgpKS50b0JlKGNvZGVjSURfb25lKVxuICAgICAgZXhwZWN0KG5mdE1pbnRPcGVyYXRpb24uZ2V0T3BlcmF0aW9uSUQoKSkudG9CZShcbiAgICAgICAgQVZNQ29uc3RhbnRzLk5GVE1JTlRPUElEX0NPREVDT05FXG4gICAgICApXG4gICAgICBuZnRNaW50T3BlcmF0aW9uLnNldENvZGVjSUQoY29kZWNJRF96ZXJvKVxuICAgICAgZXhwZWN0KG5mdE1pbnRPcGVyYXRpb24uZ2V0Q29kZWNJRCgpKS50b0JlKGNvZGVjSURfemVybylcbiAgICAgIGV4cGVjdChuZnRNaW50T3BlcmF0aW9uLmdldE9wZXJhdGlvbklEKCkpLnRvQmUoQVZNQ29uc3RhbnRzLk5GVE1JTlRPUElEKVxuICAgIH0pXG5cbiAgICB0ZXN0KFwiSW52YWxpZCBORlRNaW50T3BlcmF0aW9uIGNvZGVjSURcIiwgKCk6IHZvaWQgPT4ge1xuICAgICAgY29uc3Qgb3V0cHV0T3duZXJzOiBPdXRwdXRPd25lcnNbXSA9IFtdXG4gICAgICBvdXRwdXRPd25lcnMucHVzaChuZXcgT3V0cHV0T3duZXJzKGFkZHJzLCBsb2NrdGltZSwgMSkpXG4gICAgICBjb25zdCBuZnRNaW50T3BlcmF0aW9uOiBORlRNaW50T3BlcmF0aW9uID0gbmV3IE5GVE1pbnRPcGVyYXRpb24oXG4gICAgICAgIDAsXG4gICAgICAgIHBheWxvYWQsXG4gICAgICAgIG91dHB1dE93bmVyc1xuICAgICAgKVxuICAgICAgZXhwZWN0KCgpID0+IHtcbiAgICAgICAgbmZ0TWludE9wZXJhdGlvbi5zZXRDb2RlY0lEKDIpXG4gICAgICB9KS50b1Rocm93KFxuICAgICAgICBcIkVycm9yIC0gTkZUTWludE9wZXJhdGlvbi5zZXRDb2RlY0lEOiBpbnZhbGlkIGNvZGVjSUQuIFZhbGlkIGNvZGVjSURzIGFyZSAwIGFuZCAxLlwiXG4gICAgICApXG4gICAgfSlcbiAgfSlcblxuICBkZXNjcmliZShcIk5GVFRyYW5zZmVyT3BlcmF0aW9uXCIsICgpOiB2b2lkID0+IHtcbiAgICB0ZXN0KFwiU2VsZWN0T3BlcmF0aW9uQ2xhc3NcIiwgKCk6IHZvaWQgPT4ge1xuICAgICAgY29uc3Qgbm91dDogTkZUVHJhbnNmZXJPdXRwdXQgPSBuZXcgTkZUVHJhbnNmZXJPdXRwdXQoXG4gICAgICAgIDEwMDAsXG4gICAgICAgIHBheWxvYWQsXG4gICAgICAgIGFkZHJzLFxuICAgICAgICBsb2NrdGltZSxcbiAgICAgICAgMVxuICAgICAgKVxuICAgICAgY29uc3QgZ29vZG9wOiBORlRUcmFuc2Zlck9wZXJhdGlvbiA9IG5ldyBORlRUcmFuc2Zlck9wZXJhdGlvbihub3V0KVxuICAgICAgY29uc3Qgb3BlcmF0aW9uOiBPcGVyYXRpb24gPSBTZWxlY3RPcGVyYXRpb25DbGFzcyhnb29kb3AuZ2V0T3BlcmF0aW9uSUQoKSlcbiAgICAgIGV4cGVjdChvcGVyYXRpb24pLnRvQmVJbnN0YW5jZU9mKE5GVFRyYW5zZmVyT3BlcmF0aW9uKVxuICAgICAgZXhwZWN0KCgpOiB2b2lkID0+IHtcbiAgICAgICAgU2VsZWN0T3BlcmF0aW9uQ2xhc3MoOTkpXG4gICAgICB9KS50b1Rocm93KFwiRXJyb3IgLSBTZWxlY3RPcGVyYXRpb25DbGFzczogdW5rbm93biBvcGlkXCIpXG4gICAgfSlcblxuICAgIHRlc3QoXCJjb21wYXJhdG9yXCIsICgpOiB2b2lkID0+IHtcbiAgICAgIGNvbnN0IG9wMTogTkZUVHJhbnNmZXJPcGVyYXRpb24gPSBuZXcgTkZUVHJhbnNmZXJPcGVyYXRpb24oXG4gICAgICAgIG5ldyBORlRUcmFuc2Zlck91dHB1dCgxMDAwLCBwYXlsb2FkLCBhZGRycywgbG9ja3RpbWUsIDEpXG4gICAgICApXG4gICAgICBjb25zdCBvcDI6IE5GVFRyYW5zZmVyT3BlcmF0aW9uID0gbmV3IE5GVFRyYW5zZmVyT3BlcmF0aW9uKFxuICAgICAgICBuZXcgTkZUVHJhbnNmZXJPdXRwdXQoMTAwMSwgcGF5bG9hZCwgYWRkcnMsIGxvY2t0aW1lLCAxKVxuICAgICAgKVxuICAgICAgY29uc3Qgb3AzOiBORlRUcmFuc2Zlck9wZXJhdGlvbiA9IG5ldyBORlRUcmFuc2Zlck9wZXJhdGlvbihcbiAgICAgICAgbmV3IE5GVFRyYW5zZmVyT3V0cHV0KDk5OSwgcGF5bG9hZCwgYWRkcnMsIGxvY2t0aW1lLCAxKVxuICAgICAgKVxuICAgICAgY29uc3QgY21wID0gTkZUVHJhbnNmZXJPcGVyYXRpb24uY29tcGFyYXRvcigpXG4gICAgICBleHBlY3QoY21wKG9wMSwgb3AxKSkudG9CZSgwKVxuICAgICAgZXhwZWN0KGNtcChvcDIsIG9wMikpLnRvQmUoMClcbiAgICAgIGV4cGVjdChjbXAob3AzLCBvcDMpKS50b0JlKDApXG4gICAgICBleHBlY3QoY21wKG9wMSwgb3AyKSkudG9CZSgtMSlcbiAgICAgIGV4cGVjdChjbXAob3AxLCBvcDMpKS50b0JlKDEpXG4gICAgfSlcblxuICAgIHRlc3QoXCJGdW5jdGlvbmFsaXR5XCIsICgpOiB2b2lkID0+IHtcbiAgICAgIGNvbnN0IG5vdXQ6IE5GVFRyYW5zZmVyT3V0cHV0ID0gbmV3IE5GVFRyYW5zZmVyT3V0cHV0KFxuICAgICAgICAxMDAwLFxuICAgICAgICBwYXlsb2FkLFxuICAgICAgICBhZGRycyxcbiAgICAgICAgbG9ja3RpbWUsXG4gICAgICAgIDFcbiAgICAgIClcbiAgICAgIGNvbnN0IG9wOiBORlRUcmFuc2Zlck9wZXJhdGlvbiA9IG5ldyBORlRUcmFuc2Zlck9wZXJhdGlvbihub3V0KVxuXG4gICAgICBleHBlY3Qob3AuZ2V0T3BlcmF0aW9uSUQoKSkudG9CZShBVk1Db25zdGFudHMuTkZUWEZFUk9QSUQpXG4gICAgICBleHBlY3Qob3AuZ2V0T3V0cHV0KCkudG9TdHJpbmcoKSkudG9CZShub3V0LnRvU3RyaW5nKCkpXG5cbiAgICAgIGNvbnN0IG9wY29weTogTkZUVHJhbnNmZXJPcGVyYXRpb24gPSBuZXcgTkZUVHJhbnNmZXJPcGVyYXRpb24oKVxuICAgICAgb3Bjb3B5LmZyb21CdWZmZXIob3AudG9CdWZmZXIoKSlcbiAgICAgIGV4cGVjdChvcGNvcHkudG9TdHJpbmcoKSkudG9CZShvcC50b1N0cmluZygpKVxuXG4gICAgICBvcC5hZGRTaWduYXR1cmVJZHgoMCwgYWRkcnNbMF0pXG4gICAgICBjb25zdCBzaWdpZHg6IFNpZ0lkeFtdID0gb3AuZ2V0U2lnSWR4cygpXG4gICAgICBleHBlY3Qoc2lnaWR4WzBdLmdldFNvdXJjZSgpLnRvU3RyaW5nKFwiaGV4XCIpKS50b0JlKFxuICAgICAgICBhZGRyc1swXS50b1N0cmluZyhcImhleFwiKVxuICAgICAgKVxuICAgICAgb3Bjb3B5LmZyb21CdWZmZXIob3AudG9CdWZmZXIoKSlcbiAgICAgIGV4cGVjdChvcGNvcHkudG9TdHJpbmcoKSkudG9CZShvcC50b1N0cmluZygpKVxuICAgIH0pXG5cbiAgICB0ZXN0KFwiTkZUVHJhbnNmZXJPcGVyYXRpb24gY29kZWNJRHNcIiwgKCk6IHZvaWQgPT4ge1xuICAgICAgY29uc3QgbmZ0VHJhbnNmZXJPcGVyYXRpb246IE5GVFRyYW5zZmVyT3BlcmF0aW9uID1cbiAgICAgICAgbmV3IE5GVFRyYW5zZmVyT3BlcmF0aW9uKFxuICAgICAgICAgIG5ldyBORlRUcmFuc2Zlck91dHB1dCgxMDAwLCBwYXlsb2FkLCBhZGRycywgbG9ja3RpbWUsIDEpXG4gICAgICAgIClcbiAgICAgIGV4cGVjdChuZnRUcmFuc2Zlck9wZXJhdGlvbi5nZXRDb2RlY0lEKCkpLnRvQmUoY29kZWNJRF96ZXJvKVxuICAgICAgZXhwZWN0KG5mdFRyYW5zZmVyT3BlcmF0aW9uLmdldE9wZXJhdGlvbklEKCkpLnRvQmUoXG4gICAgICAgIEFWTUNvbnN0YW50cy5ORlRYRkVST1BJRFxuICAgICAgKVxuICAgICAgbmZ0VHJhbnNmZXJPcGVyYXRpb24uc2V0Q29kZWNJRChjb2RlY0lEX29uZSlcbiAgICAgIGV4cGVjdChuZnRUcmFuc2Zlck9wZXJhdGlvbi5nZXRDb2RlY0lEKCkpLnRvQmUoY29kZWNJRF9vbmUpXG4gICAgICBleHBlY3QobmZ0VHJhbnNmZXJPcGVyYXRpb24uZ2V0T3BlcmF0aW9uSUQoKSkudG9CZShcbiAgICAgICAgQVZNQ29uc3RhbnRzLk5GVFhGRVJPUElEX0NPREVDT05FXG4gICAgICApXG4gICAgICBuZnRUcmFuc2Zlck9wZXJhdGlvbi5zZXRDb2RlY0lEKGNvZGVjSURfemVybylcbiAgICAgIGV4cGVjdChuZnRUcmFuc2Zlck9wZXJhdGlvbi5nZXRDb2RlY0lEKCkpLnRvQmUoY29kZWNJRF96ZXJvKVxuICAgICAgZXhwZWN0KG5mdFRyYW5zZmVyT3BlcmF0aW9uLmdldE9wZXJhdGlvbklEKCkpLnRvQmUoXG4gICAgICAgIEFWTUNvbnN0YW50cy5ORlRYRkVST1BJRFxuICAgICAgKVxuICAgIH0pXG5cbiAgICB0ZXN0KFwiSW52YWxpZCBORlRUcmFuc2Zlck9wZXJhdGlvbiBjb2RlY0lEXCIsICgpOiB2b2lkID0+IHtcbiAgICAgIGNvbnN0IG5mdFRyYW5zZmVyT3BlcmF0aW9uOiBORlRUcmFuc2Zlck9wZXJhdGlvbiA9XG4gICAgICAgIG5ldyBORlRUcmFuc2Zlck9wZXJhdGlvbihcbiAgICAgICAgICBuZXcgTkZUVHJhbnNmZXJPdXRwdXQoMTAwMCwgcGF5bG9hZCwgYWRkcnMsIGxvY2t0aW1lLCAxKVxuICAgICAgICApXG4gICAgICBleHBlY3QoKCk6IHZvaWQgPT4ge1xuICAgICAgICBuZnRUcmFuc2Zlck9wZXJhdGlvbi5zZXRDb2RlY0lEKDIpXG4gICAgICB9KS50b1Rocm93KFxuICAgICAgICBcIkVycm9yIC0gTkZUVHJhbnNmZXJPcGVyYXRpb24uc2V0Q29kZWNJRDogaW52YWxpZCBjb2RlY0lELiBWYWxpZCBjb2RlY0lEcyBhcmUgMCBhbmQgMS5cIlxuICAgICAgKVxuICAgIH0pXG4gIH0pXG5cbiAgdGVzdChcIlRyYW5zZmVyYWJsZU9wZXJhdGlvblwiLCAoKTogdm9pZCA9PiB7XG4gICAgY29uc3Qgbm91dDogTkZUVHJhbnNmZXJPdXRwdXQgPSBuZXcgTkZUVHJhbnNmZXJPdXRwdXQoXG4gICAgICAxMDAwLFxuICAgICAgcGF5bG9hZCxcbiAgICAgIGFkZHJzLFxuICAgICAgbG9ja3RpbWUsXG4gICAgICAxXG4gICAgKVxuICAgIGNvbnN0IG9wOiBORlRUcmFuc2Zlck9wZXJhdGlvbiA9IG5ldyBORlRUcmFuc2Zlck9wZXJhdGlvbihub3V0KVxuICAgIGNvbnN0IG5mdHR4aWQ6IEJ1ZmZlciA9IEJ1ZmZlci5mcm9tKFxuICAgICAgY3JlYXRlSGFzaChcInNoYTI1NlwiKVxuICAgICAgICAudXBkYXRlKGJpbnRvb2xzLmZyb21CTlRvQnVmZmVyKG5ldyBCTigxMDAwKSwgMzIpKVxuICAgICAgICAuZGlnZXN0KClcbiAgICApXG4gICAgY29uc3QgbmZ0b3V0cHV0aWR4OiBCdWZmZXIgPSBCdWZmZXIuZnJvbShcbiAgICAgIGJpbnRvb2xzLmZyb21CTlRvQnVmZmVyKG5ldyBCTigxMDAwKSwgNClcbiAgICApXG4gICAgY29uc3QgbmZ0dXR4bzogVVRYTyA9IG5ldyBVVFhPKFxuICAgICAgQVZNQ29uc3RhbnRzLkxBVEVTVENPREVDLFxuICAgICAgbmZ0dHhpZCxcbiAgICAgIG5mdG91dHB1dGlkeCxcbiAgICAgIGFzc2V0SURCdWZmLFxuICAgICAgbm91dFxuICAgIClcbiAgICBjb25zdCB4ZmVyb3A6IFRyYW5zZmVyYWJsZU9wZXJhdGlvbiA9IG5ldyBUcmFuc2ZlcmFibGVPcGVyYXRpb24oXG4gICAgICBhc3NldElEQnVmZixcbiAgICAgIFtuZnR1dHhvLmdldFVUWE9JRCgpXSxcbiAgICAgIG9wXG4gICAgKVxuXG4gICAgY29uc3QgeGZlcm9wMjogVHJhbnNmZXJhYmxlT3BlcmF0aW9uID0gbmV3IFRyYW5zZmVyYWJsZU9wZXJhdGlvbihcbiAgICAgIGFzc2V0SURCdWZmLFxuICAgICAgW0J1ZmZlci5jb25jYXQoW25mdHR4aWQsIG5mdG91dHB1dGlkeF0pXSxcbiAgICAgIG9wXG4gICAgKVxuICAgIGNvbnN0IHVpZDogVVRYT0lEID0gbmV3IFVUWE9JRCgpXG4gICAgdWlkLmZyb21TdHJpbmcobmZ0dXR4by5nZXRVVFhPSUQoKSlcbiAgICBjb25zdCB4ZmVyb3AzOiBUcmFuc2ZlcmFibGVPcGVyYXRpb24gPSBuZXcgVHJhbnNmZXJhYmxlT3BlcmF0aW9uKFxuICAgICAgYXNzZXRJREJ1ZmYsXG4gICAgICBbdWlkXSxcbiAgICAgIG9wXG4gICAgKVxuXG4gICAgZXhwZWN0KHhmZXJvcC5nZXRBc3NldElEKCkudG9TdHJpbmcoXCJoZXhcIikpLnRvQmUoYXNzZXRJRClcbiAgICBjb25zdCB1dHhvaWRkZXNlcmlhbGl6ZWQ6IEJ1ZmZlciA9IGJpbnRvb2xzLmNiNThEZWNvZGUoXG4gICAgICB4ZmVyb3AuZ2V0VVRYT0lEcygpWzBdLnRvU3RyaW5nKClcbiAgICApXG4gICAgZXhwZWN0KGJpbnRvb2xzLmJ1ZmZlclRvQjU4KHV0eG9pZGRlc2VyaWFsaXplZCkpLnRvQmUobmZ0dXR4by5nZXRVVFhPSUQoKSlcbiAgICBleHBlY3QoeGZlcm9wLmdldE9wZXJhdGlvbigpLnRvU3RyaW5nKCkpLnRvQmUob3AudG9TdHJpbmcoKSlcblxuICAgIGNvbnN0IG9wY29weTogVHJhbnNmZXJhYmxlT3BlcmF0aW9uID0gbmV3IFRyYW5zZmVyYWJsZU9wZXJhdGlvbigpXG4gICAgb3Bjb3B5LmZyb21CdWZmZXIoeGZlcm9wLnRvQnVmZmVyKCkpXG4gICAgZXhwZWN0KG9wY29weS50b1N0cmluZygpKS50b0JlKHhmZXJvcC50b1N0cmluZygpKVxuXG4gICAgZXhwZWN0KHhmZXJvcDIudG9CdWZmZXIoKS50b1N0cmluZyhcImhleFwiKSkudG9CZShcbiAgICAgIHhmZXJvcC50b0J1ZmZlcigpLnRvU3RyaW5nKFwiaGV4XCIpXG4gICAgKVxuICAgIGV4cGVjdCh4ZmVyb3AzLnRvQnVmZmVyKCkudG9TdHJpbmcoXCJoZXhcIikpLnRvQmUoXG4gICAgICB4ZmVyb3AudG9CdWZmZXIoKS50b1N0cmluZyhcImhleFwiKVxuICAgIClcbiAgfSlcbn0pXG4iXX0=