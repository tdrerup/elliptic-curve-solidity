"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bn_js_1 = __importDefault(require("bn.js"));
const outputs_1 = require("../../../src/apis/avm/outputs");
const initialstates_1 = require("../../../src/apis/avm/initialstates");
const avm_1 = require("../../../src/apis/avm");
const utils_1 = require("../../../src/utils");
/**
 * @ignore
 */
const serialization = utils_1.Serialization.getInstance();
describe("AVM", () => {
    test("GenesisData", () => {
        const networkID = 12345;
        const m = "2Zc54v4ek37TEwu4LiV3j41PUMRd6acDDU3ZCVSxE7X";
        const cb58 = "cb58";
        const memo = serialization.typeToBuffer(m, cb58);
        const amount = new bn_js_1.default(100000);
        const address = "X-local18jma8ppw3nhx5r4ap8clazz0dps7rv5u00z96u";
        const bech32 = "bech32";
        const addressBuf = serialization.typeToBuffer(address, bech32);
        const threshold = 1;
        const locktime = new bn_js_1.default(0);
        const assetAlias = "asset1";
        const name = "asset1";
        const symbol = "MFCA";
        const denomination = 1;
        const vcapSecpOutput = new outputs_1.SECPTransferOutput(amount, [addressBuf], locktime, threshold);
        const initialStates = new initialstates_1.InitialStates();
        initialStates.addOutput(vcapSecpOutput);
        const genesisAsset = new avm_1.GenesisAsset(assetAlias, name, symbol, denomination, initialStates, memo);
        const genesisAssets = [genesisAsset];
        const genesisData = new avm_1.GenesisData(genesisAssets, networkID);
        const genesisData2 = new avm_1.GenesisData();
        genesisData2.fromBuffer(genesisData.toBuffer());
        expect(genesisData.toBuffer().toString("hex")).toBe(genesisData2.toBuffer().toString("hex"));
        expect(genesisData.getTypeName()).toBe("GenesisData");
        expect(genesisData.getTypeID()).toBeUndefined();
        expect(genesisData.getCodecID()).toBe(avm_1.AVMConstants.LATESTCODEC);
        expect(genesisData.getNetworkID()).toBe(networkID);
        expect(genesisData.getGenesisAssets()).toStrictEqual(genesisAssets);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXNpc2RhdGEudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Rlc3RzL2FwaXMvYXZtL2dlbmVzaXNkYXRhLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxrREFBc0I7QUFFdEIsMkRBR3NDO0FBQ3RDLHVFQUFtRTtBQUNuRSwrQ0FLOEI7QUFDOUIsOENBQWtFO0FBRWxFOztHQUVHO0FBQ0gsTUFBTSxhQUFhLEdBQWtCLHFCQUFhLENBQUMsV0FBVyxFQUFFLENBQUE7QUFDaEUsUUFBUSxDQUFDLEtBQUssRUFBRSxHQUFTLEVBQUU7SUFDekIsSUFBSSxDQUFDLGFBQWEsRUFBRSxHQUFTLEVBQUU7UUFDN0IsTUFBTSxTQUFTLEdBQVcsS0FBSyxDQUFBO1FBQy9CLE1BQU0sQ0FBQyxHQUFXLDZDQUE2QyxDQUFBO1FBQy9ELE1BQU0sSUFBSSxHQUFtQixNQUFNLENBQUE7UUFDbkMsTUFBTSxJQUFJLEdBQVcsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUE7UUFDeEQsTUFBTSxNQUFNLEdBQU8sSUFBSSxlQUFFLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDakMsTUFBTSxPQUFPLEdBQVcsZ0RBQWdELENBQUE7UUFDeEUsTUFBTSxNQUFNLEdBQW1CLFFBQVEsQ0FBQTtRQUN2QyxNQUFNLFVBQVUsR0FBVyxhQUFhLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQTtRQUN0RSxNQUFNLFNBQVMsR0FBVyxDQUFDLENBQUE7UUFDM0IsTUFBTSxRQUFRLEdBQU8sSUFBSSxlQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDOUIsTUFBTSxVQUFVLEdBQVcsUUFBUSxDQUFBO1FBQ25DLE1BQU0sSUFBSSxHQUFXLFFBQVEsQ0FBQTtRQUM3QixNQUFNLE1BQU0sR0FBVyxNQUFNLENBQUE7UUFDN0IsTUFBTSxZQUFZLEdBQVcsQ0FBQyxDQUFBO1FBQzlCLE1BQU0sY0FBYyxHQUFHLElBQUksNEJBQWtCLENBQzNDLE1BQU0sRUFDTixDQUFDLFVBQVUsQ0FBQyxFQUNaLFFBQVEsRUFDUixTQUFTLENBQ1YsQ0FBQTtRQUNELE1BQU0sYUFBYSxHQUFrQixJQUFJLDZCQUFhLEVBQUUsQ0FBQTtRQUN4RCxhQUFhLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxDQUFBO1FBQ3ZDLE1BQU0sWUFBWSxHQUFpQixJQUFJLGtCQUFZLENBQ2pELFVBQVUsRUFDVixJQUFJLEVBQ0osTUFBTSxFQUNOLFlBQVksRUFDWixhQUFhLEVBQ2IsSUFBSSxDQUNMLENBQUE7UUFDRCxNQUFNLGFBQWEsR0FBbUIsQ0FBQyxZQUFZLENBQUMsQ0FBQTtRQUNwRCxNQUFNLFdBQVcsR0FBZ0IsSUFBSSxpQkFBVyxDQUFDLGFBQWEsRUFBRSxTQUFTLENBQUMsQ0FBQTtRQUMxRSxNQUFNLFlBQVksR0FBZ0IsSUFBSSxpQkFBVyxFQUFFLENBQUE7UUFDbkQsWUFBWSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQTtRQUMvQyxNQUFNLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FDakQsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FDeEMsQ0FBQTtRQUNELE1BQU0sQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUE7UUFDckQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLGFBQWEsRUFBRSxDQUFBO1FBQy9DLE1BQU0sQ0FBQyxXQUFXLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsa0JBQVksQ0FBQyxXQUFXLENBQUMsQ0FBQTtRQUMvRCxNQUFNLENBQUMsV0FBVyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBQ2xELE1BQU0sQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsQ0FBQTtJQUNyRSxDQUFDLENBQUMsQ0FBQTtBQUNKLENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJOIGZyb20gXCJibi5qc1wiXG5pbXBvcnQgeyBCdWZmZXIgfSBmcm9tIFwiYnVmZmVyL1wiXG5pbXBvcnQge1xuICBTRUNQVHJhbnNmZXJPdXRwdXQsXG4gIFRyYW5zZmVyYWJsZU91dHB1dFxufSBmcm9tIFwiLi4vLi4vLi4vc3JjL2FwaXMvYXZtL291dHB1dHNcIlxuaW1wb3J0IHsgSW5pdGlhbFN0YXRlcyB9IGZyb20gXCIuLi8uLi8uLi9zcmMvYXBpcy9hdm0vaW5pdGlhbHN0YXRlc1wiXG5pbXBvcnQge1xuICBHZW5lc2lzRGF0YSxcbiAgR2VuZXNpc0Fzc2V0LFxuICBUcmFuc2ZlcmFibGVJbnB1dCxcbiAgQVZNQ29uc3RhbnRzXG59IGZyb20gXCIuLi8uLi8uLi9zcmMvYXBpcy9hdm1cIlxuaW1wb3J0IHsgU2VyaWFsaXphdGlvbiwgU2VyaWFsaXplZFR5cGUgfSBmcm9tIFwiLi4vLi4vLi4vc3JjL3V0aWxzXCJcblxuLyoqXG4gKiBAaWdub3JlXG4gKi9cbmNvbnN0IHNlcmlhbGl6YXRpb246IFNlcmlhbGl6YXRpb24gPSBTZXJpYWxpemF0aW9uLmdldEluc3RhbmNlKClcbmRlc2NyaWJlKFwiQVZNXCIsICgpOiB2b2lkID0+IHtcbiAgdGVzdChcIkdlbmVzaXNEYXRhXCIsICgpOiB2b2lkID0+IHtcbiAgICBjb25zdCBuZXR3b3JrSUQ6IG51bWJlciA9IDEyMzQ1XG4gICAgY29uc3QgbTogc3RyaW5nID0gXCIyWmM1NHY0ZWszN1RFd3U0TGlWM2o0MVBVTVJkNmFjRERVM1pDVlN4RTdYXCJcbiAgICBjb25zdCBjYjU4OiBTZXJpYWxpemVkVHlwZSA9IFwiY2I1OFwiXG4gICAgY29uc3QgbWVtbzogQnVmZmVyID0gc2VyaWFsaXphdGlvbi50eXBlVG9CdWZmZXIobSwgY2I1OClcbiAgICBjb25zdCBhbW91bnQ6IEJOID0gbmV3IEJOKDEwMDAwMClcbiAgICBjb25zdCBhZGRyZXNzOiBzdHJpbmcgPSBcIlgtbG9jYWwxOGptYThwcHczbmh4NXI0YXA4Y2xhenowZHBzN3J2NXUwMHo5NnVcIlxuICAgIGNvbnN0IGJlY2gzMjogU2VyaWFsaXplZFR5cGUgPSBcImJlY2gzMlwiXG4gICAgY29uc3QgYWRkcmVzc0J1ZjogQnVmZmVyID0gc2VyaWFsaXphdGlvbi50eXBlVG9CdWZmZXIoYWRkcmVzcywgYmVjaDMyKVxuICAgIGNvbnN0IHRocmVzaG9sZDogbnVtYmVyID0gMVxuICAgIGNvbnN0IGxvY2t0aW1lOiBCTiA9IG5ldyBCTigwKVxuICAgIGNvbnN0IGFzc2V0QWxpYXM6IHN0cmluZyA9IFwiYXNzZXQxXCJcbiAgICBjb25zdCBuYW1lOiBzdHJpbmcgPSBcImFzc2V0MVwiXG4gICAgY29uc3Qgc3ltYm9sOiBzdHJpbmcgPSBcIk1GQ0FcIlxuICAgIGNvbnN0IGRlbm9taW5hdGlvbjogbnVtYmVyID0gMVxuICAgIGNvbnN0IHZjYXBTZWNwT3V0cHV0ID0gbmV3IFNFQ1BUcmFuc2Zlck91dHB1dChcbiAgICAgIGFtb3VudCxcbiAgICAgIFthZGRyZXNzQnVmXSxcbiAgICAgIGxvY2t0aW1lLFxuICAgICAgdGhyZXNob2xkXG4gICAgKVxuICAgIGNvbnN0IGluaXRpYWxTdGF0ZXM6IEluaXRpYWxTdGF0ZXMgPSBuZXcgSW5pdGlhbFN0YXRlcygpXG4gICAgaW5pdGlhbFN0YXRlcy5hZGRPdXRwdXQodmNhcFNlY3BPdXRwdXQpXG4gICAgY29uc3QgZ2VuZXNpc0Fzc2V0OiBHZW5lc2lzQXNzZXQgPSBuZXcgR2VuZXNpc0Fzc2V0KFxuICAgICAgYXNzZXRBbGlhcyxcbiAgICAgIG5hbWUsXG4gICAgICBzeW1ib2wsXG4gICAgICBkZW5vbWluYXRpb24sXG4gICAgICBpbml0aWFsU3RhdGVzLFxuICAgICAgbWVtb1xuICAgIClcbiAgICBjb25zdCBnZW5lc2lzQXNzZXRzOiBHZW5lc2lzQXNzZXRbXSA9IFtnZW5lc2lzQXNzZXRdXG4gICAgY29uc3QgZ2VuZXNpc0RhdGE6IEdlbmVzaXNEYXRhID0gbmV3IEdlbmVzaXNEYXRhKGdlbmVzaXNBc3NldHMsIG5ldHdvcmtJRClcbiAgICBjb25zdCBnZW5lc2lzRGF0YTI6IEdlbmVzaXNEYXRhID0gbmV3IEdlbmVzaXNEYXRhKClcbiAgICBnZW5lc2lzRGF0YTIuZnJvbUJ1ZmZlcihnZW5lc2lzRGF0YS50b0J1ZmZlcigpKVxuICAgIGV4cGVjdChnZW5lc2lzRGF0YS50b0J1ZmZlcigpLnRvU3RyaW5nKFwiaGV4XCIpKS50b0JlKFxuICAgICAgZ2VuZXNpc0RhdGEyLnRvQnVmZmVyKCkudG9TdHJpbmcoXCJoZXhcIilcbiAgICApXG4gICAgZXhwZWN0KGdlbmVzaXNEYXRhLmdldFR5cGVOYW1lKCkpLnRvQmUoXCJHZW5lc2lzRGF0YVwiKVxuICAgIGV4cGVjdChnZW5lc2lzRGF0YS5nZXRUeXBlSUQoKSkudG9CZVVuZGVmaW5lZCgpXG4gICAgZXhwZWN0KGdlbmVzaXNEYXRhLmdldENvZGVjSUQoKSkudG9CZShBVk1Db25zdGFudHMuTEFURVNUQ09ERUMpXG4gICAgZXhwZWN0KGdlbmVzaXNEYXRhLmdldE5ldHdvcmtJRCgpKS50b0JlKG5ldHdvcmtJRClcbiAgICBleHBlY3QoZ2VuZXNpc0RhdGEuZ2V0R2VuZXNpc0Fzc2V0cygpKS50b1N0cmljdEVxdWFsKGdlbmVzaXNBc3NldHMpXG4gIH0pXG59KVxuIl19