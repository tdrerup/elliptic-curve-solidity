"use strict";
/**
 * @packageDocumentation
 * @module API-AVM-InitialStates
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InitialStates = void 0;
const buffer_1 = require("buffer/");
const bintools_1 = __importDefault(require("../../utils/bintools"));
const output_1 = require("../../common/output");
const outputs_1 = require("./outputs");
const constants_1 = require("./constants");
const serialization_1 = require("../../utils/serialization");
/**
 * @ignore
 */
const bintools = bintools_1.default.getInstance();
/**
 * Class for creating initial output states used in asset creation
 */
class InitialStates extends serialization_1.Serializable {
    constructor() {
        super(...arguments);
        this._typeName = "InitialStates";
        this._typeID = undefined;
        this.fxs = {};
    }
    serialize(encoding = "hex") {
        const fields = super.serialize(encoding);
        const flatfxs = {};
        for (let fxid in this.fxs) {
            flatfxs[fxid] = this.fxs[fxid].map((o) => o.serialize(encoding));
        }
        return Object.assign(Object.assign({}, fields), { fxs: flatfxs });
    }
    deserialize(fields, encoding = "hex") {
        super.deserialize(fields, encoding);
        const unflat = {};
        for (let fxid in fields["fxs"]) {
            unflat[fxid] = fields["fxs"][fxid].map((o) => {
                const out = outputs_1.SelectOutputClass(o["_typeID"]);
                out.deserialize(o, encoding);
                return out;
            });
        }
        this.fxs = unflat;
    }
    /**
     *
     * @param out The output state to add to the collection
     * @param fxid The FxID that will be used for this output, default AVMConstants.SECPFXID
     */
    addOutput(out, fxid = constants_1.AVMConstants.SECPFXID) {
        if (!(fxid in this.fxs)) {
            this.fxs[fxid] = [];
        }
        this.fxs[fxid].push(out);
    }
    fromBuffer(bytes, offset = 0) {
        const result = [];
        const klen = bintools.copyFrom(bytes, offset, offset + 4);
        offset += 4;
        const klennum = klen.readUInt32BE(0);
        for (let i = 0; i < klennum; i++) {
            const fxidbuff = bintools.copyFrom(bytes, offset, offset + 4);
            offset += 4;
            const fxid = fxidbuff.readUInt32BE(0);
            result[fxid] = [];
            const statelenbuff = bintools.copyFrom(bytes, offset, offset + 4);
            offset += 4;
            const statelen = statelenbuff.readUInt32BE(0);
            for (let j = 0; j < statelen; j++) {
                const outputid = bintools
                    .copyFrom(bytes, offset, offset + 4)
                    .readUInt32BE(0);
                offset += 4;
                const out = outputs_1.SelectOutputClass(outputid);
                offset = out.fromBuffer(bytes, offset);
                result[fxid].push(out);
            }
        }
        this.fxs = result;
        return offset;
    }
    toBuffer() {
        const buff = [];
        const keys = Object.keys(this.fxs)
            .map((k) => parseInt(k, 10))
            .sort();
        const klen = buffer_1.Buffer.alloc(4);
        klen.writeUInt32BE(keys.length, 0);
        buff.push(klen);
        for (let i = 0; i < keys.length; i++) {
            const fxid = keys[i];
            const fxidbuff = buffer_1.Buffer.alloc(4);
            fxidbuff.writeUInt32BE(fxid, 0);
            buff.push(fxidbuff);
            const initialState = this.fxs[fxid].sort(output_1.Output.comparator());
            const statelen = buffer_1.Buffer.alloc(4);
            statelen.writeUInt32BE(initialState.length, 0);
            buff.push(statelen);
            for (let j = 0; j < initialState.length; j++) {
                const outputid = buffer_1.Buffer.alloc(4);
                outputid.writeInt32BE(initialState[j].getOutputID(), 0);
                buff.push(outputid);
                buff.push(initialState[j].toBuffer());
            }
        }
        return buffer_1.Buffer.concat(buff);
    }
}
exports.InitialStates = InitialStates;
//# sourceMappingURL=data:application/json;base64,