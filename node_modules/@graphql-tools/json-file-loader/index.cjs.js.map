{"version":3,"file":"index.cjs.js","sources":["../../../dist/loaders/json-file/src/index.js"],"sourcesContent":["import { parseGraphQLJSON, isValidPath, } from '@graphql-tools/utils';\nimport { isAbsolute, resolve } from 'path';\nimport { readFileSync, accessSync, promises as fsPromises } from 'fs';\nimport { cwd } from 'process';\nconst { readFile, access } = fsPromises;\nconst FILE_EXTENSIONS = ['.json'];\n/**\n * This loader loads documents and type definitions from JSON files.\n *\n * The JSON file can be the result of an introspection query made against a schema:\n *\n * ```js\n * const schema = await loadSchema('schema-introspection.json', {\n *   loaders: [\n *     new JsonFileLoader()\n *   ]\n * });\n * ```\n *\n * Or it can be a `DocumentNode` object representing a GraphQL document or type definitions:\n *\n * ```js\n * const documents = await loadDocuments('queries/*.json', {\n *   loaders: [\n *     new GraphQLFileLoader()\n *   ]\n * });\n * ```\n */\nexport class JsonFileLoader {\n    loaderId() {\n        return 'json-file';\n    }\n    async canLoad(pointer, options) {\n        if (isValidPath(pointer)) {\n            if (FILE_EXTENSIONS.find(extension => pointer.endsWith(extension))) {\n                const normalizedFilePath = isAbsolute(pointer) ? pointer : resolve(options.cwd || cwd(), pointer);\n                try {\n                    await access(normalizedFilePath);\n                    return true;\n                }\n                catch (_a) {\n                    return false;\n                }\n            }\n        }\n        return false;\n    }\n    canLoadSync(pointer, options) {\n        if (isValidPath(pointer)) {\n            if (FILE_EXTENSIONS.find(extension => pointer.endsWith(extension))) {\n                const normalizedFilePath = isAbsolute(pointer) ? pointer : resolve(options.cwd || cwd(), pointer);\n                try {\n                    accessSync(normalizedFilePath);\n                    return true;\n                }\n                catch (_a) {\n                    return false;\n                }\n            }\n        }\n        return false;\n    }\n    async load(pointer, options) {\n        const normalizedFilePath = isAbsolute(pointer) ? pointer : resolve(options.cwd || cwd(), pointer);\n        try {\n            const jsonContent = await readFile(normalizedFilePath, { encoding: 'utf8' });\n            return parseGraphQLJSON(pointer, jsonContent, options);\n        }\n        catch (e) {\n            throw new Error(`Unable to read JSON file: ${normalizedFilePath}: ${e.message || /* istanbul ignore next */ e}`);\n        }\n    }\n    loadSync(pointer, options) {\n        const normalizedFilepath = isAbsolute(pointer) ? pointer : resolve(options.cwd || cwd(), pointer);\n        try {\n            const jsonContent = readFileSync(normalizedFilepath, 'utf8');\n            return parseGraphQLJSON(pointer, jsonContent, options);\n        }\n        catch (e) {\n            throw new Error(`Unable to read JSON file: ${normalizedFilepath}: ${e.message || /* istanbul ignore next */ e}`);\n        }\n    }\n}\n//# sourceMappingURL=index.js.map"],"names":["fsPromises","isValidPath","isAbsolute","resolve","cwd","accessSync","parseGraphQLJSON","readFileSync"],"mappings":"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"}