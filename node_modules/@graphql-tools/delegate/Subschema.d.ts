import { GraphQLSchema } from 'graphql';
import { Transform } from '@graphql-tools/utils';
import { SubschemaConfig, MergedTypeConfig, CreateProxyingResolverFn, Subscriber, Executor, Endpoint, EndpointBatchingOptions } from './types';
export declare function getSubschema(result: any, responseKey: string): GraphQLSchema | SubschemaConfig;
export declare function setObjectSubschema(result: any, subschema: GraphQLSchema | SubschemaConfig): void;
export declare function isSubschemaConfig(value: any): value is SubschemaConfig | Subschema;
export declare function cloneSubschemaConfig(subschemaConfig: SubschemaConfig): SubschemaConfig;
export declare function isSubschema(value: any): value is Subschema;
export declare class Subschema<K = any, V = any, C = K> {
    schema: GraphQLSchema;
    rootValue?: Record<string, any>;
    executor?: Executor;
    subscriber?: Subscriber;
    batch?: boolean;
    batchingOptions?: EndpointBatchingOptions<K, V, C>;
    endpoint?: Endpoint;
    createProxyingResolver?: CreateProxyingResolverFn;
    transforms: Array<Transform>;
    transformedSchema: GraphQLSchema;
    merge?: Record<string, MergedTypeConfig>;
    constructor(config: SubschemaConfig);
}
