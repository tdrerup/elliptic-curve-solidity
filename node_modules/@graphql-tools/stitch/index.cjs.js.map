{"version":3,"file":"index.cjs.js","sources":["../../../dist/stitch/src/definitions.js","../../../dist/stitch/src/typeFromAST.js","../../../dist/stitch/src/mergeCandidates.js","../../../dist/stitch/src/typeCandidates.js","../../../dist/stitch/src/stitchingInfo.js","../../../dist/stitch/src/isolateComputedFields.js","../../../dist/stitch/src/subschemaConfigTransforms/computedDirectiveTransformer.js","../../../dist/stitch/src/subschemaConfigTransforms/index.js","../../../dist/stitch/src/stitchSchemas.js","../../../dist/stitch/src/selectionSetArgs.js"],"sourcesContent":["import { Kind } from 'graphql';\nexport function extractTypeDefinitions(ast) {\n    const typeDefs = ast.definitions.filter((def) => def.kind === Kind.OBJECT_TYPE_DEFINITION ||\n        def.kind === Kind.INTERFACE_TYPE_DEFINITION ||\n        def.kind === Kind.INPUT_OBJECT_TYPE_DEFINITION ||\n        def.kind === Kind.UNION_TYPE_DEFINITION ||\n        def.kind === Kind.ENUM_TYPE_DEFINITION ||\n        def.kind === Kind.SCALAR_TYPE_DEFINITION);\n    return {\n        ...ast,\n        definitions: typeDefs,\n    };\n}\nexport function extractDirectiveDefinitions(ast) {\n    const directiveDefs = ast.definitions.filter((def) => def.kind === Kind.DIRECTIVE_DEFINITION);\n    return {\n        ...ast,\n        definitions: directiveDefs,\n    };\n}\nexport function extractSchemaDefinition(ast) {\n    const schemaDefs = ast.definitions.filter((def) => def.kind === Kind.SCHEMA_DEFINITION);\n    return schemaDefs.length ? schemaDefs[schemaDefs.length - 1] : null;\n}\nexport function extractSchemaExtensions(ast) {\n    const schemaExtensions = ast.definitions.filter((def) => def.kind === Kind.SCHEMA_EXTENSION);\n    return schemaExtensions;\n}\nexport function extractTypeExtensionDefinitions(ast) {\n    const extensionDefs = ast.definitions.filter((def) => def.kind === Kind.OBJECT_TYPE_EXTENSION ||\n        def.kind === Kind.INTERFACE_TYPE_EXTENSION ||\n        def.kind === Kind.INPUT_OBJECT_TYPE_EXTENSION ||\n        def.kind === Kind.UNION_TYPE_EXTENSION ||\n        def.kind === Kind.ENUM_TYPE_EXTENSION ||\n        def.kind === Kind.SCALAR_TYPE_EXTENSION);\n    return {\n        ...ast,\n        definitions: extensionDefs,\n    };\n}\n//# sourceMappingURL=definitions.js.map","import { GraphQLEnumType, GraphQLInputObjectType, GraphQLInterfaceType, GraphQLObjectType, GraphQLScalarType, GraphQLUnionType, Kind, GraphQLDirective, DirectiveLocation, TokenKind, valueFromASTUntyped, getDirectiveValues, GraphQLDeprecatedDirective, } from 'graphql';\nimport { createStub, createNamedStub } from '@graphql-tools/utils';\nconst backcompatOptions = { commentDescriptions: true };\nexport default function typeFromAST(node) {\n    switch (node.kind) {\n        case Kind.OBJECT_TYPE_DEFINITION:\n            return makeObjectType(node);\n        case Kind.INTERFACE_TYPE_DEFINITION:\n            return makeInterfaceType(node);\n        case Kind.ENUM_TYPE_DEFINITION:\n            return makeEnumType(node);\n        case Kind.UNION_TYPE_DEFINITION:\n            return makeUnionType(node);\n        case Kind.SCALAR_TYPE_DEFINITION:\n            return makeScalarType(node);\n        case Kind.INPUT_OBJECT_TYPE_DEFINITION:\n            return makeInputObjectType(node);\n        case Kind.DIRECTIVE_DEFINITION:\n            return makeDirective(node);\n        default:\n            return null;\n    }\n}\nfunction makeObjectType(node) {\n    const config = {\n        name: node.name.value,\n        description: getDescription(node, backcompatOptions),\n        interfaces: () => node.interfaces.map(iface => createNamedStub(iface.name.value, 'interface')),\n        fields: () => makeFields(node.fields),\n        astNode: node,\n    };\n    return new GraphQLObjectType(config);\n}\nfunction makeInterfaceType(node) {\n    var _a;\n    const config = {\n        name: node.name.value,\n        description: getDescription(node, backcompatOptions),\n        interfaces: (_a = node.interfaces) === null || _a === void 0 ? void 0 : _a.map(iface => createNamedStub(iface.name.value, 'interface')),\n        fields: () => makeFields(node.fields),\n        astNode: node,\n    };\n    return new GraphQLInterfaceType(config);\n}\nfunction makeEnumType(node) {\n    const values = node.values.reduce((prev, value) => ({\n        ...prev,\n        [value.name.value]: {\n            description: getDescription(value, backcompatOptions),\n            deprecationReason: getDeprecationReason(value),\n            astNode: value,\n        },\n    }), {});\n    return new GraphQLEnumType({\n        name: node.name.value,\n        description: getDescription(node, backcompatOptions),\n        values,\n        astNode: node,\n    });\n}\nfunction makeUnionType(node) {\n    return new GraphQLUnionType({\n        name: node.name.value,\n        description: getDescription(node, backcompatOptions),\n        types: () => node.types.map(type => createNamedStub(type.name.value, 'object')),\n        astNode: node,\n    });\n}\nfunction makeScalarType(node) {\n    return new GraphQLScalarType({\n        name: node.name.value,\n        description: getDescription(node, backcompatOptions),\n        astNode: node,\n        // TODO: serialize default property setting can be dropped once\n        // upstream graphql-js TypeScript typings are updated, likely in v16\n        serialize: value => value,\n    });\n}\nfunction makeInputObjectType(node) {\n    return new GraphQLInputObjectType({\n        name: node.name.value,\n        description: getDescription(node, backcompatOptions),\n        fields: () => makeValues(node.fields),\n        astNode: node,\n    });\n}\nfunction makeFields(nodes) {\n    return nodes.reduce((prev, node) => ({\n        ...prev,\n        [node.name.value]: {\n            type: createStub(node.type, 'output'),\n            description: getDescription(node, backcompatOptions),\n            args: makeValues(node.arguments),\n            deprecationReason: getDeprecationReason(node),\n            astNode: node,\n        },\n    }), {});\n}\nfunction makeValues(nodes) {\n    return nodes.reduce((prev, node) => ({\n        ...prev,\n        [node.name.value]: {\n            type: createStub(node.type, 'input'),\n            defaultValue: node.defaultValue !== undefined ? valueFromASTUntyped(node.defaultValue) : undefined,\n            description: getDescription(node, backcompatOptions),\n            astNode: node,\n        },\n    }), {});\n}\nfunction makeDirective(node) {\n    const locations = [];\n    node.locations.forEach(location => {\n        if (location.value in DirectiveLocation) {\n            locations.push(location.value);\n        }\n    });\n    return new GraphQLDirective({\n        name: node.name.value,\n        description: node.description != null ? node.description.value : null,\n        locations,\n        isRepeatable: node.repeatable,\n        args: makeValues(node.arguments),\n        astNode: node,\n    });\n}\n// graphql < v13 does not export getDescription\nfunction getDescription(node, options) {\n    if (node.description != null) {\n        return node.description.value;\n    }\n    if (options.commentDescriptions) {\n        const rawValue = getLeadingCommentBlock(node);\n        if (rawValue !== undefined) {\n            return dedentBlockStringValue(`\\n${rawValue}`);\n        }\n    }\n}\nfunction getLeadingCommentBlock(node) {\n    const loc = node.loc;\n    if (!loc) {\n        return;\n    }\n    const comments = [];\n    let token = loc.startToken.prev;\n    while (token != null &&\n        token.kind === TokenKind.COMMENT &&\n        token.next != null &&\n        token.prev != null &&\n        token.line + 1 === token.next.line &&\n        token.line !== token.prev.line) {\n        const value = String(token.value);\n        comments.push(value);\n        token = token.prev;\n    }\n    return comments.length > 0 ? comments.reverse().join('\\n') : undefined;\n}\nfunction dedentBlockStringValue(rawString) {\n    // Expand a block string's raw value into independent lines.\n    const lines = rawString.split(/\\r\\n|[\\n\\r]/g);\n    // Remove common indentation from all lines but first.\n    const commonIndent = getBlockStringIndentation(lines);\n    if (commonIndent !== 0) {\n        for (let i = 1; i < lines.length; i++) {\n            lines[i] = lines[i].slice(commonIndent);\n        }\n    }\n    // Remove leading and trailing blank lines.\n    while (lines.length > 0 && isBlank(lines[0])) {\n        lines.shift();\n    }\n    while (lines.length > 0 && isBlank(lines[lines.length - 1])) {\n        lines.pop();\n    }\n    // Return a string of the lines joined with U+000A.\n    return lines.join('\\n');\n}\n/**\n * @internal\n */\nexport function getBlockStringIndentation(lines) {\n    let commonIndent = null;\n    for (let i = 1; i < lines.length; i++) {\n        const line = lines[i];\n        const indent = leadingWhitespace(line);\n        if (indent === line.length) {\n            continue; // skip empty lines\n        }\n        if (commonIndent === null || indent < commonIndent) {\n            commonIndent = indent;\n            if (commonIndent === 0) {\n                break;\n            }\n        }\n    }\n    return commonIndent === null ? 0 : commonIndent;\n}\nfunction leadingWhitespace(str) {\n    let i = 0;\n    while (i < str.length && (str[i] === ' ' || str[i] === '\\t')) {\n        i++;\n    }\n    return i;\n}\nfunction isBlank(str) {\n    return leadingWhitespace(str) === str.length;\n}\nfunction getDeprecationReason(node) {\n    const deprecated = getDirectiveValues(GraphQLDeprecatedDirective, node);\n    return deprecated === null || deprecated === void 0 ? void 0 : deprecated.reason;\n}\n//# sourceMappingURL=typeFromAST.js.map","import { GraphQLObjectType, GraphQLInterfaceType, GraphQLUnionType, GraphQLEnumType, isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType, GraphQLInputObjectType, GraphQLScalarType, } from 'graphql';\nimport { mergeType, mergeInputType, mergeInterface, mergeUnion, mergeEnum } from '@graphql-tools/merge';\nimport { fieldToFieldConfig, inputFieldToFieldConfig } from '@graphql-tools/utils';\nexport function mergeCandidates(typeName, candidates, typeMergingOptions) {\n    const initialCandidateType = candidates[0].type;\n    if (candidates.some(candidate => candidate.type.constructor !== initialCandidateType.constructor)) {\n        throw new Error(`Cannot merge different type categories into common type ${typeName}.`);\n    }\n    if (isObjectType(initialCandidateType)) {\n        return mergeObjectTypeCandidates(typeName, candidates, typeMergingOptions);\n    }\n    else if (isInputObjectType(initialCandidateType)) {\n        return mergeInputObjectTypeCandidates(typeName, candidates, typeMergingOptions);\n    }\n    else if (isInterfaceType(initialCandidateType)) {\n        return mergeInterfaceTypeCandidates(typeName, candidates, typeMergingOptions);\n    }\n    else if (isUnionType(initialCandidateType)) {\n        return mergeUnionTypeCandidates(typeName, candidates, typeMergingOptions);\n    }\n    else if (isEnumType(initialCandidateType)) {\n        return mergeEnumTypeCandidates(typeName, candidates, typeMergingOptions);\n    }\n    else if (isScalarType(initialCandidateType)) {\n        return mergeScalarTypeCandidates(typeName, candidates, typeMergingOptions);\n    }\n    else {\n        // not reachable.\n        throw new Error(`Type ${typeName} has unknown GraphQL type.`);\n    }\n}\nfunction mergeObjectTypeCandidates(typeName, candidates, typeMergingOptions) {\n    const description = mergeTypeDescriptions(candidates, typeMergingOptions);\n    const fields = fieldConfigMapFromTypeCandidates(candidates, typeMergingOptions);\n    const typeConfigs = candidates.map(candidate => candidate.type.toConfig());\n    const interfaceMap = typeConfigs\n        .map(typeConfig => typeConfig.interfaces)\n        .reduce((acc, interfaces) => {\n        if (interfaces != null) {\n            interfaces.forEach(iface => {\n                acc[iface.name] = iface;\n            });\n        }\n        return acc;\n    }, Object.create(null));\n    const interfaces = Object.keys(interfaceMap).map(interfaceName => interfaceMap[interfaceName]);\n    const astNodes = pluck('astNode', candidates);\n    const astNode = astNodes\n        .slice(1)\n        .reduce((acc, astNode) => mergeType(astNode, acc), astNodes[0]);\n    const extensionASTNodes = [].concat(pluck('extensionASTNodes', candidates));\n    const extensions = Object.assign({}, ...pluck('extensions', candidates));\n    const typeConfig = {\n        name: typeName,\n        description,\n        fields,\n        interfaces,\n        astNode,\n        extensionASTNodes,\n        extensions,\n    };\n    return new GraphQLObjectType(typeConfig);\n}\nfunction mergeInputObjectTypeCandidates(typeName, candidates, typeMergingOptions) {\n    const description = mergeTypeDescriptions(candidates, typeMergingOptions);\n    const fields = inputFieldConfigMapFromTypeCandidates(candidates, typeMergingOptions);\n    const astNodes = pluck('astNode', candidates);\n    const astNode = astNodes\n        .slice(1)\n        .reduce((acc, astNode) => mergeInputType(astNode, acc), astNodes[0]);\n    const extensionASTNodes = [].concat(pluck('extensionASTNodes', candidates));\n    const extensions = Object.assign({}, ...pluck('extensions', candidates));\n    const typeConfig = {\n        name: typeName,\n        description,\n        fields,\n        astNode,\n        extensionASTNodes,\n        extensions,\n    };\n    return new GraphQLInputObjectType(typeConfig);\n}\nfunction pluck(typeProperty, candidates) {\n    return candidates.map(candidate => candidate.type[typeProperty]).filter(value => value != null);\n}\nfunction mergeInterfaceTypeCandidates(typeName, candidates, typeMergingOptions) {\n    const description = mergeTypeDescriptions(candidates, typeMergingOptions);\n    const fields = fieldConfigMapFromTypeCandidates(candidates, typeMergingOptions);\n    const typeConfigs = candidates.map(candidate => candidate.type.toConfig());\n    const interfaceMap = typeConfigs\n        .map(typeConfig => typeConfig.interfaces)\n        .reduce((acc, interfaces) => {\n        if (interfaces != null) {\n            interfaces.forEach(iface => {\n                acc[iface.name] = iface;\n            });\n        }\n        return acc;\n    }, Object.create(null));\n    const interfaces = Object.keys(interfaceMap).map(interfaceName => interfaceMap[interfaceName]);\n    const astNodes = pluck('astNode', candidates);\n    const astNode = astNodes\n        .slice(1)\n        .reduce((acc, astNode) => mergeInterface(astNode, acc, {}), astNodes[0]);\n    const extensionASTNodes = [].concat(pluck('extensionASTNodes', candidates));\n    const extensions = Object.assign({}, ...pluck('extensions', candidates));\n    const typeConfig = {\n        name: typeName,\n        description,\n        fields,\n        interfaces,\n        astNode,\n        extensionASTNodes,\n        extensions,\n    };\n    return new GraphQLInterfaceType(typeConfig);\n}\nfunction mergeUnionTypeCandidates(typeName, candidates, typeMergingOptions) {\n    const description = mergeTypeDescriptions(candidates, typeMergingOptions);\n    const typeConfigs = candidates.map(candidate => candidate.type.toConfig());\n    const typeMap = typeConfigs.reduce((acc, typeConfig) => {\n        typeConfig.types.forEach(type => {\n            acc[type.name] = type;\n        });\n        return acc;\n    }, Object.create(null));\n    const types = Object.keys(typeMap).map(typeName => typeMap[typeName]);\n    const astNodes = pluck('astNode', candidates);\n    const astNode = astNodes\n        .slice(1)\n        .reduce((acc, astNode) => mergeUnion(astNode, acc), astNodes[0]);\n    const extensionASTNodes = [].concat(pluck('extensionASTNodes', candidates));\n    const extensions = Object.assign({}, ...pluck('extensions', candidates));\n    const typeConfig = {\n        name: typeName,\n        description,\n        types,\n        astNode,\n        extensionASTNodes,\n        extensions,\n    };\n    return new GraphQLUnionType(typeConfig);\n}\nfunction mergeEnumTypeCandidates(typeName, candidates, typeMergingOptions) {\n    const description = mergeTypeDescriptions(candidates, typeMergingOptions);\n    const typeConfigs = candidates.map(candidate => candidate.type.toConfig());\n    const values = typeConfigs.reduce((acc, typeConfig) => ({\n        ...acc,\n        ...typeConfig.values,\n    }), {});\n    const astNodes = pluck('astNode', candidates);\n    const astNode = astNodes\n        .slice(1)\n        .reduce((acc, astNode) => mergeEnum(astNode, acc), astNodes[0]);\n    const extensionASTNodes = [].concat(pluck('extensionASTNodes', candidates));\n    const extensions = Object.assign({}, ...pluck('extensions', candidates));\n    const typeConfig = {\n        name: typeName,\n        description,\n        values,\n        astNode,\n        extensionASTNodes,\n        extensions,\n    };\n    return new GraphQLEnumType(typeConfig);\n}\nfunction mergeScalarTypeCandidates(typeName, candidates, typeMergingOptions) {\n    const description = mergeTypeDescriptions(candidates, typeMergingOptions);\n    const serializeFns = pluck('serialize', candidates);\n    const serialize = serializeFns[serializeFns.length - 1];\n    const parseValueFns = pluck('parseValue', candidates);\n    const parseValue = parseValueFns[parseValueFns.length - 1];\n    const parseLiteralFns = pluck('parseLiteral', candidates);\n    const parseLiteral = parseLiteralFns[parseLiteralFns.length - 1];\n    const astNodes = pluck('astNode', candidates);\n    const astNode = astNodes\n        .slice(1)\n        .reduce((acc, astNode) => mergeScalarTypeDefinitionNodes(acc, astNode), astNodes[0]);\n    const extensionASTNodes = [].concat(pluck('extensionASTNodes', candidates));\n    const extensions = Object.assign({}, ...pluck('extensions', candidates));\n    const typeConfig = {\n        name: typeName,\n        description,\n        serialize,\n        parseValue,\n        parseLiteral,\n        astNode,\n        extensionASTNodes,\n        extensions,\n    };\n    return new GraphQLScalarType(typeConfig);\n}\nfunction mergeTypeDescriptions(candidates, typeMergingOptions) {\n    var _a;\n    const typeDescriptionsMerger = (_a = typeMergingOptions === null || typeMergingOptions === void 0 ? void 0 : typeMergingOptions.typeDescriptionsMerger) !== null && _a !== void 0 ? _a : defaultTypeDescriptionMerger;\n    return typeDescriptionsMerger(candidates);\n}\nfunction defaultTypeDescriptionMerger(candidates) {\n    return candidates[candidates.length - 1].type.description;\n}\nfunction fieldConfigMapFromTypeCandidates(candidates, typeMergingOptions) {\n    const fieldConfigCandidatesMap = Object.create(null);\n    candidates.forEach(candidate => {\n        const fieldMap = candidate.type.getFields();\n        Object.keys(fieldMap).forEach(fieldName => {\n            const fieldConfigCandidate = {\n                fieldConfig: fieldToFieldConfig(fieldMap[fieldName]),\n                fieldName,\n                type: candidate.type,\n                subschema: candidate.subschema,\n                transformedSchema: candidate.transformedSchema,\n            };\n            if (fieldName in fieldConfigCandidatesMap) {\n                fieldConfigCandidatesMap[fieldName].push(fieldConfigCandidate);\n            }\n            else {\n                fieldConfigCandidatesMap[fieldName] = [fieldConfigCandidate];\n            }\n        });\n    });\n    const fieldConfigMap = Object.create(null);\n    Object.keys(fieldConfigCandidatesMap).forEach(fieldName => {\n        fieldConfigMap[fieldName] = mergeFieldConfigs(fieldConfigCandidatesMap[fieldName], typeMergingOptions);\n    });\n    return fieldConfigMap;\n}\nfunction mergeFieldConfigs(candidates, typeMergingOptions) {\n    var _a;\n    const fieldConfigMerger = (_a = typeMergingOptions === null || typeMergingOptions === void 0 ? void 0 : typeMergingOptions.fieldConfigMerger) !== null && _a !== void 0 ? _a : defaultFieldConfigMerger;\n    return fieldConfigMerger(candidates);\n}\nfunction defaultFieldConfigMerger(candidates) {\n    return candidates[candidates.length - 1].fieldConfig;\n}\nfunction inputFieldConfigMapFromTypeCandidates(candidates, typeMergingOptions) {\n    const inputFieldConfigCandidatesMap = Object.create(null);\n    candidates.forEach(candidate => {\n        const inputFieldMap = candidate.type.getFields();\n        Object.keys(inputFieldMap).forEach(fieldName => {\n            const inputFieldConfigCandidate = {\n                inputFieldConfig: inputFieldToFieldConfig(inputFieldMap[fieldName]),\n                fieldName,\n                type: candidate.type,\n                subschema: candidate.subschema,\n                transformedSchema: candidate.transformedSchema,\n            };\n            if (fieldName in inputFieldConfigCandidatesMap) {\n                inputFieldConfigCandidatesMap[fieldName].push(inputFieldConfigCandidate);\n            }\n            else {\n                inputFieldConfigCandidatesMap[fieldName] = [inputFieldConfigCandidate];\n            }\n        });\n    });\n    const inputFieldConfigMap = Object.create(null);\n    Object.keys(inputFieldConfigCandidatesMap).forEach(fieldName => {\n        inputFieldConfigMap[fieldName] = mergeInputFieldConfigs(inputFieldConfigCandidatesMap[fieldName], typeMergingOptions);\n    });\n    return inputFieldConfigMap;\n}\nfunction mergeInputFieldConfigs(candidates, typeMergingOptions) {\n    var _a;\n    const inputFieldConfigMerger = (_a = typeMergingOptions === null || typeMergingOptions === void 0 ? void 0 : typeMergingOptions.inputFieldConfigMerger) !== null && _a !== void 0 ? _a : defaultInputFieldConfigMerger;\n    return inputFieldConfigMerger(candidates);\n}\nfunction defaultInputFieldConfigMerger(candidates) {\n    return candidates[candidates.length - 1].inputFieldConfig;\n}\nfunction mergeScalarTypeDefinitionNodes(targetNode, sourceNode) {\n    var _a, _b, _c;\n    return {\n        ...targetNode,\n        description: (_a = sourceNode.description) !== null && _a !== void 0 ? _a : targetNode.description,\n        directives: ((_b = targetNode.directives) !== null && _b !== void 0 ? _b : []).concat((_c = sourceNode.directives) !== null && _c !== void 0 ? _c : []),\n    };\n}\n//# sourceMappingURL=mergeCandidates.js.map","import { getNamedType, isNamedType, isSchema, isSpecifiedScalarType, } from 'graphql';\nimport { wrapSchema } from '@graphql-tools/wrap';\nimport { isSubschemaConfig } from '@graphql-tools/delegate';\nimport { extractTypeDefinitions, extractTypeExtensionDefinitions, extractDirectiveDefinitions, extractSchemaDefinition, extractSchemaExtensions, } from './definitions';\nimport typeFromAST from './typeFromAST';\nimport { mergeCandidates } from './mergeCandidates';\nfunction isDocumentNode(schemaLikeObject) {\n    return schemaLikeObject.kind !== undefined;\n}\nexport function buildTypeCandidates({ schemaLikeObjects, transformedSchemas, extensions, directiveMap, schemaDefs, operationTypeNames, mergeDirectives, }) {\n    const typeCandidates = Object.create(null);\n    let schemaDef;\n    let schemaExtensions = [];\n    schemaLikeObjects.forEach(schemaLikeObject => {\n        if (isDocumentNode(schemaLikeObject)) {\n            schemaDef = extractSchemaDefinition(schemaLikeObject);\n            schemaExtensions = schemaExtensions.concat(extractSchemaExtensions(schemaLikeObject));\n        }\n    });\n    schemaDefs.schemaDef = schemaDef;\n    schemaDefs.schemaExtensions = schemaExtensions;\n    setOperationTypeNames(schemaDefs, operationTypeNames);\n    schemaLikeObjects.forEach(schemaLikeObject => {\n        if (isSchema(schemaLikeObject) || isSubschemaConfig(schemaLikeObject)) {\n            const schema = wrapSchema(schemaLikeObject);\n            transformedSchemas.set(schemaLikeObject, schema);\n            const operationTypes = {\n                query: schema.getQueryType(),\n                mutation: schema.getMutationType(),\n                subscription: schema.getSubscriptionType(),\n            };\n            Object.keys(operationTypes).forEach(operationType => {\n                if (operationTypes[operationType] != null) {\n                    addTypeCandidate(typeCandidates, operationTypeNames[operationType], {\n                        type: operationTypes[operationType],\n                        subschema: schemaLikeObject,\n                        transformedSchema: schema,\n                    });\n                }\n            });\n            if (mergeDirectives) {\n                schema.getDirectives().forEach(directive => {\n                    directiveMap[directive.name] = directive;\n                });\n            }\n            const originalTypeMap = schema.getTypeMap();\n            Object.keys(originalTypeMap).forEach(typeName => {\n                const type = originalTypeMap[typeName];\n                if (isNamedType(type) &&\n                    getNamedType(type).name.slice(0, 2) !== '__' &&\n                    type !== operationTypes.query &&\n                    type !== operationTypes.mutation &&\n                    type !== operationTypes.subscription) {\n                    addTypeCandidate(typeCandidates, type.name, {\n                        type,\n                        subschema: schemaLikeObject,\n                        transformedSchema: schema,\n                    });\n                }\n            });\n        }\n        else if (isDocumentNode(schemaLikeObject)) {\n            const typesDocument = extractTypeDefinitions(schemaLikeObject);\n            typesDocument.definitions.forEach(def => {\n                const type = typeFromAST(def);\n                if (type != null) {\n                    addTypeCandidate(typeCandidates, type.name, {\n                        type,\n                    });\n                }\n            });\n            const directivesDocument = extractDirectiveDefinitions(schemaLikeObject);\n            directivesDocument.definitions.forEach(def => {\n                const directive = typeFromAST(def);\n                directiveMap[directive.name] = directive;\n            });\n            const extensionsDocument = extractTypeExtensionDefinitions(schemaLikeObject);\n            if (extensionsDocument.definitions.length > 0) {\n                extensions.push(extensionsDocument);\n            }\n        }\n        else if (isNamedType(schemaLikeObject)) {\n            addTypeCandidate(typeCandidates, schemaLikeObject.name, {\n                type: schemaLikeObject,\n            });\n        }\n        else {\n            throw new Error(`Invalid object ${schemaLikeObject}`);\n        }\n    });\n    return typeCandidates;\n}\nfunction setOperationTypeNames({ schemaDef, schemaExtensions, }, operationTypeNames) {\n    const allNodes = schemaExtensions.slice();\n    if (schemaDef != null) {\n        allNodes.unshift(schemaDef);\n    }\n    allNodes.forEach(node => {\n        if (node.operationTypes != null) {\n            node.operationTypes.forEach(operationType => {\n                operationTypeNames[operationType.operation] = operationType.type.name.value;\n            });\n        }\n    });\n}\nfunction addTypeCandidate(typeCandidates, name, typeCandidate) {\n    if (!(name in typeCandidates)) {\n        typeCandidates[name] = [];\n    }\n    typeCandidates[name].push(typeCandidate);\n}\nexport function buildTypeMap({ typeCandidates, stitchingInfo, operationTypeNames, onTypeConflict, mergeTypes, typeMergingOptions, }) {\n    const typeMap = Object.create(null);\n    Object.keys(typeCandidates).forEach(typeName => {\n        if (typeName === operationTypeNames.query ||\n            typeName === operationTypeNames.mutation ||\n            typeName === operationTypeNames.subscription ||\n            (mergeTypes === true && !typeCandidates[typeName].some(candidate => isSpecifiedScalarType(candidate.type))) ||\n            (typeof mergeTypes === 'function' && mergeTypes(typeCandidates[typeName], typeName)) ||\n            (Array.isArray(mergeTypes) && mergeTypes.includes(typeName)) ||\n            (stitchingInfo != null && typeName in stitchingInfo.mergedTypes)) {\n            typeMap[typeName] = mergeCandidates(typeName, typeCandidates[typeName], typeMergingOptions);\n        }\n        else {\n            const candidateSelector = onTypeConflict != null\n                ? onTypeConflictToCandidateSelector(onTypeConflict)\n                : (cands) => cands[cands.length - 1];\n            typeMap[typeName] = candidateSelector(typeCandidates[typeName]).type;\n        }\n    });\n    return typeMap;\n}\nfunction onTypeConflictToCandidateSelector(onTypeConflict) {\n    return cands => cands.reduce((prev, next) => {\n        const type = onTypeConflict(prev.type, next.type, {\n            left: {\n                schema: prev.transformedSchema,\n            },\n            right: {\n                schema: next.transformedSchema,\n            },\n        });\n        if (prev.type === type) {\n            return prev;\n        }\n        else if (next.type === type) {\n            return next;\n        }\n        return {\n            schemaName: 'unknown',\n            type,\n        };\n    });\n}\n//# sourceMappingURL=typeCandidates.js.map","import { GraphQLSchema, Kind, isObjectType, isScalarType, getNamedType, print, isInterfaceType, isLeafType, } from 'graphql';\nimport { parseFragmentToInlineFragment, concatInlineFragments, parseSelectionSet, } from '@graphql-tools/utils';\nimport { delegateToSchema, isSubschemaConfig } from '@graphql-tools/delegate';\nimport { batchDelegateToSchema } from '@graphql-tools/batch-delegate';\nexport function createStitchingInfo(transformedSubschemaConfigs, transformedSchemas, typeCandidates, mergeTypes) {\n    const mergedTypes = createMergedTypes(typeCandidates, mergeTypes);\n    const selectionSetsByField = Object.create(null);\n    Object.entries(mergedTypes).forEach(([typeName, mergedTypeInfo]) => {\n        if (mergedTypeInfo.selectionSets == null && mergedTypeInfo.fieldSelectionSets == null) {\n            return;\n        }\n        selectionSetsByField[typeName] = Object.create(null);\n        mergedTypeInfo.selectionSets.forEach((selectionSet, subschemaConfig) => {\n            const schema = subschemaConfig.schema;\n            const type = schema.getType(typeName);\n            const fields = type.getFields();\n            Object.keys(fields).forEach(fieldName => {\n                const field = fields[fieldName];\n                const fieldType = getNamedType(field.type);\n                if (selectionSet && isLeafType(fieldType) && selectionSetContainsTopLevelField(selectionSet, fieldName)) {\n                    return;\n                }\n                if (selectionSetsByField[typeName][fieldName] == null) {\n                    selectionSetsByField[typeName][fieldName] = {\n                        kind: Kind.SELECTION_SET,\n                        selections: [parseSelectionSet('{ __typename }').selections[0]],\n                    };\n                }\n                selectionSetsByField[typeName][fieldName].selections = selectionSetsByField[typeName][fieldName].selections.concat(selectionSet.selections);\n            });\n        });\n        mergedTypeInfo.fieldSelectionSets.forEach(selectionSetFieldMap => {\n            Object.keys(selectionSetFieldMap).forEach(fieldName => {\n                if (selectionSetsByField[typeName][fieldName] == null) {\n                    selectionSetsByField[typeName][fieldName] = {\n                        kind: Kind.SELECTION_SET,\n                        selections: [parseSelectionSet('{ __typename }').selections[0]],\n                    };\n                }\n                selectionSetsByField[typeName][fieldName].selections = selectionSetsByField[typeName][fieldName].selections.concat(selectionSetFieldMap[fieldName].selections);\n            });\n        });\n    });\n    return {\n        transformedSubschemaConfigs,\n        transformedSchemas,\n        fragmentsByField: undefined,\n        selectionSetsByField,\n        dynamicSelectionSetsByField: undefined,\n        mergedTypes,\n    };\n}\nfunction createMergedTypes(typeCandidates, mergeTypes) {\n    const mergedTypes = Object.create(null);\n    Object.keys(typeCandidates).forEach(typeName => {\n        if (typeCandidates[typeName].length > 1 &&\n            (isObjectType(typeCandidates[typeName][0].type) || isInterfaceType(typeCandidates[typeName][0].type))) {\n            const typeCandidatesWithMergedTypeConfig = typeCandidates[typeName].filter(typeCandidate => typeCandidate.subschema != null &&\n                isSubschemaConfig(typeCandidate.subschema) &&\n                typeCandidate.subschema.merge != null &&\n                typeName in typeCandidate.subschema.merge);\n            if (mergeTypes === true ||\n                (typeof mergeTypes === 'function' && mergeTypes(typeCandidates[typeName], typeName)) ||\n                (Array.isArray(mergeTypes) && mergeTypes.includes(typeName)) ||\n                typeCandidatesWithMergedTypeConfig.length) {\n                const targetSubschemas = [];\n                const typeMaps = new Map();\n                const supportedBySubschemas = Object.create({});\n                const selectionSets = new Map();\n                const fieldSelectionSets = new Map();\n                typeCandidates[typeName].forEach(typeCandidate => {\n                    var _a;\n                    const subschema = typeCandidate.subschema;\n                    if (subschema == null) {\n                        return;\n                    }\n                    typeMaps.set(subschema, typeCandidate.transformedSchema.getTypeMap());\n                    if (!isSubschemaConfig(subschema)) {\n                        return;\n                    }\n                    const mergedTypeConfig = (_a = subschema === null || subschema === void 0 ? void 0 : subschema.merge) === null || _a === void 0 ? void 0 : _a[typeName];\n                    if (mergedTypeConfig == null) {\n                        return;\n                    }\n                    if (mergedTypeConfig.selectionSet) {\n                        const selectionSet = parseSelectionSet(mergedTypeConfig.selectionSet);\n                        selectionSets.set(subschema, selectionSet);\n                    }\n                    if (mergedTypeConfig.fields) {\n                        const parsedFieldSelectionSets = Object.create(null);\n                        Object.keys(mergedTypeConfig.fields).forEach(fieldName => {\n                            if (mergedTypeConfig.fields[fieldName].selectionSet) {\n                                const rawFieldSelectionSet = mergedTypeConfig.fields[fieldName].selectionSet;\n                                parsedFieldSelectionSets[fieldName] = parseSelectionSet(rawFieldSelectionSet);\n                            }\n                        });\n                        fieldSelectionSets.set(subschema, parsedFieldSelectionSets);\n                    }\n                    if (mergedTypeConfig.computedFields) {\n                        const parsedFieldSelectionSets = Object.create(null);\n                        Object.keys(mergedTypeConfig.computedFields).forEach(fieldName => {\n                            if (mergedTypeConfig.computedFields[fieldName].selectionSet) {\n                                const rawFieldSelectionSet = mergedTypeConfig.computedFields[fieldName].selectionSet;\n                                parsedFieldSelectionSets[fieldName] = parseSelectionSet(rawFieldSelectionSet);\n                            }\n                        });\n                        fieldSelectionSets.set(subschema, parsedFieldSelectionSets);\n                    }\n                    if (mergedTypeConfig.resolve != null) {\n                        targetSubschemas.push(subschema);\n                    }\n                    else if (mergedTypeConfig.key != null) {\n                        mergedTypeConfig.resolve = (originalResult, context, info, subschema, selectionSet) => {\n                            var _a;\n                            return batchDelegateToSchema({\n                                schema: subschema,\n                                operation: 'query',\n                                fieldName: mergedTypeConfig.fieldName,\n                                key: mergedTypeConfig.key(originalResult),\n                                argsFromKeys: (_a = mergedTypeConfig.argsFromKeys) !== null && _a !== void 0 ? _a : mergedTypeConfig.args,\n                                valuesFromResults: mergedTypeConfig.valuesFromResults,\n                                selectionSet,\n                                context,\n                                info,\n                                skipTypeMerging: true,\n                            });\n                        };\n                        targetSubschemas.push(subschema);\n                    }\n                    else if (mergedTypeConfig.fieldName != null) {\n                        mergedTypeConfig.resolve = (originalResult, context, info, subschema, selectionSet) => delegateToSchema({\n                            schema: subschema,\n                            operation: 'query',\n                            fieldName: mergedTypeConfig.fieldName,\n                            returnType: getNamedType(info.returnType),\n                            args: mergedTypeConfig.args(originalResult),\n                            selectionSet,\n                            context,\n                            info,\n                            skipTypeMerging: true,\n                        });\n                        targetSubschemas.push(subschema);\n                    }\n                    if (mergedTypeConfig.resolve == null) {\n                        return;\n                    }\n                    const type = typeCandidate.transformedSchema.getType(typeName);\n                    const fieldMap = type.getFields();\n                    const selectionSet = selectionSets.get(subschema);\n                    Object.keys(fieldMap).forEach(fieldName => {\n                        const field = fieldMap[fieldName];\n                        const fieldType = getNamedType(field.type);\n                        if (selectionSet && isLeafType(fieldType) && selectionSetContainsTopLevelField(selectionSet, fieldName)) {\n                            return;\n                        }\n                        if (!(fieldName in supportedBySubschemas)) {\n                            supportedBySubschemas[fieldName] = [];\n                        }\n                        supportedBySubschemas[fieldName].push(subschema);\n                    });\n                });\n                const sourceSubschemas = typeCandidates[typeName]\n                    .filter(typeCandidate => typeCandidate.subschema != null)\n                    .map(typeCandidate => typeCandidate.subschema);\n                const targetSubschemasBySubschema = new Map();\n                sourceSubschemas.forEach(subschema => {\n                    const filteredSubschemas = targetSubschemas.filter(s => s !== subschema);\n                    if (filteredSubschemas.length) {\n                        targetSubschemasBySubschema.set(subschema, filteredSubschemas);\n                    }\n                });\n                mergedTypes[typeName] = {\n                    typeName,\n                    targetSubschemas: targetSubschemasBySubschema,\n                    typeMaps,\n                    selectionSets,\n                    fieldSelectionSets,\n                    uniqueFields: Object.create({}),\n                    nonUniqueFields: Object.create({}),\n                };\n                Object.keys(supportedBySubschemas).forEach(fieldName => {\n                    if (supportedBySubschemas[fieldName].length === 1) {\n                        mergedTypes[typeName].uniqueFields[fieldName] = supportedBySubschemas[fieldName][0];\n                    }\n                    else {\n                        mergedTypes[typeName].nonUniqueFields[fieldName] = supportedBySubschemas[fieldName];\n                    }\n                });\n            }\n        }\n    });\n    return mergedTypes;\n}\nexport function completeStitchingInfo(stitchingInfo, resolvers) {\n    const selectionSetsByField = stitchingInfo.selectionSetsByField;\n    const dynamicSelectionSetsByField = Object.create(null);\n    const rawFragments = [];\n    Object.keys(resolvers).forEach(typeName => {\n        const type = resolvers[typeName];\n        if (isScalarType(type)) {\n            return;\n        }\n        Object.keys(type).forEach(fieldName => {\n            const field = type[fieldName];\n            if (field.selectionSet) {\n                if (typeof field.selectionSet === 'function') {\n                    if (!(typeName in dynamicSelectionSetsByField)) {\n                        dynamicSelectionSetsByField[typeName] = Object.create(null);\n                    }\n                    if (!(fieldName in dynamicSelectionSetsByField[typeName])) {\n                        dynamicSelectionSetsByField[typeName][fieldName] = [];\n                    }\n                    dynamicSelectionSetsByField[typeName][fieldName].push(field.selectionSet);\n                }\n                else {\n                    const selectionSet = parseSelectionSet(field.selectionSet);\n                    if (!(typeName in selectionSetsByField)) {\n                        selectionSetsByField[typeName] = Object.create(null);\n                    }\n                    if (!(fieldName in selectionSetsByField[typeName])) {\n                        selectionSetsByField[typeName][fieldName] = {\n                            kind: Kind.SELECTION_SET,\n                            selections: [],\n                        };\n                    }\n                    selectionSetsByField[typeName][fieldName].selections = selectionSetsByField[typeName][fieldName].selections.concat(selectionSet.selections);\n                }\n            }\n            if (field.fragment) {\n                rawFragments.push({\n                    field: fieldName,\n                    fragment: field.fragment,\n                });\n            }\n        });\n    });\n    Object.keys(selectionSetsByField).forEach(typeName => {\n        const typeSelectionSets = selectionSetsByField[typeName];\n        Object.keys(typeSelectionSets).forEach(fieldName => {\n            const consolidatedSelections = new Map();\n            const selectionSet = typeSelectionSets[fieldName];\n            selectionSet.selections.forEach(selection => {\n                consolidatedSelections.set(print(selection), selection);\n            });\n            selectionSet.selections = Array.from(consolidatedSelections.values());\n        });\n    });\n    const parsedFragments = Object.create(null);\n    rawFragments.forEach(({ field, fragment }) => {\n        const parsedFragment = parseFragmentToInlineFragment(fragment);\n        const actualTypeName = parsedFragment.typeCondition.name.value;\n        if (!(actualTypeName in parsedFragments)) {\n            parsedFragments[actualTypeName] = Object.create(null);\n        }\n        if (!(field in parsedFragments[actualTypeName])) {\n            parsedFragments[actualTypeName][field] = [];\n        }\n        parsedFragments[actualTypeName][field].push(parsedFragment);\n    });\n    const fragmentsByField = Object.create(null);\n    Object.keys(parsedFragments).forEach(typeName => {\n        Object.keys(parsedFragments[typeName]).forEach(field => {\n            if (!(typeName in fragmentsByField)) {\n                fragmentsByField[typeName] = Object.create(null);\n            }\n            fragmentsByField[typeName][field] = concatInlineFragments(typeName, parsedFragments[typeName][field]);\n        });\n    });\n    stitchingInfo.selectionSetsByField = selectionSetsByField;\n    stitchingInfo.dynamicSelectionSetsByField = dynamicSelectionSetsByField;\n    stitchingInfo.fragmentsByField = fragmentsByField;\n    return stitchingInfo;\n}\nexport function addStitchingInfo(stitchedSchema, stitchingInfo) {\n    return new GraphQLSchema({\n        ...stitchedSchema.toConfig(),\n        extensions: {\n            ...stitchedSchema.extensions,\n            stitchingInfo,\n        },\n    });\n}\nexport function selectionSetContainsTopLevelField(selectionSet, fieldName) {\n    return selectionSet.selections.some(selection => selection.kind === Kind.FIELD && selection.name.value === fieldName);\n}\n//# sourceMappingURL=stitchingInfo.js.map","import { isObjectType, isInterfaceType } from 'graphql';\nimport { getImplementingTypes, pruneSchema, filterSchema } from '@graphql-tools/utils';\nimport { TransformCompositeFields } from '@graphql-tools/wrap';\nexport function isolateComputedFields(subschemaConfig) {\n    var _a;\n    const baseSchemaTypes = {};\n    const isolatedSchemaTypes = {};\n    if (subschemaConfig.merge == null) {\n        return [subschemaConfig];\n    }\n    Object.keys(subschemaConfig.merge).forEach((typeName) => {\n        const mergedTypeConfig = subschemaConfig.merge[typeName];\n        baseSchemaTypes[typeName] = mergedTypeConfig;\n        if (mergedTypeConfig.computedFields) {\n            const baseFields = {};\n            const isolatedFields = {};\n            Object.keys(mergedTypeConfig.computedFields).forEach((fieldName) => {\n                const mergedFieldConfig = mergedTypeConfig.computedFields[fieldName];\n                if (mergedFieldConfig.selectionSet) {\n                    isolatedFields[fieldName] = mergedFieldConfig;\n                }\n                else {\n                    baseFields[fieldName] = mergedFieldConfig;\n                }\n            });\n            const isolatedFieldCount = Object.keys(isolatedFields).length;\n            const objectType = subschemaConfig.schema.getType(typeName);\n            if (isolatedFieldCount && isolatedFieldCount !== Object.keys(objectType.getFields()).length) {\n                baseSchemaTypes[typeName] = {\n                    ...mergedTypeConfig,\n                    fields: Object.keys(baseFields).length ? baseFields : undefined,\n                };\n                isolatedSchemaTypes[typeName] = { ...mergedTypeConfig, fields: isolatedFields };\n            }\n        }\n    });\n    if (Object.keys(isolatedSchemaTypes).length) {\n        const endpoint = (_a = subschemaConfig.endpoint) !== null && _a !== void 0 ? _a : {\n            rootValue: subschemaConfig.rootValue,\n            executor: subschemaConfig.executor,\n            subscriber: subschemaConfig.subscriber,\n            batch: subschemaConfig.batch,\n            batchingOptions: subschemaConfig.batchingOptions,\n        };\n        return [\n            filterBaseSubschema({ ...subschemaConfig, endpoint, merge: baseSchemaTypes }, isolatedSchemaTypes),\n            filterIsolatedSubschema({ ...subschemaConfig, endpoint, merge: isolatedSchemaTypes }),\n        ];\n    }\n    return [subschemaConfig];\n}\nfunction filterBaseSubschema(subschemaConfig, isolatedSchemaTypes) {\n    var _a;\n    const typesForInterface = {};\n    const filteredSchema = pruneSchema(filterSchema({\n        schema: subschemaConfig.schema,\n        objectFieldFilter: (typeName, fieldName) => { var _a; return !((_a = isolatedSchemaTypes[typeName]) === null || _a === void 0 ? void 0 : _a.fields[fieldName]); },\n        interfaceFieldFilter: (typeName, fieldName) => {\n            if (!typesForInterface[typeName]) {\n                typesForInterface[typeName] = getImplementingTypes(typeName, subschemaConfig.schema);\n            }\n            return !typesForInterface[typeName].some(implementingTypeName => { var _a; return (_a = isolatedSchemaTypes[implementingTypeName]) === null || _a === void 0 ? void 0 : _a.fields[fieldName]; });\n        },\n    }));\n    const filteredFields = {};\n    Object.keys(filteredSchema.getTypeMap()).forEach(typeName => {\n        const type = filteredSchema.getType(typeName);\n        if (isObjectType(type) || isInterfaceType(type)) {\n            filteredFields[typeName] = {};\n            const fieldMap = type.getFields();\n            Object.keys(fieldMap).forEach(fieldName => {\n                filteredFields[typeName][fieldName] = true;\n            });\n        }\n    });\n    const filteredSubschema = {\n        ...subschemaConfig,\n        merge: subschemaConfig.merge\n            ? {\n                ...subschemaConfig.merge,\n            }\n            : undefined,\n        transforms: ((_a = subschemaConfig.transforms) !== null && _a !== void 0 ? _a : []).concat([\n            new TransformCompositeFields((typeName, fieldName) => { var _a; return (((_a = filteredFields[typeName]) === null || _a === void 0 ? void 0 : _a[fieldName]) ? undefined : null); }, (typeName, fieldName) => { var _a; return (((_a = filteredFields[typeName]) === null || _a === void 0 ? void 0 : _a[fieldName]) ? undefined : null); }),\n        ]),\n    };\n    const remainingTypes = filteredSchema.getTypeMap();\n    Object.keys(filteredSubschema.merge).forEach(mergeType => {\n        if (!remainingTypes[mergeType]) {\n            delete filteredSubschema.merge[mergeType];\n        }\n    });\n    if (!Object.keys(filteredSubschema.merge).length) {\n        delete filteredSubschema.merge;\n    }\n    return filteredSubschema;\n}\nfunction filterIsolatedSubschema(subschemaConfig) {\n    var _a;\n    const rootFields = {};\n    Object.keys(subschemaConfig.merge).forEach(typeName => {\n        rootFields[subschemaConfig.merge[typeName].fieldName] = true;\n    });\n    const interfaceFields = {};\n    Object.keys(subschemaConfig.merge).forEach(typeName => {\n        subschemaConfig.schema.getType(typeName).getInterfaces().forEach(int => {\n            Object.keys(subschemaConfig.schema.getType(int.name).getFields()).forEach(intFieldName => {\n                if (subschemaConfig.merge[typeName].fields[intFieldName]) {\n                    interfaceFields[int.name] = interfaceFields[int.name] || {};\n                    interfaceFields[int.name][intFieldName] = true;\n                }\n            });\n        });\n    });\n    const filteredSchema = pruneSchema(filterSchema({\n        schema: subschemaConfig.schema,\n        rootFieldFilter: (operation, fieldName) => operation === 'Query' && rootFields[fieldName] != null,\n        objectFieldFilter: (typeName, fieldName) => { var _a; return ((_a = subschemaConfig.merge[typeName]) === null || _a === void 0 ? void 0 : _a.fields[fieldName]) != null; },\n        interfaceFieldFilter: (typeName, fieldName) => { var _a; return ((_a = interfaceFields[typeName]) === null || _a === void 0 ? void 0 : _a[fieldName]) != null; },\n    }));\n    const filteredFields = {};\n    Object.keys(filteredSchema.getTypeMap()).forEach(typeName => {\n        const type = filteredSchema.getType(typeName);\n        if (isObjectType(type) || isInterfaceType(type)) {\n            filteredFields[typeName] = {};\n            const fieldMap = type.getFields();\n            Object.keys(fieldMap).forEach(fieldName => {\n                filteredFields[typeName][fieldName] = true;\n            });\n        }\n    });\n    return {\n        ...subschemaConfig,\n        transforms: ((_a = subschemaConfig.transforms) !== null && _a !== void 0 ? _a : []).concat([\n            new TransformCompositeFields((typeName, fieldName) => { var _a; return (((_a = filteredFields[typeName]) === null || _a === void 0 ? void 0 : _a[fieldName]) ? undefined : null); }, (typeName, fieldName) => { var _a; return (((_a = filteredFields[typeName]) === null || _a === void 0 ? void 0 : _a[fieldName]) ? undefined : null); }),\n        ]),\n    };\n}\n//# sourceMappingURL=isolateComputedFields.js.map","import { getDirectives, MapperKind, mapSchema } from '@graphql-tools/utils';\nimport { cloneSubschemaConfig } from '@graphql-tools/delegate';\nexport function computedDirectiveTransformer(computedDirectiveName) {\n    return (subschemaConfig) => {\n        const newSubschemaConfig = cloneSubschemaConfig(subschemaConfig);\n        mapSchema(subschemaConfig.schema, {\n            [MapperKind.OBJECT_FIELD]: (fieldConfig, fieldName, typeName, schema) => {\n                var _a, _b, _c, _d;\n                const mergeTypeConfig = (_a = newSubschemaConfig.merge) === null || _a === void 0 ? void 0 : _a[typeName];\n                if (mergeTypeConfig == null) {\n                    return undefined;\n                }\n                const computed = getDirectives(schema, fieldConfig)[computedDirectiveName];\n                if (computed == null) {\n                    return undefined;\n                }\n                const selectionSet = computed.fields != null ? `{ ${computed.fields} }` : computed.selectionSet;\n                if (selectionSet == null) {\n                    return undefined;\n                }\n                mergeTypeConfig.computedFields = (_b = mergeTypeConfig.computedFields) !== null && _b !== void 0 ? _b : {};\n                mergeTypeConfig.computedFields[fieldName] = (_c = mergeTypeConfig.computedFields[fieldName]) !== null && _c !== void 0 ? _c : {};\n                const mergeFieldConfig = mergeTypeConfig.computedFields[fieldName];\n                mergeFieldConfig.selectionSet = (_d = mergeFieldConfig.selectionSet) !== null && _d !== void 0 ? _d : selectionSet;\n                return undefined;\n            },\n        });\n        return newSubschemaConfig;\n    };\n}\n//# sourceMappingURL=computedDirectiveTransformer.js.map","import { computedDirectiveTransformer } from './computedDirectiveTransformer';\nexport { computedDirectiveTransformer } from './computedDirectiveTransformer';\nexport const defaultSubschemaConfigTransforms = [computedDirectiveTransformer('computed')];\n//# sourceMappingURL=index.js.map","import { GraphQLSchema, specifiedDirectives, extendSchema, isSchema, } from 'graphql';\nimport { SchemaDirectiveVisitor, mergeDeep, rewireTypes, pruneSchema } from '@graphql-tools/utils';\nimport { addResolversToSchema, addSchemaLevelResolver, addErrorLoggingToSchema, addCatchUndefinedToSchema, assertResolversPresent, attachDirectiveResolvers, buildDocumentFromTypeDefinitions, extendResolversFromInterfaces, } from '@graphql-tools/schema';\nimport { buildTypeCandidates, buildTypeMap } from './typeCandidates';\nimport { createStitchingInfo, completeStitchingInfo, addStitchingInfo } from './stitchingInfo';\nimport { isSubschemaConfig } from '@graphql-tools/delegate';\nimport { isolateComputedFields } from './isolateComputedFields';\nimport { defaultSubschemaConfigTransforms } from './subschemaConfigTransforms';\nexport function stitchSchemas({ subschemas = [], types = [], typeDefs, \n// `schemas` to be removed in v7, replaces by subschemas, types, typeDefs\nschemas = [], onTypeConflict, mergeDirectives, mergeTypes = false, typeMergingOptions, subschemaConfigTransforms = defaultSubschemaConfigTransforms, resolvers = {}, schemaDirectives, inheritResolversFromInterfaces = false, logger, allowUndefinedInResolve = true, resolverValidationOptions = {}, directiveResolvers, schemaTransforms = [], parseOptions = {}, pruningOptions, }) {\n    if (typeof resolverValidationOptions !== 'object') {\n        throw new Error('Expected `resolverValidationOptions` to be an object');\n    }\n    let schemaLikeObjects = [];\n    const transformedSubschemaConfigs = new Map();\n    subschemas.forEach(subschemaOrSubschemaArray => {\n        if (Array.isArray(subschemaOrSubschemaArray)) {\n            subschemaOrSubschemaArray.forEach(s => {\n                schemaLikeObjects = schemaLikeObjects.concat(applySubschemaConfigTransforms(subschemaConfigTransforms, s, transformedSubschemaConfigs));\n            });\n        }\n        else {\n            schemaLikeObjects = schemaLikeObjects.concat(applySubschemaConfigTransforms(subschemaConfigTransforms, subschemaOrSubschemaArray, transformedSubschemaConfigs));\n        }\n    });\n    // to be removed in v7\n    schemas.forEach(schemaLikeObject => {\n        if (!isSchema(schemaLikeObject) &&\n            !isSubschemaConfig(schemaLikeObject) &&\n            typeof schemaLikeObject !== 'string' &&\n            !isDocumentNode(schemaLikeObject) &&\n            !Array.isArray(schemaLikeObject)) {\n            throw new Error('Invalid schema passed');\n        }\n    });\n    // to be removed in v7\n    schemas.forEach(schemaLikeObject => {\n        if (isSchema(schemaLikeObject) || isSubschemaConfig(schemaLikeObject)) {\n            schemaLikeObjects.push(schemaLikeObject);\n        }\n    });\n    if ((typeDefs && !Array.isArray(typeDefs)) || (Array.isArray(typeDefs) && typeDefs.length)) {\n        schemaLikeObjects.push(buildDocumentFromTypeDefinitions(typeDefs, parseOptions));\n    }\n    // to be removed in v7\n    schemas.forEach(schemaLikeObject => {\n        if (typeof schemaLikeObject === 'string' || isDocumentNode(schemaLikeObject)) {\n            schemaLikeObjects.push(buildDocumentFromTypeDefinitions(schemaLikeObject, parseOptions));\n        }\n    });\n    if (types != null) {\n        schemaLikeObjects = schemaLikeObjects.concat(types);\n    }\n    // to be removed in v7\n    schemas.forEach(schemaLikeObject => {\n        if (Array.isArray(schemaLikeObject)) {\n            schemaLikeObjects = schemaLikeObjects.concat(schemaLikeObject);\n        }\n    });\n    const transformedSchemas = new Map();\n    const extensions = [];\n    const directives = [];\n    const directiveMap = specifiedDirectives.reduce((acc, directive) => {\n        acc[directive.name] = directive;\n        return acc;\n    }, Object.create(null));\n    const schemaDefs = Object.create(null);\n    const operationTypeNames = {\n        query: 'Query',\n        mutation: 'Mutation',\n        subscription: 'Subscription',\n    };\n    const typeCandidates = buildTypeCandidates({\n        schemaLikeObjects,\n        transformedSchemas,\n        extensions,\n        directiveMap,\n        schemaDefs,\n        operationTypeNames,\n        mergeDirectives,\n    });\n    Object.keys(directiveMap).forEach(directiveName => {\n        directives.push(directiveMap[directiveName]);\n    });\n    let stitchingInfo = createStitchingInfo(transformedSubschemaConfigs, transformedSchemas, typeCandidates, mergeTypes);\n    const typeMap = buildTypeMap({\n        typeCandidates,\n        stitchingInfo,\n        operationTypeNames,\n        onTypeConflict,\n        mergeTypes,\n        typeMergingOptions,\n    });\n    const { typeMap: newTypeMap, directives: newDirectives } = rewireTypes(typeMap, directives, { skipPruning: true });\n    let schema = new GraphQLSchema({\n        query: newTypeMap[operationTypeNames.query],\n        mutation: newTypeMap[operationTypeNames.mutation],\n        subscription: newTypeMap[operationTypeNames.subscription],\n        types: Object.keys(newTypeMap).map(key => newTypeMap[key]),\n        directives: newDirectives,\n        astNode: schemaDefs.schemaDef,\n        extensionASTNodes: schemaDefs.schemaExtensions,\n        extensions: null,\n    });\n    extensions.forEach(extension => {\n        schema = extendSchema(schema, extension, {\n            commentDescriptions: true,\n        });\n    });\n    // We allow passing in an array of resolver maps, in which case we merge them\n    const resolverMap = Array.isArray(resolvers) ? resolvers.reduce(mergeDeep, {}) : resolvers;\n    const finalResolvers = inheritResolversFromInterfaces\n        ? extendResolversFromInterfaces(schema, resolverMap)\n        : resolverMap;\n    stitchingInfo = completeStitchingInfo(stitchingInfo, finalResolvers);\n    schema = addResolversToSchema({\n        schema,\n        resolvers: finalResolvers,\n        resolverValidationOptions,\n        inheritResolversFromInterfaces: false,\n    });\n    assertResolversPresent(schema, resolverValidationOptions);\n    schema = addStitchingInfo(schema, stitchingInfo);\n    if (!allowUndefinedInResolve) {\n        schema = addCatchUndefinedToSchema(schema);\n    }\n    if (logger != null) {\n        schema = addErrorLoggingToSchema(schema, logger);\n    }\n    if (typeof finalResolvers['__schema'] === 'function') {\n        // TODO a bit of a hack now, better rewrite generateSchema to attach it there.\n        // not doing that now, because I'd have to rewrite a lot of tests.\n        schema = addSchemaLevelResolver(schema, finalResolvers['__schema']);\n    }\n    schemaTransforms.forEach(schemaTransform => {\n        schema = schemaTransform(schema);\n    });\n    if (directiveResolvers != null) {\n        schema = attachDirectiveResolvers(schema, directiveResolvers);\n    }\n    if (schemaDirectives != null) {\n        SchemaDirectiveVisitor.visitSchemaDirectives(schema, schemaDirectives);\n    }\n    return pruningOptions ? pruneSchema(schema, pruningOptions) : schema;\n}\nfunction applySubschemaConfigTransforms(subschemaConfigTransforms, subschemaOrSubschemaConfig, transformedSubschemaConfigs) {\n    const subschemaConfig = isSubschemaConfig(subschemaOrSubschemaConfig)\n        ? subschemaOrSubschemaConfig\n        : { schema: subschemaOrSubschemaConfig };\n    const newSubschemaConfig = subschemaConfigTransforms.reduce((acc, subschemaConfigTransform) => {\n        return subschemaConfigTransform(acc);\n    }, subschemaConfig);\n    const subschemas = isolateComputedFields(newSubschemaConfig);\n    const baseSubschema = subschemas[0];\n    transformedSubschemaConfigs.set(subschemaConfig, baseSubschema);\n    return subschemas;\n}\nexport function isDocumentNode(object) {\n    return object.kind !== undefined;\n}\n//# sourceMappingURL=stitchSchemas.js.map","import { parseSelectionSet } from '@graphql-tools/utils';\nimport { Kind } from 'graphql';\nexport const forwardArgsToSelectionSet = (selectionSet, mapping) => {\n    const selectionSetDef = parseSelectionSet(selectionSet);\n    return (field) => {\n        const selections = selectionSetDef.selections.map((selectionNode) => {\n            if (selectionNode.kind === Kind.FIELD) {\n                if (!mapping) {\n                    return { ...selectionNode, arguments: field.arguments.slice() };\n                }\n                else if (selectionNode.name.value in mapping) {\n                    const selectionArgs = mapping[selectionNode.name.value];\n                    return {\n                        ...selectionNode,\n                        arguments: field.arguments.filter((arg) => selectionArgs.includes(arg.name.value)),\n                    };\n                }\n            }\n            return selectionNode;\n        });\n        return { ...selectionSetDef, selections };\n    };\n};\n//# sourceMappingURL=selectionSetArgs.js.map"],"names":["Kind","createNamedStub","GraphQLObjectType","GraphQLInterfaceType","GraphQLEnumType","GraphQLUnionType","GraphQLScalarType","GraphQLInputObjectType","createStub","valueFromASTUntyped","DirectiveLocation","GraphQLDirective","TokenKind","getDirectiveValues","GraphQLDeprecatedDirective","isObjectType","isInputObjectType","isInterfaceType","isUnionType","isEnumType","isScalarType","mergeType","mergeInputType","mergeInterface","mergeUnion","mergeEnum","fieldToFieldConfig","inputFieldToFieldConfig","isSchema","isSubschemaConfig","wrapSchema","isNamedType","getNamedType","isSpecifiedScalarType","isLeafType","parseSelectionSet","batchDelegateToSchema","delegateToSchema","print","parseFragmentToInlineFragment","concatInlineFragments","GraphQLSchema","pruneSchema","filterSchema","getImplementingTypes","TransformCompositeFields","cloneSubschemaConfig","mapSchema","MapperKind","getDirectives","isDocumentNode","buildDocumentFromTypeDefinitions","specifiedDirectives","rewireTypes","schema","extendSchema","mergeDeep","extendResolversFromInterfaces","addResolversToSchema","assertResolversPresent","addCatchUndefinedToSchema","addErrorLoggingToSchema","addSchemaLevelResolver","attachDirectiveResolvers","SchemaDirectiveVisitor"],"mappings":"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"}