{"version":3,"file":"useSubscription.js","sourceRoot":"","sources":["../../../src/react/hooks/useSubscription.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,EAAE,SAAS,EAAE,UAAU,EAAE,MAAM,OAAO,CAAC;AAK5E,OAAO,EAAE,gBAAgB,EAAE,MAAM,SAAS,CAAC;AAE3C,OAAO,EAAE,gBAAgB,EAAE,MAAM,YAAY,CAAC;AAC9C,OAAO,EAAE,mBAAmB,EAAE,MAAM,6BAA6B,CAAC;AAElE,MAAM,UAAU,eAAe,CAC7B,YAAiE,EACjE,OAAoD;IAE9C,IAAA,KAAkB,UAAU,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,GAAG,CAAC,EAAL,CAAK,EAAE,CAAC,CAAC,EAAxC,WAAW,QAA6B,CAAC;IAClD,IAAM,OAAO,GAAG,UAAU,CAAC,gBAAgB,EAAE,CAAC,CAAC;IAC/C,IAAM,cAAc,GAAG,OAAO;QAC5B,CAAC,uBAAM,OAAO,KAAE,YAAY,cAAA,IAC5B,CAAC,CAAC,EAAE,YAAY,cAAA,EAAE,CAAC;IACf,IAAA,KAAsB,QAAQ,CAAC;QACnC,OAAO,EAAE,CAAC,cAAc,CAAC,IAAI;QAC7B,KAAK,EAAE,KAAK,CAAC;QACb,IAAI,EAAE,KAAK,CAAC;KACb,CAAC,EAJK,MAAM,QAAA,EAAE,SAAS,QAItB,CAAC;IAEH,IAAM,mBAAmB,GAAG,MAAM,EAAuC,CAAC;IAC1E,SAAS,sBAAsB;QAC7B,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE;YAChC,mBAAmB,CAAC,OAAO,GAAG,IAAI,gBAAgB,CAAoB;gBACpE,OAAO,EAAE,cAAc;gBACvB,OAAO,SAAA;gBACP,SAAS,WAAA;aACV,CAAC,CAAC;SACJ;QACD,OAAO,mBAAmB,CAAC,OAAO,CAAC;IACrC,CAAC;IAED,IAAM,gBAAgB,GAAG,sBAAsB,EAAE,CAAC;IAClD,gBAAgB,CAAC,UAAU,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;IAClD,gBAAgB,CAAC,OAAO,GAAG,OAAO,CAAC;IAEnC,IAAI,OAAO,EAAE;QAEX,mBAAmB,CAAC,WAAW,CAAC,CAAC;KAClC;IAED,SAAS,CAAC,cAAM,OAAA,gBAAgB,CAAC,YAAY,EAAE,EAA/B,CAA+B,CAAC,CAAC;IACjD,SAAS,CAAC;QACR,OAAO;YACL,gBAAgB,CAAC,OAAO,EAAE,CAAC;YAC3B,mBAAmB,CAAC,OAAO,GAAG,KAAK,CAAC,CAAC;QACvC,CAAC,CAAC;IACJ,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,OAAO,gBAAgB,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;AAC1C,CAAC","sourcesContent":["import { useContext, useState, useRef, useEffect, useReducer } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\n\nimport { SubscriptionHookOptions } from '../types/types';\nimport { SubscriptionData } from '../data';\nimport { OperationVariables } from '../../core';\nimport { getApolloContext } from '../context';\nimport { useAfterFastRefresh } from './utils/useAfterFastRefresh';\n\nexport function useSubscription<TData = any, TVariables = OperationVariables>(\n  subscription: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: SubscriptionHookOptions<TData, TVariables>\n) {\n  const [, forceUpdate] = useReducer(x => x + 1, 0);\n  const context = useContext(getApolloContext());\n  const updatedOptions = options\n    ? { ...options, subscription }\n    : { subscription };\n  const [result, setResult] = useState({\n    loading: !updatedOptions.skip,\n    error: void 0,\n    data: void 0,\n  });\n\n  const subscriptionDataRef = useRef<SubscriptionData<TData, TVariables>>();\n  function getSubscriptionDataRef() {\n    if (!subscriptionDataRef.current) {\n      subscriptionDataRef.current = new SubscriptionData<TData, TVariables>({\n        options: updatedOptions,\n        context,\n        setResult\n      });\n    }\n    return subscriptionDataRef.current;\n  }\n\n  const subscriptionData = getSubscriptionDataRef();\n  subscriptionData.setOptions(updatedOptions, true);\n  subscriptionData.context = context;\n\n  if (__DEV__) {\n    // ensure we run an update after refreshing so that we can resubscribe\n    useAfterFastRefresh(forceUpdate);\n  }\n\n  useEffect(() => subscriptionData.afterExecute());\n  useEffect(() => {\n    return () => {\n      subscriptionData.cleanup();\n      subscriptionDataRef.current = void 0;\n    };\n  }, []);\n\n  return subscriptionData.execute(result);\n}\n"]}