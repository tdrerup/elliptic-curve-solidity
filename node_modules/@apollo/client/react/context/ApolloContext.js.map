{"version":3,"file":"ApolloContext.js","sourceRoot":"","sources":["../../../src/react/context/ApolloContext.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAchD,IAAM,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,EAG9C,CAAC;AAEJ,MAAM,UAAU,gBAAgB;IAC9B,IAAI,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,aAAa,CAAE,CAAC;IAC9C,IAAI,CAAC,OAAO,EAAE;QACZ,OAAO,GAAG,KAAK,CAAC,aAAa,CAAqB,EAAE,CAAC,CAAC;QACtD,OAAO,CAAC,WAAW,GAAG,eAAe,CAAC;QACtC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;KACzC;IACD,OAAO,OAAO,CAAC;AACjB,CAAC;AAED,OAAO,EAAE,gBAAgB,IAAI,kBAAkB,EAAE,CAAA","sourcesContent":["import * as React from 'react';\nimport { ApolloClient } from '../../core';\nimport { canUseWeakMap } from '../../utilities';\n\nexport interface ApolloContextValue {\n  client?: ApolloClient<object>;\n  renderPromises?: Record<any, any>;\n}\n\n// To make sure Apollo Client doesn't create more than one React context\n// (which can lead to problems like having an Apollo Client instance added\n// in one context, then attempting to retrieve it from another different\n// context), a single Apollo context is created and tracked in global state.\n// We use React.createContext as the key instead of just React to avoid\n// ambiguities between default and namespace React imports.\n\nconst cache = new (canUseWeakMap ? WeakMap : Map)<\n  typeof React.createContext,\n  React.Context<ApolloContextValue>\n>();\n\nexport function getApolloContext() {\n  let context = cache.get(React.createContext)!;\n  if (!context) {\n    context = React.createContext<ApolloContextValue>({});\n    context.displayName = 'ApolloContext';\n    cache.set(React.createContext, context);\n  }\n  return context;\n}\n\nexport { getApolloContext as resetApolloContext }\n"]}