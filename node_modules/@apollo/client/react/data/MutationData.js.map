{"version":3,"file":"MutationData.js","sourceRoot":"","sources":["../../../src/react/data/MutationData.ts"],"names":[],"mappings":"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","sourcesContent":["import { equal } from '@wry/equality';\n\nimport { DocumentType } from '../parser';\nimport { ApolloError } from '../../errors';\nimport {\n  MutationDataOptions,\n  MutationTuple,\n  MutationFunctionOptions,\n  MutationResult,\n} from '../types/types';\nimport { OperationData } from './OperationData';\nimport { MutationOptions, mergeOptions, ApolloCache, OperationVariables, DefaultContext } from '../../core';\nimport { FetchResult } from '../../link/core';\n\ntype MutationResultWithoutClient<TData = any> = Omit<MutationResult<TData>, 'client'>;\n\nexport class MutationData<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n> extends OperationData<MutationDataOptions<TData, TVariables, TContext, TCache>> {\n  private mostRecentMutationId: number;\n  private result: MutationResultWithoutClient<TData>;\n  private previousResult?: MutationResultWithoutClient<TData>;\n  private setResult: (result: MutationResultWithoutClient<TData>) => any;\n\n  constructor({\n    options,\n    context,\n    result,\n    setResult\n  }: {\n    options: MutationDataOptions<TData, TVariables, TContext, TCache>;\n    context: any;\n    result: MutationResultWithoutClient<TData>;\n    setResult: (result: MutationResultWithoutClient<TData>) => any;\n  }) {\n    super(options, context);\n    this.verifyDocumentType(options.mutation, DocumentType.Mutation);\n    this.result = result;\n    this.setResult = setResult;\n    this.mostRecentMutationId = 0;\n  }\n\n  public execute(result: MutationResultWithoutClient<TData>): MutationTuple<TData, TVariables, TContext, TCache> {\n    this.isMounted = true;\n    this.verifyDocumentType(this.getOptions().mutation, DocumentType.Mutation);\n    return [\n      this.runMutation,\n      { ...result, client: this.refreshClient().client }\n    ] as MutationTuple<TData, TVariables, TContext, TCache>;\n  }\n\n  public afterExecute() {\n    this.isMounted = true;\n    return this.unmount.bind(this);\n  }\n\n  public cleanup() {\n    // No cleanup required.\n  }\n\n  private runMutation = (\n    mutationFunctionOptions: MutationFunctionOptions<\n      TData,\n      TVariables,\n      TContext,\n      TCache\n    > = {} as MutationFunctionOptions<TData, TVariables, TContext, TCache>\n  ) => {\n    this.onMutationStart();\n    const mutationId = this.generateNewMutationId();\n\n    return this.mutate(mutationFunctionOptions)\n      .then((response: FetchResult<TData>) => {\n        this.onMutationCompleted(response, mutationId);\n        return response;\n      })\n      .catch((error: ApolloError) => {\n        const { onError } = this.getOptions();\n        this.onMutationError(error, mutationId);\n        if (onError) {\n          onError(error);\n          return {\n            data: undefined,\n            errors: error,\n          };\n        } else {\n          throw error;\n        }\n      });\n  };\n\n  private mutate(\n    options: MutationFunctionOptions<TData, TVariables, TContext, TCache>\n  ) {\n    return this.refreshClient().client.mutate(\n      mergeOptions(\n        this.getOptions(),\n        options as MutationOptions<TData, TVariables, TContext>,\n      ),\n    );\n  }\n\n  private onMutationStart() {\n    if (!this.result.loading && !this.getOptions().ignoreResults) {\n      this.updateResult({\n        loading: true,\n        error: undefined,\n        data: undefined,\n        called: true\n      });\n    }\n  }\n\n  private onMutationCompleted(\n    response: FetchResult<TData>,\n    mutationId: number\n  ) {\n    const { onCompleted, ignoreResults } = this.getOptions();\n\n    const { data, errors } = response;\n    const error =\n      errors && errors.length > 0\n        ? new ApolloError({ graphQLErrors: errors })\n        : undefined;\n\n    const callOncomplete = () =>\n      onCompleted ? onCompleted(data as TData) : null;\n\n    if (this.isMostRecentMutation(mutationId) && !ignoreResults) {\n      this.updateResult({\n        called: true,\n        loading: false,\n        data,\n        error\n      });\n    }\n    callOncomplete();\n  }\n\n  private onMutationError(error: ApolloError, mutationId: number) {\n    if (this.isMostRecentMutation(mutationId)) {\n      this.updateResult({\n        loading: false,\n        error,\n        data: undefined,\n        called: true\n      });\n    }\n  }\n\n  private generateNewMutationId(): number {\n    return ++this.mostRecentMutationId;\n  }\n\n  private isMostRecentMutation(mutationId: number) {\n    return this.mostRecentMutationId === mutationId;\n  }\n\n  private updateResult(result: MutationResultWithoutClient<TData>): MutationResultWithoutClient<TData> | undefined {\n    if (\n      this.isMounted &&\n      (!this.previousResult || !equal(this.previousResult, result))\n    ) {\n      this.setResult(result);\n      this.previousResult = result;\n      return result;\n    }\n  }\n}\n"]}