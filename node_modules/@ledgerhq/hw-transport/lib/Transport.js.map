{"version":3,"sources":["../src/Transport.js"],"names":["Transport","exchangeTimeout","unresponsiveTimeout","deviceModel","_events","EventEmitter","send","cla","ins","p1","p2","data","Buffer","alloc","statusList","StatusCodes","OK","length","TransportError","response","exchange","concat","from","sw","readUInt16BE","some","s","TransportStatusError","exchangeBusyPromise","exchangeAtomicImpl","f","TransportRaceCondition","resolveBusy","busyPromise","Promise","r","unresponsiveReached","timeout","setTimeout","emit","res","clearTimeout","_appAPIlock","_apdu","Error","setScrambleKey","_key","close","resolve","on","eventName","cb","off","removeListener","event","args","setDebugMode","console","warn","setExchangeTimeout","setExchangeUnresponsiveTimeout","create","openTimeout","listenTimeout","reject","found","sub","listen","next","e","unsubscribe","listenTimeoutId","open","descriptor","then","error","complete","ErrorMessage_NoDeviceFound","ErrorMessage_ListenTimeout","decorateAppAPIMethods","self","methods","scrambleKey","methodName","decorateAppAPIMethod","ctx","apply","isSupported","list"],"mappings":"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","sourcesContent":["//@flow\n\nimport EventEmitter from \"events\";\nimport type { DeviceModel } from \"@ledgerhq/devices\";\nimport {\n  TransportRaceCondition,\n  TransportError,\n  StatusCodes,\n  getAltStatusMessage,\n  TransportStatusError,\n} from \"@ledgerhq/errors\";\n\nexport {\n  TransportError,\n  TransportStatusError,\n  StatusCodes,\n  getAltStatusMessage,\n};\n\n/**\n */\nexport type Subscription = { unsubscribe: () => void };\n\n/**\n */\nexport type Device = Object;\n\n/**\n * type: add or remove event\n * descriptor: a parameter that can be passed to open(descriptor)\n * deviceModel: device info on the model (is it a nano s, nano x, ...)\n * device: transport specific device info\n */\nexport type DescriptorEvent<Descriptor> = {\n  type: \"add\" | \"remove\",\n  descriptor: Descriptor,\n  deviceModel?: ?DeviceModel,\n  device?: Device,\n};\n/**\n */\nexport type Observer<Ev> = $ReadOnly<{\n  next: (event: Ev) => mixed,\n  error: (e: any) => mixed,\n  complete: () => mixed,\n}>;\n\n/**\n * Transport defines the generic interface to share between node/u2f impl\n * A **Descriptor** is a parametric type that is up to be determined for the implementation.\n * it can be for instance an ID, an file path, a URL,...\n */\nexport default class Transport<Descriptor> {\n  exchangeTimeout: number = 30000;\n  unresponsiveTimeout: number = 15000;\n  deviceModel: ?DeviceModel = null;\n\n  /**\n   * Statically check if a transport is supported on the user's platform/browser.\n   */\n  static +isSupported: () => Promise<boolean>;\n\n  /**\n   * List once all available descriptors. For a better granularity, checkout `listen()`.\n   * @return a promise of descriptors\n   * @example\n   * TransportFoo.list().then(descriptors => ...)\n   */\n  static +list: () => Promise<Array<Descriptor>>;\n\n  /**\n   * Listen all device events for a given Transport. The method takes an Obverver of DescriptorEvent and returns a Subscription (according to Observable paradigm https://github.com/tc39/proposal-observable )\n   * a DescriptorEvent is a `{ descriptor, type }` object. type can be `\"add\"` or `\"remove\"` and descriptor is a value you can pass to `open(descriptor)`.\n   * each listen() call will first emit all potential device already connected and then will emit events can come over times,\n   * for instance if you plug a USB device after listen() or a bluetooth device become discoverable.\n   * @param observer is an object with a next, error and complete function (compatible with observer pattern)\n   * @return a Subscription object on which you can `.unsubscribe()` to stop listening descriptors.\n   * @example\nconst sub = TransportFoo.listen({\n  next: e => {\n    if (e.type===\"add\") {\n      sub.unsubscribe();\n      const transport = await TransportFoo.open(e.descriptor);\n      ...\n    }\n  },\n  error: error => {},\n  complete: () => {}\n})\n   */\n  static +listen: (\n    observer: Observer<DescriptorEvent<Descriptor>>\n  ) => Subscription;\n\n  /**\n   * attempt to create a Transport instance with potentially a descriptor.\n   * @param descriptor: the descriptor to open the transport with.\n   * @param timeout: an optional timeout\n   * @return a Promise of Transport instance\n   * @example\nTransportFoo.open(descriptor).then(transport => ...)\n   */\n  static +open: (\n    descriptor: Descriptor,\n    timeout?: number\n  ) => Promise<Transport<Descriptor>>;\n\n  /**\n   * low level api to communicate with the device\n   * This method is for implementations to implement but should not be directly called.\n   * Instead, the recommanded way is to use send() method\n   * @param apdu the data to send\n   * @return a Promise of response data\n   */\n  exchange(_apdu: Buffer): Promise<Buffer> {\n    throw new Error(\"exchange not implemented\");\n  }\n\n  /**\n   * set the \"scramble key\" for the next exchanges with the device.\n   * Each App can have a different scramble key and they internally will set it at instanciation.\n   * @param key the scramble key\n   */\n  setScrambleKey(_key: string) {}\n\n  /**\n   * close the exchange with the device.\n   * @return a Promise that ends when the transport is closed.\n   */\n  close(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  _events = new EventEmitter();\n\n  /**\n   * Listen to an event on an instance of transport.\n   * Transport implementation can have specific events. Here is the common events:\n   * * `\"disconnect\"` : triggered if Transport is disconnected\n   */\n  on(eventName: string, cb: Function) {\n    this._events.on(eventName, cb);\n  }\n\n  /**\n   * Stop listening to an event on an instance of transport.\n   */\n  off(eventName: string, cb: Function) {\n    this._events.removeListener(eventName, cb);\n  }\n\n  emit(event: string, ...args: *) {\n    this._events.emit(event, ...args);\n  }\n\n  /**\n   * Enable or not logs of the binary exchange\n   */\n  setDebugMode() {\n    console.warn(\n      \"setDebugMode is deprecated. use @ledgerhq/logs instead. No logs are emitted in this anymore.\"\n    );\n  }\n\n  /**\n   * Set a timeout (in milliseconds) for the exchange call. Only some transport might implement it. (e.g. U2F)\n   */\n  setExchangeTimeout(exchangeTimeout: number) {\n    this.exchangeTimeout = exchangeTimeout;\n  }\n\n  /**\n   * Define the delay before emitting \"unresponsive\" on an exchange that does not respond\n   */\n  setExchangeUnresponsiveTimeout(unresponsiveTimeout: number) {\n    this.unresponsiveTimeout = unresponsiveTimeout;\n  }\n\n  /**\n   * wrapper on top of exchange to simplify work of the implementation.\n   * @param cla\n   * @param ins\n   * @param p1\n   * @param p2\n   * @param data\n   * @param statusList is a list of accepted status code (shorts). [0x9000] by default\n   * @return a Promise of response buffer\n   */\n  send = async (\n    cla: number,\n    ins: number,\n    p1: number,\n    p2: number,\n    data: Buffer = Buffer.alloc(0),\n    statusList: Array<number> = [StatusCodes.OK]\n  ): Promise<Buffer> => {\n    if (data.length >= 256) {\n      throw new TransportError(\n        \"data.length exceed 256 bytes limit. Got: \" + data.length,\n        \"DataLengthTooBig\"\n      );\n    }\n    const response = await this.exchange(\n      Buffer.concat([\n        Buffer.from([cla, ins, p1, p2]),\n        Buffer.from([data.length]),\n        data,\n      ])\n    );\n    const sw = response.readUInt16BE(response.length - 2);\n    if (!statusList.some((s) => s === sw)) {\n      throw new TransportStatusError(sw);\n    }\n    return response;\n  };\n\n  /**\n   * create() allows to open the first descriptor available or\n   * throw if there is none or if timeout is reached.\n   * This is a light helper, alternative to using listen() and open() (that you may need for any more advanced usecase)\n   * @example\nTransportFoo.create().then(transport => ...)\n   */\n  static create(\n    openTimeout?: number = 3000,\n    listenTimeout?: number\n  ): Promise<Transport<Descriptor>> {\n    return new Promise((resolve, reject) => {\n      let found = false;\n      const sub = this.listen({\n        next: (e) => {\n          found = true;\n          if (sub) sub.unsubscribe();\n          if (listenTimeoutId) clearTimeout(listenTimeoutId);\n          this.open(e.descriptor, openTimeout).then(resolve, reject);\n        },\n        error: (e) => {\n          if (listenTimeoutId) clearTimeout(listenTimeoutId);\n          reject(e);\n        },\n        complete: () => {\n          if (listenTimeoutId) clearTimeout(listenTimeoutId);\n          if (!found) {\n            reject(\n              new TransportError(\n                this.ErrorMessage_NoDeviceFound,\n                \"NoDeviceFound\"\n              )\n            );\n          }\n        },\n      });\n      const listenTimeoutId = listenTimeout\n        ? setTimeout(() => {\n            sub.unsubscribe();\n            reject(\n              new TransportError(\n                this.ErrorMessage_ListenTimeout,\n                \"ListenTimeout\"\n              )\n            );\n          }, listenTimeout)\n        : null;\n    });\n  }\n\n  exchangeBusyPromise: ?Promise<void>;\n\n  // $FlowFixMe\n  exchangeAtomicImpl = async (f) => {\n    if (this.exchangeBusyPromise) {\n      throw new TransportRaceCondition(\n        \"An action was already pending on the Ledger device. Please deny or reconnect.\"\n      );\n    }\n    let resolveBusy;\n    const busyPromise = new Promise((r) => {\n      resolveBusy = r;\n    });\n    this.exchangeBusyPromise = busyPromise;\n    let unresponsiveReached = false;\n    const timeout = setTimeout(() => {\n      unresponsiveReached = true;\n      this.emit(\"unresponsive\");\n    }, this.unresponsiveTimeout);\n    try {\n      const res = await f();\n      if (unresponsiveReached) {\n        this.emit(\"responsive\");\n      }\n      return res;\n    } finally {\n      clearTimeout(timeout);\n      if (resolveBusy) resolveBusy();\n      this.exchangeBusyPromise = null;\n    }\n  };\n\n  decorateAppAPIMethods(\n    self: Object,\n    methods: Array<string>,\n    scrambleKey: string\n  ) {\n    for (let methodName of methods) {\n      self[methodName] = this.decorateAppAPIMethod(\n        methodName,\n        self[methodName],\n        self,\n        scrambleKey\n      );\n    }\n  }\n\n  _appAPIlock = null;\n  decorateAppAPIMethod<R, A: any[]>(\n    methodName: string,\n    f: (...args: A) => Promise<R>,\n    ctx: *,\n    scrambleKey: string\n  ): (...args: A) => Promise<R> {\n    return async (...args) => {\n      const { _appAPIlock } = this;\n      if (_appAPIlock) {\n        return Promise.reject(\n          new TransportError(\n            \"Ledger Device is busy (lock \" + _appAPIlock + \")\",\n            \"TransportLocked\"\n          )\n        );\n      }\n      try {\n        this._appAPIlock = methodName;\n        this.setScrambleKey(scrambleKey);\n        return await f.apply(ctx, args);\n      } finally {\n        this._appAPIlock = null;\n      }\n    };\n  }\n\n  static ErrorMessage_ListenTimeout = \"No Ledger device found (timeout)\";\n  static ErrorMessage_NoDeviceFound = \"No Ledger device found\";\n}\n"],"file":"Transport.js"}