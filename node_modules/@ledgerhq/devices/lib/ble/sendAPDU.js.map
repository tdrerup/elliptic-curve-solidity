{"version":3,"sources":["../../src/ble/sendAPDU.js"],"names":["TagId","chunkBuffer","buffer","sizeForIndex","chunks","i","size","length","push","slice","sendAPDU","write","apdu","mtuSize","map","head","Buffer","alloc","writeUInt8","writeUInt16BE","concat","Observable","create","o","terminated","main","chunk","then","complete","e","String","error","unsubscribe"],"mappings":";;;;;;;AAEA;;AACA;;AAEA,MAAMA,KAAK,GAAG,IAAd;;AAEA,SAASC,WAAT,CACEC,MADF,EAEEC,YAFF,EAGiB;AACf,QAAMC,MAAM,GAAG,EAAf;;AACA,OACE,IAAIC,CAAC,GAAG,CAAR,EAAWC,IAAI,GAAGH,YAAY,CAAC,CAAD,CADhC,EAEEE,CAAC,GAAGH,MAAM,CAACK,MAFb,EAGEF,CAAC,IAAIC,IAAL,EAAWA,IAAI,GAAGH,YAAY,CAACE,CAAD,CAHhC,EAIE;AACAD,IAAAA,MAAM,CAACI,IAAP,CAAYN,MAAM,CAACO,KAAP,CAAaJ,CAAb,EAAgBA,CAAC,GAAGC,IAApB,CAAZ;AACD;;AACD,SAAOF,MAAP;AACD;;AAEM,MAAMM,QAAQ,GAAG,CACtBC,KADsB,EAEtBC,IAFsB,EAGtBC,OAHsB,KAID;AACrB,QAAMT,MAAM,GAAGH,WAAW,CAACW,IAAD,EAAQP,CAAD,IAAOQ,OAAO,IAAIR,CAAC,KAAK,CAAN,GAAU,CAAV,GAAc,CAAlB,CAArB,CAAX,CAAsDS,GAAtD,CACb,CAACZ,MAAD,EAASG,CAAT,KAAe;AACb,UAAMU,IAAI,GAAGC,MAAM,CAACC,KAAP,CAAaZ,CAAC,KAAK,CAAN,GAAU,CAAV,GAAc,CAA3B,CAAb;AACAU,IAAAA,IAAI,CAACG,UAAL,CAAgBlB,KAAhB,EAAuB,CAAvB;AACAe,IAAAA,IAAI,CAACI,aAAL,CAAmBd,CAAnB,EAAsB,CAAtB;;AACA,QAAIA,CAAC,KAAK,CAAV,EAAa;AACXU,MAAAA,IAAI,CAACI,aAAL,CAAmBP,IAAI,CAACL,MAAxB,EAAgC,CAAhC;AACD;;AACD,WAAOS,MAAM,CAACI,MAAP,CAAc,CAACL,IAAD,EAAOb,MAAP,CAAd,CAAP;AACD,GATY,CAAf;AAYA,SAAOmB,iBAAWC,MAAX,CAAmBC,CAAD,IAAO;AAC9B,QAAIC,UAAU,GAAG,KAAjB;;AAEA,mBAAeC,IAAf,GAAsB;AACpB,WAAK,MAAMC,KAAX,IAAoBtB,MAApB,EAA4B;AAC1B,YAAIoB,UAAJ,EAAgB;AAChB,cAAMb,KAAK,CAACe,KAAD,CAAX;AACD;AACF;;AAEDD,IAAAA,IAAI,GAAGE,IAAP,CACE,MAAM;AACJH,MAAAA,UAAU,GAAG,IAAb;AACAD,MAAAA,CAAC,CAACK,QAAF;AACD,KAJH,EAKGC,CAAD,IAAO;AACLL,MAAAA,UAAU,GAAG,IAAb;AACA,qBAAI,WAAJ,EAAiB,sBAAsBM,MAAM,CAACD,CAAD,CAA7C;AACAN,MAAAA,CAAC,CAACQ,KAAF,CAAQF,CAAR;AACD,KATH;;AAYA,UAAMG,WAAW,GAAG,MAAM;AACxB,UAAI,CAACR,UAAL,EAAiB;AACf,uBAAI,aAAJ,EAAmB,uBAAnB;AACAA,QAAAA,UAAU,GAAG,IAAb;AACD;AACF,KALD;;AAOA,WAAOQ,WAAP;AACD,GA9BM,CAAP;AA+BD,CAhDM","sourcesContent":["// @flow\n\nimport { Observable } from \"rxjs\";\nimport { log } from \"@ledgerhq/logs\";\n\nconst TagId = 0x05;\n\nfunction chunkBuffer(\n  buffer: Buffer,\n  sizeForIndex: (number) => number\n): Array<Buffer> {\n  const chunks = [];\n  for (\n    let i = 0, size = sizeForIndex(0);\n    i < buffer.length;\n    i += size, size = sizeForIndex(i)\n  ) {\n    chunks.push(buffer.slice(i, i + size));\n  }\n  return chunks;\n}\n\nexport const sendAPDU = (\n  write: (Buffer) => Promise<void>,\n  apdu: Buffer,\n  mtuSize: number\n): Observable<void> => {\n  const chunks = chunkBuffer(apdu, (i) => mtuSize - (i === 0 ? 5 : 3)).map(\n    (buffer, i) => {\n      const head = Buffer.alloc(i === 0 ? 5 : 3);\n      head.writeUInt8(TagId, 0);\n      head.writeUInt16BE(i, 1);\n      if (i === 0) {\n        head.writeUInt16BE(apdu.length, 3);\n      }\n      return Buffer.concat([head, buffer]);\n    }\n  );\n\n  return Observable.create((o) => {\n    let terminated = false;\n\n    async function main() {\n      for (const chunk of chunks) {\n        if (terminated) return;\n        await write(chunk);\n      }\n    }\n\n    main().then(\n      () => {\n        terminated = true;\n        o.complete();\n      },\n      (e) => {\n        terminated = true;\n        log(\"ble-error\", \"sendAPDU failure \" + String(e));\n        o.error(e);\n      }\n    );\n\n    const unsubscribe = () => {\n      if (!terminated) {\n        log(\"ble-verbose\", \"sendAPDU interruption\");\n        terminated = true;\n      }\n    };\n\n    return unsubscribe;\n  });\n};\n"],"file":"sendAPDU.js"}