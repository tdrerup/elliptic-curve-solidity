{"version":3,"sources":["../src/hid-framing.js"],"names":["Tag","asUInt16BE","value","b","Buffer","alloc","writeUInt16BE","initialAcc","data","dataLength","sequence","createHIDframing","channel","packetSize","makeBlocks","apdu","concat","length","blockSize","nbBlocks","Math","ceil","fill","blocks","i","head","writeUInt8","chunk","slice","push","reduceResponse","acc","readUInt16BE","TransportError","readUInt8","chunkData","getReducedResult"],"mappings":";;;;;;;AAEA;;AAQA,MAAMA,GAAG,GAAG,IAAZ;;AAEA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AACzB,QAAMC,CAAC,GAAGC,MAAM,CAACC,KAAP,CAAa,CAAb,CAAV;AACAF,EAAAA,CAAC,CAACG,aAAF,CAAgBJ,KAAhB,EAAuB,CAAvB;AACA,SAAOC,CAAP;AACD;;AAED,MAAMI,UAAU,GAAG;AACjBC,EAAAA,IAAI,EAAEJ,MAAM,CAACC,KAAP,CAAa,CAAb,CADW;AAEjBI,EAAAA,UAAU,EAAE,CAFK;AAGjBC,EAAAA,QAAQ,EAAE;AAHO,CAAnB;AAMA;AACA;AACA;;AACA,MAAMC,gBAAgB,GAAG,CAACC,OAAD,EAAkBC,UAAlB,KAAyC;AAChE,SAAO;AACLC,IAAAA,UAAU,CAACC,IAAD,EAAyB;AACjC,UAAIP,IAAI,GAAGJ,MAAM,CAACY,MAAP,CAAc,CAACf,UAAU,CAACc,IAAI,CAACE,MAAN,CAAX,EAA0BF,IAA1B,CAAd,CAAX;AACA,YAAMG,SAAS,GAAGL,UAAU,GAAG,CAA/B;AACA,YAAMM,QAAQ,GAAGC,IAAI,CAACC,IAAL,CAAUb,IAAI,CAACS,MAAL,GAAcC,SAAxB,CAAjB;AACAV,MAAAA,IAAI,GAAGJ,MAAM,CAACY,MAAP,CAAc,CACnBR,IADmB,EACb;AACNJ,MAAAA,MAAM,CAACC,KAAP,CAAac,QAAQ,GAAGD,SAAX,GAAuBV,IAAI,CAACS,MAA5B,GAAqC,CAAlD,EAAqDK,IAArD,CAA0D,CAA1D,CAFmB,CAAd,CAAP;AAKA,YAAMC,MAAM,GAAG,EAAf;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,QAApB,EAA8BK,CAAC,EAA/B,EAAmC;AACjC,cAAMC,IAAI,GAAGrB,MAAM,CAACC,KAAP,CAAa,CAAb,CAAb;AACAoB,QAAAA,IAAI,CAACnB,aAAL,CAAmBM,OAAnB,EAA4B,CAA5B;AACAa,QAAAA,IAAI,CAACC,UAAL,CAAgB1B,GAAhB,EAAqB,CAArB;AACAyB,QAAAA,IAAI,CAACnB,aAAL,CAAmBkB,CAAnB,EAAsB,CAAtB;AACA,cAAMG,KAAK,GAAGnB,IAAI,CAACoB,KAAL,CAAWJ,CAAC,GAAGN,SAAf,EAA0B,CAACM,CAAC,GAAG,CAAL,IAAUN,SAApC,CAAd;AACAK,QAAAA,MAAM,CAACM,IAAP,CAAYzB,MAAM,CAACY,MAAP,CAAc,CAACS,IAAD,EAAOE,KAAP,CAAd,CAAZ;AACD;;AACD,aAAOJ,MAAP;AACD,KApBI;;AAsBLO,IAAAA,cAAc,CAACC,GAAD,EAAmBJ,KAAnB,EAA+C;AAC3D,UAAI;AAAEnB,QAAAA,IAAF;AAAQC,QAAAA,UAAR;AAAoBC,QAAAA;AAApB,UAAiCqB,GAAG,IAAIxB,UAA5C;;AAEA,UAAIoB,KAAK,CAACK,YAAN,CAAmB,CAAnB,MAA0BpB,OAA9B,EAAuC;AACrC,cAAM,IAAIqB,sBAAJ,CAAmB,iBAAnB,EAAsC,gBAAtC,CAAN;AACD;;AACD,UAAIN,KAAK,CAACO,SAAN,CAAgB,CAAhB,MAAuBlC,GAA3B,EAAgC;AAC9B,cAAM,IAAIiC,sBAAJ,CAAmB,aAAnB,EAAkC,YAAlC,CAAN;AACD;;AACD,UAAIN,KAAK,CAACK,YAAN,CAAmB,CAAnB,MAA0BtB,QAA9B,EAAwC;AACtC,cAAM,IAAIuB,sBAAJ,CAAmB,kBAAnB,EAAuC,iBAAvC,CAAN;AACD;;AAED,UAAI,CAACF,GAAL,EAAU;AACRtB,QAAAA,UAAU,GAAGkB,KAAK,CAACK,YAAN,CAAmB,CAAnB,CAAb;AACD;;AACDtB,MAAAA,QAAQ;AACR,YAAMyB,SAAS,GAAGR,KAAK,CAACC,KAAN,CAAYG,GAAG,GAAG,CAAH,GAAO,CAAtB,CAAlB;AACAvB,MAAAA,IAAI,GAAGJ,MAAM,CAACY,MAAP,CAAc,CAACR,IAAD,EAAO2B,SAAP,CAAd,CAAP;;AACA,UAAI3B,IAAI,CAACS,MAAL,GAAcR,UAAlB,EAA8B;AAC5BD,QAAAA,IAAI,GAAGA,IAAI,CAACoB,KAAL,CAAW,CAAX,EAAcnB,UAAd,CAAP;AACD;;AAED,aAAO;AACLD,QAAAA,IADK;AAELC,QAAAA,UAFK;AAGLC,QAAAA;AAHK,OAAP;AAKD,KAlDI;;AAoDL0B,IAAAA,gBAAgB,CAACL,GAAD,EAA4B;AAC1C,UAAIA,GAAG,IAAIA,GAAG,CAACtB,UAAJ,KAAmBsB,GAAG,CAACvB,IAAJ,CAASS,MAAvC,EAA+C;AAC7C,eAAOc,GAAG,CAACvB,IAAX;AACD;AACF;;AAxDI,GAAP;AA0DD,CA3DD;;eA6DeG,gB","sourcesContent":["// @flow\n\nimport { TransportError } from \"@ledgerhq/errors\";\n\nexport type ResponseAcc = ?{\n  data: Buffer,\n  dataLength: number,\n  sequence: number,\n};\n\nconst Tag = 0x05;\n\nfunction asUInt16BE(value) {\n  const b = Buffer.alloc(2);\n  b.writeUInt16BE(value, 0);\n  return b;\n}\n\nconst initialAcc = {\n  data: Buffer.alloc(0),\n  dataLength: 0,\n  sequence: 0,\n};\n\n/**\n *\n */\nconst createHIDframing = (channel: number, packetSize: number) => {\n  return {\n    makeBlocks(apdu: Buffer): Buffer[] {\n      let data = Buffer.concat([asUInt16BE(apdu.length), apdu]);\n      const blockSize = packetSize - 5;\n      const nbBlocks = Math.ceil(data.length / blockSize);\n      data = Buffer.concat([\n        data, // fill data with padding\n        Buffer.alloc(nbBlocks * blockSize - data.length + 1).fill(0),\n      ]);\n\n      const blocks = [];\n      for (let i = 0; i < nbBlocks; i++) {\n        const head = Buffer.alloc(5);\n        head.writeUInt16BE(channel, 0);\n        head.writeUInt8(Tag, 2);\n        head.writeUInt16BE(i, 3);\n        const chunk = data.slice(i * blockSize, (i + 1) * blockSize);\n        blocks.push(Buffer.concat([head, chunk]));\n      }\n      return blocks;\n    },\n\n    reduceResponse(acc: ResponseAcc, chunk: Buffer): ResponseAcc {\n      let { data, dataLength, sequence } = acc || initialAcc;\n\n      if (chunk.readUInt16BE(0) !== channel) {\n        throw new TransportError(\"Invalid channel\", \"InvalidChannel\");\n      }\n      if (chunk.readUInt8(2) !== Tag) {\n        throw new TransportError(\"Invalid tag\", \"InvalidTag\");\n      }\n      if (chunk.readUInt16BE(3) !== sequence) {\n        throw new TransportError(\"Invalid sequence\", \"InvalidSequence\");\n      }\n\n      if (!acc) {\n        dataLength = chunk.readUInt16BE(5);\n      }\n      sequence++;\n      const chunkData = chunk.slice(acc ? 5 : 7);\n      data = Buffer.concat([data, chunkData]);\n      if (data.length > dataLength) {\n        data = data.slice(0, dataLength);\n      }\n\n      return {\n        data,\n        dataLength,\n        sequence,\n      };\n    },\n\n    getReducedResult(acc: ResponseAcc): ?Buffer {\n      if (acc && acc.dataLength === acc.data.length) {\n        return acc.data;\n      }\n    },\n  };\n};\n\nexport default createHIDframing;\n"],"file":"hid-framing.js"}