{"version":3,"sources":["../src/index.js"],"names":["IIGenericHID","IIKeyboardHID","IIU2F","IICCID","IIWebUSB","devices","blue","id","productName","productIdMM","legacyUsbProductId","usbOnly","memorySize","blockSize","getBlockSize","_firwareVersion","nanoS","firmwareVersion","semver","lt","coerce","nanoX","bluetoothSpec","serviceUuid","notifyUuid","writeUuid","productMap","Blue","devicesList","Object","values","ledgerUSBVendorId","getDeviceModel","info","Error","identifyUSBProductId","usbProductId","legacy","find","d","mm","deviceModel","identifyProductName","productId","bluetoothServices","serviceUuidToInfos","i","length","spec","push","replace","getBluetoothServiceUuids","getInfosForServiceUuid","uuid","toLowerCase"],"mappings":"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","sourcesContent":["// @flow\n\nimport semver from \"semver\";\n\n/**\n * The USB product IDs will be defined as MMII, encoding a model (MM) and an interface bitfield (II)\n *\n ** Model\n * Ledger Nano S : 0x10\n * Ledger Blue : 0x00\n * Ledger Nano X : 0x40\n *\n ** Interface support bitfield\n * Generic HID : 0x01\n * Keyboard HID : 0x02\n * U2F : 0x04\n * CCID : 0x08\n * WebUSB : 0x10\n */\n\nexport const IIGenericHID = 0x01;\nexport const IIKeyboardHID = 0x02;\nexport const IIU2F = 0x04;\nexport const IICCID = 0x08;\nexport const IIWebUSB = 0x10;\n\nconst devices = {\n  blue: {\n    id: \"blue\",\n    productName: \"Ledger Blue\",\n    productIdMM: 0x00,\n    legacyUsbProductId: 0x0000,\n    usbOnly: true,\n    memorySize: 480 * 1024,\n    blockSize: 4 * 1024,\n    getBlockSize: (_firwareVersion: string): number => 4 * 1024,\n  },\n  nanoS: {\n    id: \"nanoS\",\n    productName: \"Ledger Nano S\",\n    productIdMM: 0x10,\n    legacyUsbProductId: 0x0001,\n    usbOnly: true,\n    memorySize: 320 * 1024,\n    blockSize: 4 * 1024,\n    getBlockSize: (firmwareVersion: string): number =>\n      semver.lt(semver.coerce(firmwareVersion), \"2.0.0\") ? 4 * 1024 : 2 * 1024,\n  },\n  nanoX: {\n    id: \"nanoX\",\n    productName: \"Ledger Nano X\",\n    productIdMM: 0x40,\n    legacyUsbProductId: 0x0004,\n    usbOnly: false,\n    memorySize: 2 * 1024 * 1024,\n    blockSize: 4 * 1024,\n    getBlockSize: (_firwareVersion: string): number => 4 * 1024,\n    bluetoothSpec: [\n      {\n        // this is the legacy one (prototype version). we will eventually drop it.\n        serviceUuid: \"d973f2e0-b19e-11e2-9e96-0800200c9a66\",\n        notifyUuid: \"d973f2e1-b19e-11e2-9e96-0800200c9a66\",\n        writeUuid: \"d973f2e2-b19e-11e2-9e96-0800200c9a66\",\n      },\n      {\n        serviceUuid: \"13d63400-2c97-0004-0000-4c6564676572\",\n        notifyUuid: \"13d63400-2c97-0004-0001-4c6564676572\",\n        writeUuid: \"13d63400-2c97-0004-0002-4c6564676572\",\n      },\n    ],\n  },\n};\n\nconst productMap = {\n  Blue: \"blue\",\n  \"Nano S\": \"nanoS\",\n  \"Nano X\": \"nanoX\",\n};\n\n// $FlowFixMe\nconst devicesList: DeviceModel[] = Object.values(devices);\n\n/**\n *\n */\nexport const ledgerUSBVendorId = 0x2c97;\n\n/**\n *\n */\nexport const getDeviceModel = (id: DeviceModelId): DeviceModel => {\n  const info = devices[id];\n  if (!info) throw new Error(\"device '\" + id + \"' does not exist\");\n  return info;\n};\n\n/**\n *\n */\nexport const identifyUSBProductId = (usbProductId: number): ?DeviceModel => {\n  const legacy = devicesList.find((d) => d.legacyUsbProductId === usbProductId);\n  if (legacy) return legacy;\n\n  const mm = usbProductId >> 8;\n  const deviceModel = devicesList.find((d) => d.productIdMM === mm);\n  return deviceModel;\n};\n\nexport const identifyProductName = (productName: string): ?DeviceModel => {\n  const productId = productMap[productName];\n  const deviceModel = devicesList.find((d) => d.id === productId);\n\n  return deviceModel;\n};\n\nconst bluetoothServices: string[] = [];\nconst serviceUuidToInfos: {\n  [_: string]: BluetoothInfos,\n} = {};\n\nfor (let id in devices) {\n  const deviceModel = devices[id];\n  const { bluetoothSpec } = deviceModel;\n  if (bluetoothSpec) {\n    for (let i = 0; i < bluetoothSpec.length; i++) {\n      const spec = bluetoothSpec[i];\n      bluetoothServices.push(spec.serviceUuid);\n      serviceUuidToInfos[spec.serviceUuid] = serviceUuidToInfos[\n        spec.serviceUuid.replace(/-/g, \"\")\n      ] = { deviceModel, ...spec };\n    }\n  }\n}\n\n/**\n *\n */\nexport const getBluetoothServiceUuids = () => bluetoothServices;\n\n/**\n *\n */\nexport const getInfosForServiceUuid = (uuid: string): ?BluetoothInfos =>\n  serviceUuidToInfos[uuid.toLowerCase()];\n\n/**\n *\n */\nexport type DeviceModelId = $Keys<typeof devices>;\n\n/**\n *\n */\nexport type DeviceModel = {\n  id: DeviceModelId,\n  productName: string,\n  productIdMM: number,\n  legacyUsbProductId: number,\n  usbOnly: boolean,\n  memorySize: number,\n  // blockSize: number, // THIS FIELD IS DEPRECATED, use getBlockSize\n  getBlockSize: (firmwareVersion: string) => number,\n  bluetoothSpec?: Array<{\n    serviceUuid: string,\n    writeUuid: string,\n    notifyUuid: string,\n  }>,\n};\n\n/**\n *\n */\nexport type BluetoothInfos = {\n  deviceModel: DeviceModel,\n  serviceUuid: string,\n  writeUuid: string,\n  notifyUuid: string,\n};\n"],"file":"index.js"}