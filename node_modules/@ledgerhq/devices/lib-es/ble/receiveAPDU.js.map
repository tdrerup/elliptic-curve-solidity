{"version":3,"sources":["../../src/ble/receiveAPDU.js"],"names":["TransportError","DisconnectedDevice","Observable","log","TagId","receiveAPDU","rawStream","create","o","notifiedIndex","notifiedDataLength","notifiedData","Buffer","alloc","sub","subscribe","complete","error","unsubscribe","e","String","next","value","tag","readUInt8","index","readUInt16BE","data","slice","toString","concat","length"],"mappings":"AAEA,SAASA,cAAT,EAAyBC,kBAAzB,QAAmD,kBAAnD;AACA,SAASC,UAAT,QAA2B,MAA3B;AACA,SAASC,GAAT,QAAoB,gBAApB;AAEA,MAAMC,KAAK,GAAG,IAAd,C,CAEA;;AACA,OAAO,MAAMC,WAAW,GACtBC,SADyB,IAGzBJ,UAAU,CAACK,MAAX,CAAmBC,CAAD,IAAO;AACvB,MAAIC,aAAa,GAAG,CAApB;AACA,MAAIC,kBAAkB,GAAG,CAAzB;AACA,MAAIC,YAAY,GAAGC,MAAM,CAACC,KAAP,CAAa,CAAb,CAAnB;AAEA,QAAMC,GAAG,GAAGR,SAAS,CAACS,SAAV,CAAoB;AAC9BC,IAAAA,QAAQ,EAAE,MAAM;AACdR,MAAAA,CAAC,CAACS,KAAF,CAAQ,IAAIhB,kBAAJ,EAAR;AACAa,MAAAA,GAAG,CAACI,WAAJ;AACD,KAJ6B;AAK9BD,IAAAA,KAAK,EAAGE,CAAD,IAAO;AACZhB,MAAAA,GAAG,CAAC,WAAD,EAAc,oBAAoBiB,MAAM,CAACD,CAAD,CAAxC,CAAH;AACAX,MAAAA,CAAC,CAACS,KAAF,CAAQE,CAAR;AACAL,MAAAA,GAAG,CAACI,WAAJ;AACD,KAT6B;AAU9BG,IAAAA,IAAI,EAAGC,KAAD,IAAW;AACf,YAAMC,GAAG,GAAGD,KAAK,CAACE,SAAN,CAAgB,CAAhB,CAAZ;AACA,YAAMC,KAAK,GAAGH,KAAK,CAACI,YAAN,CAAmB,CAAnB,CAAd;AACA,UAAIC,IAAI,GAAGL,KAAK,CAACM,KAAN,CAAY,CAAZ,CAAX;;AAEA,UAAIL,GAAG,KAAKnB,KAAZ,EAAmB;AACjBI,QAAAA,CAAC,CAACS,KAAF,CACE,IAAIjB,cAAJ,CAAmB,iBAAiBuB,GAAG,CAACM,QAAJ,CAAa,EAAb,CAApC,EAAsD,YAAtD,CADF;AAGA;AACD;;AAED,UAAIpB,aAAa,KAAKgB,KAAtB,EAA6B;AAC3BjB,QAAAA,CAAC,CAACS,KAAF,CACE,IAAIjB,cAAJ,CACE,gEACEyB,KADF,GAEE,gBAFF,GAGEhB,aAJJ,EAKE,iBALF,CADF;AASA;AACD;;AAED,UAAIgB,KAAK,KAAK,CAAd,EAAiB;AACff,QAAAA,kBAAkB,GAAGiB,IAAI,CAACD,YAAL,CAAkB,CAAlB,CAArB;AACAC,QAAAA,IAAI,GAAGA,IAAI,CAACC,KAAL,CAAW,CAAX,CAAP;AACD;;AACDnB,MAAAA,aAAa;AACbE,MAAAA,YAAY,GAAGC,MAAM,CAACkB,MAAP,CAAc,CAACnB,YAAD,EAAegB,IAAf,CAAd,CAAf;;AACA,UAAIhB,YAAY,CAACoB,MAAb,GAAsBrB,kBAA1B,EAA8C;AAC5CF,QAAAA,CAAC,CAACS,KAAF,CACE,IAAIjB,cAAJ,CACE,+DACEW,YAAY,CAACoB,MADf,GAEE,gBAFF,GAGErB,kBAJJ,EAKE,gBALF,CADF;AASA;AACD;;AACD,UAAIC,YAAY,CAACoB,MAAb,KAAwBrB,kBAA5B,EAAgD;AAC9CF,QAAAA,CAAC,CAACa,IAAF,CAAOV,YAAP;AACAH,QAAAA,CAAC,CAACQ,QAAF;AACAF,QAAAA,GAAG,CAACI,WAAJ;AACD;AACF;AA1D6B,GAApB,CAAZ;AA6DA,SAAO,MAAM;AACXJ,IAAAA,GAAG,CAACI,WAAJ;AACD,GAFD;AAGD,CArED,CAHK","sourcesContent":["// @flow\n\nimport { TransportError, DisconnectedDevice } from \"@ledgerhq/errors\";\nimport { Observable } from \"rxjs\";\nimport { log } from \"@ledgerhq/logs\";\n\nconst TagId = 0x05;\n\n// operator that transform the input raw stream into one apdu response and finishes\nexport const receiveAPDU = (\n  rawStream: Observable<Buffer>\n): Observable<Buffer> =>\n  Observable.create((o) => {\n    let notifiedIndex = 0;\n    let notifiedDataLength = 0;\n    let notifiedData = Buffer.alloc(0);\n\n    const sub = rawStream.subscribe({\n      complete: () => {\n        o.error(new DisconnectedDevice());\n        sub.unsubscribe();\n      },\n      error: (e) => {\n        log(\"ble-error\", \"in receiveAPDU \" + String(e));\n        o.error(e);\n        sub.unsubscribe();\n      },\n      next: (value) => {\n        const tag = value.readUInt8(0);\n        const index = value.readUInt16BE(1);\n        let data = value.slice(3);\n\n        if (tag !== TagId) {\n          o.error(\n            new TransportError(\"Invalid tag \" + tag.toString(16), \"InvalidTag\")\n          );\n          return;\n        }\n\n        if (notifiedIndex !== index) {\n          o.error(\n            new TransportError(\n              \"BLE: Invalid sequence number. discontinued chunk. Received \" +\n                index +\n                \" but expected \" +\n                notifiedIndex,\n              \"InvalidSequence\"\n            )\n          );\n          return;\n        }\n\n        if (index === 0) {\n          notifiedDataLength = data.readUInt16BE(0);\n          data = data.slice(2);\n        }\n        notifiedIndex++;\n        notifiedData = Buffer.concat([notifiedData, data]);\n        if (notifiedData.length > notifiedDataLength) {\n          o.error(\n            new TransportError(\n              \"BLE: received too much data. discontinued chunk. Received \" +\n                notifiedData.length +\n                \" but expected \" +\n                notifiedDataLength,\n              \"BLETooMuchData\"\n            )\n          );\n          return;\n        }\n        if (notifiedData.length === notifiedDataLength) {\n          o.next(notifiedData);\n          o.complete();\n          sub.unsubscribe();\n        }\n      },\n    });\n\n    return () => {\n      sub.unsubscribe();\n    };\n  });\n"],"file":"receiveAPDU.js"}