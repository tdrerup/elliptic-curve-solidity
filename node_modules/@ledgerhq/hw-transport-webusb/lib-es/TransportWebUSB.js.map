{"version":3,"sources":["../src/TransportWebUSB.js"],"names":["Transport","hidFraming","identifyUSBProductId","log","TransportOpenUserCancelled","TransportInterfaceNotAvailable","TransportWebUSBGestureRequired","DisconnectedDeviceDuringOperation","DisconnectedDevice","getLedgerDevices","getFirstLedgerDevice","requestLedgerDevice","isSupported","configurationValue","endpointNumber","TransportWebUSB","constructor","device","interfaceNumber","deviceModel","channel","Math","floor","random","packetSize","_disconnectEmitted","_emitDisconnect","e","emit","exchange","apdu","exchangeAtomicImpl","toString","framing","blocks","makeBlocks","i","length","transferOut","result","acc","getReducedResult","r","transferIn","buffer","Buffer","from","data","reduceResponse","catch","message","includes","productId","request","open","openConnected","devices","configuration","selectConfiguration","gracefullyResetDevice","iface","configurations","interfaces","find","alternates","some","a","interfaceClass","claimInterface","close","transport","onDisconnect","navigator","usb","removeEventListener","addEventListener","exchangeBusyPromise","releaseInterface","setScrambleKey","list","listen","observer","unsubscribed","then","next","type","descriptor","complete","error","window","DOMException","code","unsubscribe","reset","err","console","warn"],"mappings":"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","sourcesContent":["//@flow\nimport Transport from \"@ledgerhq/hw-transport\";\nimport type {\n  Observer,\n  DescriptorEvent,\n  Subscription,\n} from \"@ledgerhq/hw-transport\";\nimport hidFraming from \"@ledgerhq/devices/lib/hid-framing\";\nimport { identifyUSBProductId } from \"@ledgerhq/devices\";\nimport type { DeviceModel } from \"@ledgerhq/devices\";\nimport { log } from \"@ledgerhq/logs\";\nimport {\n  TransportOpenUserCancelled,\n  TransportInterfaceNotAvailable,\n  TransportWebUSBGestureRequired,\n  DisconnectedDeviceDuringOperation,\n  DisconnectedDevice,\n} from \"@ledgerhq/errors\";\nimport {\n  getLedgerDevices,\n  getFirstLedgerDevice,\n  requestLedgerDevice,\n  isSupported,\n} from \"./webusb\";\n\nconst configurationValue = 1;\nconst endpointNumber = 3;\n\n/**\n * WebUSB Transport implementation\n * @example\n * import TransportWebUSB from \"@ledgerhq/hw-transport-webusb\";\n * ...\n * TransportWebUSB.create().then(transport => ...)\n */\nexport default class TransportWebUSB extends Transport<USBDevice> {\n  device: USBDevice;\n  deviceModel: ?DeviceModel;\n  channel = Math.floor(Math.random() * 0xffff);\n  packetSize = 64;\n  interfaceNumber: number;\n\n  constructor(device: USBDevice, interfaceNumber: number) {\n    super();\n    this.device = device;\n    this.interfaceNumber = interfaceNumber;\n    this.deviceModel = identifyUSBProductId(device.productId);\n  }\n\n  /**\n   * Check if WebUSB transport is supported.\n   */\n  static isSupported = isSupported;\n\n  /**\n   * List the WebUSB devices that was previously authorized by the user.\n   */\n  static list = getLedgerDevices;\n\n  /**\n   * Actively listen to WebUSB devices and emit ONE device\n   * that was either accepted before, if not it will trigger the native permission UI.\n   *\n   * Important: it must be called in the context of a UI click!\n   */\n  static listen = (\n    observer: Observer<DescriptorEvent<USBDevice>>\n  ): Subscription => {\n    let unsubscribed = false;\n    getFirstLedgerDevice().then(\n      (device) => {\n        if (!unsubscribed) {\n          const deviceModel = identifyUSBProductId(device.productId);\n          observer.next({ type: \"add\", descriptor: device, deviceModel });\n          observer.complete();\n        }\n      },\n      (error) => {\n        if (\n          window.DOMException &&\n          error instanceof window.DOMException &&\n          error.code === 18\n        ) {\n          observer.error(new TransportWebUSBGestureRequired(error.message));\n        } else {\n          observer.error(new TransportOpenUserCancelled(error.message));\n        }\n      }\n    );\n    function unsubscribe() {\n      unsubscribed = true;\n    }\n    return { unsubscribe };\n  };\n\n  /**\n   * Similar to create() except it will always display the device permission (even if some devices are already accepted).\n   */\n  static async request() {\n    const device = await requestLedgerDevice();\n    return TransportWebUSB.open(device);\n  }\n\n  /**\n   * Similar to create() except it will never display the device permission (it returns a Promise<?Transport>, null if it fails to find a device).\n   */\n  static async openConnected() {\n    const devices = await getLedgerDevices();\n    if (devices.length === 0) return null;\n    return TransportWebUSB.open(devices[0]);\n  }\n\n  /**\n   * Create a Ledger transport with a USBDevice\n   */\n  static async open(device: USBDevice) {\n    await device.open();\n    if (device.configuration === null) {\n      await device.selectConfiguration(configurationValue);\n    }\n    await gracefullyResetDevice(device);\n    const iface = device.configurations[0].interfaces.find(({ alternates }) =>\n      alternates.some((a) => a.interfaceClass === 255)\n    );\n    if (!iface) {\n      throw new TransportInterfaceNotAvailable(\n        \"No WebUSB interface found for your Ledger device. Please upgrade firmware or contact techsupport.\"\n      );\n    }\n    const interfaceNumber = iface.interfaceNumber;\n    try {\n      await device.claimInterface(interfaceNumber);\n    } catch (e) {\n      await device.close();\n      throw new TransportInterfaceNotAvailable(e.message);\n    }\n    const transport = new TransportWebUSB(device, interfaceNumber);\n    const onDisconnect = (e) => {\n      if (device === e.device) {\n        // $FlowFixMe\n        navigator.usb.removeEventListener(\"disconnect\", onDisconnect);\n        transport._emitDisconnect(new DisconnectedDevice());\n      }\n    };\n    // $FlowFixMe\n    navigator.usb.addEventListener(\"disconnect\", onDisconnect);\n    return transport;\n  }\n\n  _disconnectEmitted = false;\n  _emitDisconnect = (e: Error) => {\n    if (this._disconnectEmitted) return;\n    this._disconnectEmitted = true;\n    this.emit(\"disconnect\", e);\n  };\n\n  /**\n   * Release the transport device\n   */\n  async close(): Promise<void> {\n    await this.exchangeBusyPromise;\n    await this.device.releaseInterface(this.interfaceNumber);\n    await gracefullyResetDevice(this.device);\n    await this.device.close();\n  }\n\n  /**\n   * Exchange with the device using APDU protocol.\n   * @param apdu\n   * @returns a promise of apdu response\n   */\n  exchange = (apdu: Buffer): Promise<Buffer> =>\n    this.exchangeAtomicImpl(async () => {\n      const { channel, packetSize } = this;\n      log(\"apdu\", \"=> \" + apdu.toString(\"hex\"));\n\n      const framing = hidFraming(channel, packetSize);\n\n      // Write...\n      const blocks = framing.makeBlocks(apdu);\n      for (let i = 0; i < blocks.length; i++) {\n        await this.device.transferOut(endpointNumber, blocks[i]);\n      }\n\n      // Read...\n      let result;\n      let acc;\n      while (!(result = framing.getReducedResult(acc))) {\n        const r = await this.device.transferIn(endpointNumber, packetSize);\n        const buffer = Buffer.from(r.data.buffer);\n        acc = framing.reduceResponse(acc, buffer);\n      }\n\n      log(\"apdu\", \"<= \" + result.toString(\"hex\"));\n      return result;\n    }).catch((e) => {\n      if (e && e.message && e.message.includes(\"disconnected\")) {\n        this._emitDisconnect(e);\n        throw new DisconnectedDeviceDuringOperation(e.message);\n      }\n      throw e;\n    });\n\n  setScrambleKey() {}\n}\n\nasync function gracefullyResetDevice(device: USBDevice) {\n  try {\n    await device.reset();\n  } catch (err) {\n    console.warn(err);\n  }\n}\n"],"file":"TransportWebUSB.js"}