"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const detectInstalled = require("detect-installed");
const getInstalledPath = require("get-installed-path");
const sinon = __importStar(require("sinon"));
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const mocha_1 = require("mocha");
const globalnpm_1 = require("../lib/sources/globalnpm");
const globalNpm = new globalnpm_1.GlobalNPM();
mocha_1.describe("globalnpm", () => {
    mocha_1.describe("require function", () => {
        let syncStub;
        let getInstalledPathSyncStub;
        beforeEach(() => {
            syncStub = sinon.stub(detectInstalled, "sync");
            getInstalledPathSyncStub = sinon.stub(getInstalledPath, "getInstalledPathSync");
        });
        afterEach(() => {
            syncStub.restore();
            getInstalledPathSyncStub.restore();
        });
        mocha_1.it("returns null if the import_path starts with '.'", () => {
            const result = globalNpm.require("./A.sol");
            assert_1.default.deepEqual(result, null);
        });
        mocha_1.it("returns null if the import_path is absolute path", () => {
            const result = globalNpm.require("/A.sol");
            assert_1.default.deepEqual(result, null);
        });
        mocha_1.it("returns the contents of json (in build/contracts)", () => {
            syncStub.withArgs("package").returns(true);
            getInstalledPathSyncStub
                .withArgs("package")
                .returns(path_1.default.resolve(__dirname, "fixtures/globalnpm/node_modules/package"));
            const result = globalNpm.require("package/Test.sol");
            assert_1.default.deepEqual(result, {});
        });
        mocha_1.it("returns the contents of json (in build dir)", () => {
            syncStub.withArgs("otherPackage").returns(true);
            getInstalledPathSyncStub
                .withArgs("otherPackage")
                .returns(path_1.default.resolve(__dirname, "fixtures/globalnpm/node_modules/otherPackage"));
            const result = globalNpm.require("otherPackage/OtherTest.sol");
            assert_1.default.deepEqual(result.wallace, "grommit");
        });
        mocha_1.it("returns undefined if the import_path does not exist", () => {
            const read_file_sync_stub = sinon.stub(fs_1.default, "readFileSync");
            syncStub.withArgs("package").returns(false);
            const result = globalNpm.require("package/contracts/Test.sol");
            assert_1.default.ok(!getInstalledPathSyncStub.called);
            assert_1.default.deepEqual(result, undefined);
            read_file_sync_stub.restore();
        });
        mocha_1.it("returns null if readFileSync throws Error", () => {
            const readFileSyncStub = sinon.stub(fs_1.default, "readFileSync");
            syncStub.withArgs("package").returns(true);
            getInstalledPathSyncStub
                .withArgs("package")
                .returns(path_1.default.resolve(__dirname, "fixtures/globalnpm/node_modules/package"));
            readFileSyncStub.throws("some error");
            const result = globalNpm.require("package/contracts/Test.sol");
            assert_1.default.deepEqual(result, null);
            readFileSyncStub.restore();
        });
    });
    mocha_1.describe("resolve function", () => {
        let syncStub;
        let getInstalledPathSyncStub;
        beforeEach(() => {
            syncStub = sinon.stub(detectInstalled, "sync");
            getInstalledPathSyncStub = sinon.stub(getInstalledPath, "getInstalledPathSync");
        });
        afterEach(() => {
            syncStub.restore();
            getInstalledPathSyncStub.restore();
        });
        mocha_1.it("returns the contents of solidity file if the import_path exists", () => __awaiter(void 0, void 0, void 0, function* () {
            syncStub.withArgs("package").returns(true);
            getInstalledPathSyncStub
                .withArgs("package")
                .returns(path_1.default.resolve(__dirname, "fixtures/globalnpm/node_modules/package"));
            const { body, filePath } = yield globalNpm.resolve("package/contracts/Test.sol");
            assert_1.default.strictEqual(body, "contract Test {}\n");
            assert_1.default.strictEqual(filePath, "package/contracts/Test.sol");
        }));
        mocha_1.it("returns undefined body if the package does not exist", () => __awaiter(void 0, void 0, void 0, function* () {
            syncStub.withArgs("package").returns(false);
            getInstalledPathSyncStub
                .withArgs("package")
                .returns(path_1.default.resolve(__dirname, "fixtures/globalnpm/node_modules/package"));
            const { body, filePath } = yield globalNpm.resolve("package/contracts/Test.sol");
            assert_1.default.strictEqual(body, undefined);
            assert_1.default.strictEqual(filePath, "package/contracts/Test.sol");
        }));
        mocha_1.it("returns undefined body if readFileSync throws Error", () => __awaiter(void 0, void 0, void 0, function* () {
            const readFileSyncStub = sinon.stub(fs_1.default, "readFileSync");
            syncStub.withArgs("package").returns(true);
            getInstalledPathSyncStub
                .withArgs("package")
                .returns(path_1.default.resolve(__dirname, "fixtures/globalnpm/node_modules/package"));
            readFileSyncStub.throws("some error");
            const { body, filePath } = yield globalNpm.resolve("package/contracts/Test.sol");
            assert_1.default.strictEqual(body, undefined);
            assert_1.default.strictEqual(filePath, "package/contracts/Test.sol");
            readFileSyncStub.restore();
        }));
    });
});
//# sourceMappingURL=globalnpm.js.map